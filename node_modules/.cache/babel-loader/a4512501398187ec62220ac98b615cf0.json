{"ast":null,"code":"var _defineProperty = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _require = require('crypto'),\n    pbkdf2 = _require.pbkdf2Sync,\n    randomBytes = _require.randomBytes;\n\nvar _require2 = require('../help/consts'),\n    KEYOBJECT = _require2.KEYOBJECT;\n\nvar base64url = require('../help/base64url');\n\nvar SALT_LENGTH = 16;\nvar NULL_BUFFER = Buffer.alloc(1, 0);\n\nvar concatSalt = function concatSalt(alg, p2s) {\n  return Buffer.concat([Buffer.from(alg, 'utf8'), NULL_BUFFER, p2s]);\n};\n\nvar wrapKey = function wrapKey(keylen, sha, concat, wrap, _ref, payload) {\n  var keyObject = _ref[KEYOBJECT];\n  // Note that if password-based encryption is used for multiple\n  // recipients, it is expected that each recipient use different values\n  // for the PBES2 parameters \"p2s\" and \"p2c\".\n  // here we generate p2c between 2048 and 4096 and random p2s\n  var p2c = Math.floor(Math.random() * 2049 + 2048);\n  var p2s = randomBytes(SALT_LENGTH);\n  var salt = concat(p2s);\n  var derivedKey = pbkdf2(keyObject.export(), salt, p2c, keylen, sha);\n  var result = wrap(_defineProperty({}, KEYOBJECT, derivedKey), payload);\n  result.header = result.header || {};\n  Object.assign(result.header, {\n    p2c: p2c,\n    p2s: base64url.encodeBuffer(p2s)\n  });\n  return result;\n};\n\nvar unwrapKey = function unwrapKey(keylen, sha, concat, unwrap, _ref2, payload, header) {\n  var keyObject = _ref2[KEYOBJECT];\n  var p2s = header.p2s,\n      p2c = header.p2c;\n  var salt = concat(p2s);\n  var derivedKey = pbkdf2(keyObject.export(), salt, p2c, keylen, sha);\n  return unwrap(_defineProperty({}, KEYOBJECT, derivedKey), payload, header);\n};\n\nmodule.exports = function (JWA, JWK) {\n  ['PBES2-HS256+A128KW', 'PBES2-HS384+A192KW', 'PBES2-HS512+A256KW'].forEach(function (jwaAlg) {\n    var kw = jwaAlg.substr(-6);\n    var kwWrap = JWA.keyManagementEncrypt.get(kw);\n    var kwUnwrap = JWA.keyManagementDecrypt.get(kw);\n    var keylen = parseInt(jwaAlg.substr(13, 3), 10) / 8;\n    var sha = \"sha\".concat(jwaAlg.substr(8, 3));\n\n    if (kwWrap && kwUnwrap) {\n      JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, keylen, sha, concatSalt.bind(undefined, jwaAlg), kwWrap));\n      JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, keylen, sha, concatSalt.bind(undefined, jwaAlg), kwUnwrap));\n\n      JWK.oct.deriveKey[jwaAlg] = function (key) {\n        return key.use === 'enc' || key.use === undefined;\n      };\n    }\n  });\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/jwa/pbes2.js"],"names":["require","pbkdf2","pbkdf2Sync","randomBytes","KEYOBJECT","base64url","SALT_LENGTH","NULL_BUFFER","Buffer","alloc","concatSalt","alg","p2s","concat","from","wrapKey","keylen","sha","wrap","payload","keyObject","p2c","Math","floor","random","salt","derivedKey","export","result","header","Object","assign","encodeBuffer","unwrapKey","unwrap","module","exports","JWA","JWK","forEach","jwaAlg","kw","substr","kwWrap","keyManagementEncrypt","get","kwUnwrap","keyManagementDecrypt","parseInt","set","bind","undefined","oct","deriveKey","key","use"],"mappings":"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","sourcesContent":["const { pbkdf2Sync: pbkdf2, randomBytes } = require('crypto')\n\nconst { KEYOBJECT } = require('../help/consts')\nconst base64url = require('../help/base64url')\n\nconst SALT_LENGTH = 16\nconst NULL_BUFFER = Buffer.alloc(1, 0)\n\nconst concatSalt = (alg, p2s) => {\n  return Buffer.concat([\n    Buffer.from(alg, 'utf8'),\n    NULL_BUFFER,\n    p2s\n  ])\n}\n\nconst wrapKey = (keylen, sha, concat, wrap, { [KEYOBJECT]: keyObject }, payload) => {\n  // Note that if password-based encryption is used for multiple\n  // recipients, it is expected that each recipient use different values\n  // for the PBES2 parameters \"p2s\" and \"p2c\".\n  // here we generate p2c between 2048 and 4096 and random p2s\n  const p2c = Math.floor((Math.random() * 2049) + 2048)\n  const p2s = randomBytes(SALT_LENGTH)\n  const salt = concat(p2s)\n\n  const derivedKey = pbkdf2(keyObject.export(), salt, p2c, keylen, sha)\n\n  const result = wrap({ [KEYOBJECT]: derivedKey }, payload)\n  result.header = result.header || {}\n  Object.assign(result.header, { p2c, p2s: base64url.encodeBuffer(p2s) })\n\n  return result\n}\n\nconst unwrapKey = (keylen, sha, concat, unwrap, { [KEYOBJECT]: keyObject }, payload, header) => {\n  const { p2s, p2c } = header\n  const salt = concat(p2s)\n  const derivedKey = pbkdf2(keyObject.export(), salt, p2c, keylen, sha)\n  return unwrap({ [KEYOBJECT]: derivedKey }, payload, header)\n}\n\nmodule.exports = (JWA, JWK) => {\n  ['PBES2-HS256+A128KW', 'PBES2-HS384+A192KW', 'PBES2-HS512+A256KW'].forEach((jwaAlg) => {\n    const kw = jwaAlg.substr(-6)\n    const kwWrap = JWA.keyManagementEncrypt.get(kw)\n    const kwUnwrap = JWA.keyManagementDecrypt.get(kw)\n    const keylen = parseInt(jwaAlg.substr(13, 3), 10) / 8\n    const sha = `sha${jwaAlg.substr(8, 3)}`\n\n    if (kwWrap && kwUnwrap) {\n      JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, keylen, sha, concatSalt.bind(undefined, jwaAlg), kwWrap))\n      JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, keylen, sha, concatSalt.bind(undefined, jwaAlg), kwUnwrap))\n      JWK.oct.deriveKey[jwaAlg] = key => key.use === 'enc' || key.use === undefined\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}