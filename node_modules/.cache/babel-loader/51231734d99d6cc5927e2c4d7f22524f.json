{"ast":null,"code":"var _jsxFileName = \"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/src/components/LogsData/Results.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Avatar, Box, Card, Checkbox, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, Typography, makeStyles, Grid } from '@material-ui/core';\nimport getInitials from './getInitials';\nimport { database } from '../../firebase';\nimport { firebaseLooperTwo } from '../../utils/tools';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  avatar: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst Results = ({\n  className,\n  customers,\n  ...rest\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(5);\n  const [page, setPage] = useState(0);\n  const [calls, setCalls] = useState([]);\n  useEffect(() => {\n    database.ref('calls/').get().then(snapshot => {\n      const data = firebaseLooperTwo(snapshot);\n      console.log(data);\n      setCalls(data);\n    });\n  }, []);\n\n  const handleSelectAll = event => {\n    let newSelectedCustomerIds;\n\n    if (event.target.checked) {\n      newSelectedCustomerIds = customers.map(customer => customer.id);\n    } else {\n      newSelectedCustomerIds = [];\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, selectedIndex), selectedCustomerIds.slice(selectedIndex + 1));\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleLimitChange = event => {\n    setLimit(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: clsx(classes.root, className),\n    ...rest,\n    children: [/*#__PURE__*/_jsxDEV(PerfectScrollbar, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        lg: 3,\n        sm: 6,\n        xl: 3,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                padding: \"checkbox\",\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: selectedCustomerIds.length === customers.length,\n                  color: \"primary\",\n                  indeterminate: selectedCustomerIds.length > 0 && selectedCustomerIds.length < customers.length,\n                  onChange: handleSelectAll\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Manual\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Step\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 20\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: calls.slice(0, limit).map(customer => /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              selected: selectedCustomerIds.indexOf(customer.key) !== -1,\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                padding: \"checkbox\",\n                align: \"center\",\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: selectedCustomerIds.indexOf(customer.key) !== -1,\n                  onChange: event => handleSelectOne(event, customer.key),\n                  value: \"true\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  align: \"center\",\n                  color: \"textPrimary\",\n                  variant: \"button\",\n                  children: customer.manual\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  color: \"textPrimary\",\n                  variant: \"button\",\n                  children: customer.step\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: customer.time\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 19\n              }, this)]\n            }, customer.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      component: \"div\",\n      count: customers.length,\n      onChangePage: handlePageChange,\n      onChangeRowsPerPage: handleLimitChange,\n      page: page,\n      rowsPerPage: limit,\n      rowsPerPageOptions: [5, 10, 25]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Results, \"Wh6VrB/blweciQtKEZ7k2hTMGY8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Results;\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.array.isRequired\n};\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/src/components/LogsData/Results.jsx"],"names":["React","useEffect","useState","clsx","PropTypes","moment","PerfectScrollbar","Avatar","Box","Card","Checkbox","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Typography","makeStyles","Grid","getInitials","database","firebaseLooperTwo","useStyles","theme","root","width","avatar","marginRight","spacing","Results","className","customers","rest","classes","selectedCustomerIds","setSelectedCustomerIds","limit","setLimit","page","setPage","calls","setCalls","ref","get","then","snapshot","data","console","log","handleSelectAll","event","newSelectedCustomerIds","target","checked","map","customer","id","handleSelectOne","selectedIndex","indexOf","concat","slice","length","handleLimitChange","value","handlePageChange","newPage","key","manual","step","time","propTypes","string","array","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Card,\r\n  Checkbox,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography,\r\n  makeStyles,\r\n  Grid\r\n} from '@material-ui/core';\r\nimport getInitials from './getInitials';\r\nimport { database } from '../../firebase';\r\nimport { firebaseLooperTwo } from '../../utils/tools';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  avatar: {\r\n    marginRight: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst Results = ({ className, customers, ...rest }) => {\r\n  const classes = useStyles();\r\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\r\n  const [limit, setLimit] = useState(5);\r\n  const [page, setPage] = useState(0)\r\n\r\n   const [calls, setCalls] = useState([]);\r\n\r\n  useEffect(() => {\r\n        database.ref('calls/').get().then((snapshot) => {\r\n            const data = firebaseLooperTwo(snapshot)\r\n            console.log(data)\r\n            setCalls(data)\r\n           \r\n        })\r\n      }, [])\r\n\r\n  const handleSelectAll = (event) => {\r\n    let newSelectedCustomerIds;\r\n\r\n    if (event.target.checked) {\r\n      newSelectedCustomerIds = customers.map((customer) => customer.id);\r\n    } else {\r\n      newSelectedCustomerIds = [];\r\n    }\r\n\r\n    setSelectedCustomerIds(newSelectedCustomerIds);\r\n  };\r\n\r\n  const handleSelectOne = (event, id) => {\r\n    const selectedIndex = selectedCustomerIds.indexOf(id);\r\n    let newSelectedCustomerIds = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\r\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\r\n        selectedCustomerIds.slice(0, selectedIndex),\r\n        selectedCustomerIds.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelectedCustomerIds(newSelectedCustomerIds);\r\n  };\r\n\r\n  const handleLimitChange = (event) => {\r\n    setLimit(event.target.value);\r\n  };\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n     \r\n    >\r\n      <PerfectScrollbar>\r\n        <Box\r\n         lg={3}\r\n       sm={6}\r\n       xl={3}\r\n       xs={12}\r\n         >\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                  <Checkbox\r\n                    checked={selectedCustomerIds.length === customers.length}\r\n                    color=\"primary\"\r\n                    indeterminate={\r\n                      selectedCustomerIds.length > 0\r\n                      && selectedCustomerIds.length < customers.length\r\n                    }\r\n                    onChange={handleSelectAll}\r\n                  />\r\n                </TableCell>\r\n                <TableCell align=\"center\">\r\n                  <strong>Manual</strong>\r\n                </TableCell>\r\n                <TableCell align=\"center\">\r\n                  <strong>Step</strong> \r\n                </TableCell>\r\n                <TableCell align=\"center\">\r\n                   <strong>Time</strong>\r\n                </TableCell>\r\n               \r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {calls.slice(0, limit).map((customer) => (\r\n                <TableRow\r\n                  hover\r\n                  key={customer.id}\r\n                  selected={selectedCustomerIds.indexOf(customer.key) !== -1}\r\n                >\r\n                  <TableCell  padding=\"checkbox\" align=\"center\">\r\n                    <Checkbox\r\n                      checked={selectedCustomerIds.indexOf(customer.key) !== -1}\r\n                      onChange={(event) => handleSelectOne(event, customer.key)}\r\n                      value=\"true\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"center\"> \r\n                      <Typography\r\n                      align=\"center\"\r\n                        color=\"textPrimary\"\r\n                        variant=\"button\"\r\n                      >\r\n                        {customer.manual}\r\n                      </Typography>\r\n                   \r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n\r\n                  <Typography\r\n                        color=\"textPrimary\"\r\n                        variant=\"button\"\r\n                      >\r\n                        {customer.step}\r\n                      </Typography>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    {customer.time}\r\n                  </TableCell>\r\n                  \r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={customers.length}\r\n        onChangePage={handlePageChange}\r\n        onChangeRowsPerPage={handleLimitChange}\r\n        page={page}\r\n        rowsPerPage={limit}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nResults.propTypes = {\r\n  className: PropTypes.string,\r\n  customers: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Results"]},"metadata":{},"sourceType":"module"}