{"ast":null,"code":"var _require = require('../errors'),\n    ArgumentError = _require.ArgumentError;\n\nvar _require2 = require('../JwksClient'),\n    JwksClient = _require2.JwksClient;\n\nvar supportedAlg = require('./config');\n\nmodule.exports.koaJwtSecret = function () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!options.jwksUri) {\n    throw new ArgumentError('No JWKS provided. Please provide a jwksUri');\n  }\n\n  var client = new JwksClient(options);\n  return function secretProvider() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        alg = _ref.alg,\n        kid = _ref.kid;\n\n    return new Promise(function (resolve, reject) {\n      if (!supportedAlg.includes(alg)) {\n        return reject(new Error('Missing / invalid token algorithm'));\n      }\n\n      client.getSigningKey(kid).then(function (key) {\n        resolve(key.publicKey || key.rsaPublicKey);\n      }).catch(function (err) {\n        if (options.handleSigningKeyError) {\n          return options.handleSigningKeyError(err).then(reject);\n        }\n\n        return reject(err);\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jwks-rsa/src/integrations/koa.js"],"names":["require","ArgumentError","JwksClient","supportedAlg","module","exports","koaJwtSecret","options","jwksUri","client","secretProvider","alg","kid","Promise","resolve","reject","includes","Error","getSigningKey","then","key","publicKey","rsaPublicKey","catch","err","handleSigningKeyError"],"mappings":"eAA0BA,OAAO,CAAC,WAAD,C;IAAzBC,a,YAAAA,a;;gBACeD,OAAO,CAAC,eAAD,C;IAAtBE,U,aAAAA,U;;AACR,IAAMC,YAAY,GAAGH,OAAO,CAAC,UAAD,CAA5B;;AAEAI,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8B,YAAwB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACpD,MAAI,CAACA,OAAO,CAACC,OAAb,EAAsB;AACpB,UAAM,IAAIP,aAAJ,CAAkB,4CAAlB,CAAN;AACD;;AAED,MAAMQ,MAAM,GAAG,IAAIP,UAAJ,CAAeK,OAAf,CAAf;AAEA,SAAO,SAASG,cAAT,GAA2C;AAAA,mFAAJ,EAAI;AAAA,QAAjBC,GAAiB,QAAjBA,GAAiB;AAAA,QAAZC,GAAY,QAAZA,GAAY;;AAChD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAI,CAACZ,YAAY,CAACa,QAAb,CAAsBL,GAAtB,CAAL,EAAiC;AAC/B,eAAOI,MAAM,CAAC,IAAIE,KAAJ,CAAU,mCAAV,CAAD,CAAb;AACD;;AAEDR,MAAAA,MAAM,CAACS,aAAP,CAAqBN,GAArB,EACGO,IADH,CACQ,UAAAC,GAAG,EAAI;AACXN,QAAAA,OAAO,CAACM,GAAG,CAACC,SAAJ,IAAiBD,GAAG,CAACE,YAAtB,CAAP;AACD,OAHH,EAGKC,KAHL,CAGW,UAAAC,GAAG,EAAI;AACd,YAAIjB,OAAO,CAACkB,qBAAZ,EAAmC;AACjC,iBAAOlB,OAAO,CAACkB,qBAAR,CAA8BD,GAA9B,EAAmCL,IAAnC,CAAwCJ,MAAxC,CAAP;AACD;;AAED,eAAOA,MAAM,CAACS,GAAD,CAAb;AACD,OATH;AAUD,KAfM,CAAP;AAgBD,GAjBD;AAkBD,CAzBD","sourcesContent":["const { ArgumentError } = require('../errors');\nconst { JwksClient } = require('../JwksClient');\nconst supportedAlg = require('./config');\n\nmodule.exports.koaJwtSecret = function (options = {}) {\n  if (!options.jwksUri) {\n    throw new ArgumentError('No JWKS provided. Please provide a jwksUri');\n  }\n\n  const client = new JwksClient(options);\n\n  return function secretProvider({ alg, kid } = {}) {\n    return new Promise((resolve, reject) => {\n      if (!supportedAlg.includes(alg)) {\n        return reject(new Error('Missing / invalid token algorithm'));\n      }\n\n      client.getSigningKey(kid)\n        .then(key => {\n          resolve(key.publicKey || key.rsaPublicKey);\n        }).catch(err => {\n          if (options.handleSigningKeyError) {\n            return options.handleSigningKeyError(err).then(reject);\n          }\n\n          return reject(err);\n        });\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"script"}