{"ast":null,"code":"var _require = require('crypto'),\n    createSign = _require.createSign,\n    createVerify = _require.createVerify;\n\nvar _require2 = require('../help/consts'),\n    KEYOBJECT = _require2.KEYOBJECT;\n\nvar resolveNodeAlg = require('../help/node_alg');\n\nvar _require3 = require('../help/key_object'),\n    asInput = _require3.asInput;\n\nvar sign = function sign(nodeAlg, _ref, payload) {\n  var keyObject = _ref[KEYOBJECT];\n  return createSign(nodeAlg).update(payload).sign(asInput(keyObject, false));\n};\n\nvar verify = function verify(nodeAlg, _ref2, payload, signature) {\n  var keyObject = _ref2[KEYOBJECT];\n  return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), signature);\n};\n\nvar LENGTHS = {\n  RS256: 0,\n  RS384: 624,\n  RS512: 752\n};\n\nmodule.exports = function (JWA, JWK) {\n  ['RS256', 'RS384', 'RS512'].forEach(function (jwaAlg) {\n    var nodeAlg = resolveNodeAlg(jwaAlg);\n    JWA.sign.set(jwaAlg, sign.bind(undefined, nodeAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, nodeAlg));\n\n    JWK.RSA.sign[jwaAlg] = function (key) {\n      return key.private && JWK.RSA.verify[jwaAlg](key);\n    };\n\n    JWK.RSA.verify[jwaAlg] = function (key) {\n      return (key.use === 'sig' || key.use === undefined) && key.length >= LENGTHS[jwaAlg];\n    };\n  });\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/jwa/rsassa.js"],"names":["require","createSign","createVerify","KEYOBJECT","resolveNodeAlg","asInput","sign","nodeAlg","payload","keyObject","update","verify","signature","LENGTHS","RS256","RS384","RS512","module","exports","JWA","JWK","forEach","jwaAlg","set","bind","undefined","RSA","key","private","use","length"],"mappings":"eAAqCA,OAAO,CAAC,QAAD,C;IAApCC,U,YAAAA,U;IAAYC,Y,YAAAA,Y;;gBAEEF,OAAO,CAAC,gBAAD,C;IAArBG,S,aAAAA,S;;AACR,IAAMC,cAAc,GAAGJ,OAAO,CAAC,kBAAD,CAA9B;;gBACoBA,OAAO,CAAC,oBAAD,C;IAAnBK,O,aAAAA,O;;AAER,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,OAAD,QAAsCC,OAAtC,EAAkD;AAAA,MAAzBC,SAAyB,QAArCN,SAAqC;AAC7D,SAAOF,UAAU,CAACM,OAAD,CAAV,CAAoBG,MAApB,CAA2BF,OAA3B,EAAoCF,IAApC,CAAyCD,OAAO,CAACI,SAAD,EAAY,KAAZ,CAAhD,CAAP;AACD,CAFD;;AAIA,IAAME,MAAM,GAAG,SAATA,MAAS,CAACJ,OAAD,SAAsCC,OAAtC,EAA+CI,SAA/C,EAA6D;AAAA,MAApCH,SAAoC,SAAhDN,SAAgD;AAC1E,SAAOD,YAAY,CAACK,OAAD,CAAZ,CAAsBG,MAAtB,CAA6BF,OAA7B,EAAsCG,MAAtC,CAA6CN,OAAO,CAACI,SAAD,EAAY,IAAZ,CAApD,EAAuEG,SAAvE,CAAP;AACD,CAFD;;AAIA,IAAMC,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,CADO;AAEdC,EAAAA,KAAK,EAAE,GAFO;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAhB;;AAMAC,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B,GAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4BC,OAA5B,CAAoC,UAACC,MAAD,EAAY;AAC9C,QAAMf,OAAO,GAAGH,cAAc,CAACkB,MAAD,CAA9B;AACAH,IAAAA,GAAG,CAACb,IAAJ,CAASiB,GAAT,CAAaD,MAAb,EAAqBhB,IAAI,CAACkB,IAAL,CAAUC,SAAV,EAAqBlB,OAArB,CAArB;AACAY,IAAAA,GAAG,CAACR,MAAJ,CAAWY,GAAX,CAAeD,MAAf,EAAuBX,MAAM,CAACa,IAAP,CAAYC,SAAZ,EAAuBlB,OAAvB,CAAvB;;AACAa,IAAAA,GAAG,CAACM,GAAJ,CAAQpB,IAAR,CAAagB,MAAb,IAAuB,UAAAK,GAAG;AAAA,aAAIA,GAAG,CAACC,OAAJ,IAAeR,GAAG,CAACM,GAAJ,CAAQf,MAAR,CAAeW,MAAf,EAAuBK,GAAvB,CAAnB;AAAA,KAA1B;;AACAP,IAAAA,GAAG,CAACM,GAAJ,CAAQf,MAAR,CAAeW,MAAf,IAAyB,UAAAK,GAAG;AAAA,aAAI,CAACA,GAAG,CAACE,GAAJ,KAAY,KAAZ,IAAqBF,GAAG,CAACE,GAAJ,KAAYJ,SAAlC,KAAgDE,GAAG,CAACG,MAAJ,IAAcjB,OAAO,CAACS,MAAD,CAAzE;AAAA,KAA5B;AACD,GAND;AAOD,CARD","sourcesContent":["const { createSign, createVerify } = require('crypto')\n\nconst { KEYOBJECT } = require('../help/consts')\nconst resolveNodeAlg = require('../help/node_alg')\nconst { asInput } = require('../help/key_object')\n\nconst sign = (nodeAlg, { [KEYOBJECT]: keyObject }, payload) => {\n  return createSign(nodeAlg).update(payload).sign(asInput(keyObject, false))\n}\n\nconst verify = (nodeAlg, { [KEYOBJECT]: keyObject }, payload, signature) => {\n  return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), signature)\n}\n\nconst LENGTHS = {\n  RS256: 0,\n  RS384: 624,\n  RS512: 752\n}\n\nmodule.exports = (JWA, JWK) => {\n  ['RS256', 'RS384', 'RS512'].forEach((jwaAlg) => {\n    const nodeAlg = resolveNodeAlg(jwaAlg)\n    JWA.sign.set(jwaAlg, sign.bind(undefined, nodeAlg))\n    JWA.verify.set(jwaAlg, verify.bind(undefined, nodeAlg))\n    JWK.RSA.sign[jwaAlg] = key => key.private && JWK.RSA.verify[jwaAlg](key)\n    JWK.RSA.verify[jwaAlg] = key => (key.use === 'sig' || key.use === undefined) && key.length >= LENGTHS[jwaAlg]\n  })\n}\n"]},"metadata":{},"sourceType":"script"}