{"ast":null,"code":"var _require = require('../../help/runtime_support'),\n    improvedDH = _require.improvedDH;\n\nif (improvedDH) {\n  var _require2 = require('crypto'),\n      diffieHellman = _require2.diffieHellman;\n\n  var _require3 = require('../../help/key_object'),\n      KeyObject = _require3.KeyObject;\n\n  var importKey = require('../../jwk/import');\n\n  module.exports = function (_ref, publicKey) {\n    var privateKey = _ref.keyObject;\n\n    if (!(publicKey instanceof KeyObject)) {\n      var _importKey = importKey(publicKey);\n\n      publicKey = _importKey.keyObject;\n    }\n\n    return diffieHellman({\n      privateKey: privateKey,\n      publicKey: publicKey\n    });\n  };\n} else {\n  var _require4 = require('crypto'),\n      createECDH = _require4.createECDH,\n      POINT_CONVERSION_UNCOMPRESSED = _require4.constants.POINT_CONVERSION_UNCOMPRESSED;\n\n  var base64url = require('../../help/base64url');\n\n  var crvToCurve = function crvToCurve(crv) {\n    switch (crv) {\n      case 'P-256':\n        return 'prime256v1';\n\n      case 'P-384':\n        return 'secp384r1';\n\n      case 'P-521':\n        return 'secp521r1';\n    }\n  };\n\n  var UNCOMPRESSED = Buffer.alloc(1, POINT_CONVERSION_UNCOMPRESSED);\n\n  var pubToBuffer = function pubToBuffer(x, y) {\n    return Buffer.concat([UNCOMPRESSED, base64url.decodeToBuffer(x), base64url.decodeToBuffer(y)]);\n  };\n\n  module.exports = function (_ref2, _ref3) {\n    var crv = _ref2.crv,\n        d = _ref2.d;\n    var x = _ref3.x,\n        y = _ref3.y;\n    var curve = crvToCurve(crv);\n    var exchange = createECDH(curve);\n    exchange.setPrivateKey(base64url.decodeToBuffer(d));\n    return exchange.computeSecret(pubToBuffer(x, y));\n  };\n}","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/jwa/ecdh/compute_secret.js"],"names":["require","improvedDH","diffieHellman","KeyObject","importKey","module","exports","publicKey","privateKey","keyObject","createECDH","POINT_CONVERSION_UNCOMPRESSED","constants","base64url","crvToCurve","crv","UNCOMPRESSED","Buffer","alloc","pubToBuffer","x","y","concat","decodeToBuffer","d","curve","exchange","setPrivateKey","computeSecret"],"mappings":"eAAuBA,OAAO,CAAC,4BAAD,C;IAAtBC,U,YAAAA,U;;AAER,IAAIA,UAAJ,EAAgB;AAAA,kBACYD,OAAO,CAAC,QAAD,CADnB;AAAA,MACNE,aADM,aACNA,aADM;;AAAA,kBAGQF,OAAO,CAAC,uBAAD,CAHf;AAAA,MAGNG,SAHM,aAGNA,SAHM;;AAId,MAAMC,SAAS,GAAGJ,OAAO,CAAC,kBAAD,CAAzB;;AAEAK,EAAAA,MAAM,CAACC,OAAP,GAAiB,gBAA4BC,SAA5B,EAA0C;AAAA,QAA5BC,UAA4B,QAAvCC,SAAuC;;AACzD,QAAI,EAAEF,SAAS,YAAYJ,SAAvB,CAAJ,EAAuC;AAAA,uBACTC,SAAS,CAACG,SAAD,CADA;;AACvBA,MAAAA,SADuB,cAClCE,SADkC;AAEtC;;AAED,WAAOP,aAAa,CAAC;AAAEM,MAAAA,UAAU,EAAVA,UAAF;AAAcD,MAAAA,SAAS,EAATA;AAAd,KAAD,CAApB;AACD,GAND;AAOD,CAbD,MAaO;AAAA,kBACgEP,OAAO,CAAC,QAAD,CADvE;AAAA,MACGU,UADH,aACGA,UADH;AAAA,MAC4BC,6BAD5B,aACeC,SADf,CAC4BD,6BAD5B;;AAGL,MAAME,SAAS,GAAGb,OAAO,CAAC,sBAAD,CAAzB;;AAEA,MAAMc,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AAC1B,YAAQA,GAAR;AACE,WAAK,OAAL;AACE,eAAO,YAAP;;AACF,WAAK,OAAL;AACE,eAAO,WAAP;;AACF,WAAK,OAAL;AACE,eAAO,WAAP;AANJ;AAQD,GATD;;AAWA,MAAMC,YAAY,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgBP,6BAAhB,CAArB;;AACA,MAAMQ,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUJ,MAAM,CAACK,MAAP,CAAc,CAACN,YAAD,EAAeH,SAAS,CAACU,cAAV,CAAyBH,CAAzB,CAAf,EAA4CP,SAAS,CAACU,cAAV,CAAyBF,CAAzB,CAA5C,CAAd,CAAV;AAAA,GAApB;;AAEAhB,EAAAA,MAAM,CAACC,OAAP,GAAiB,wBAA0B;AAAA,QAAvBS,GAAuB,SAAvBA,GAAuB;AAAA,QAAlBS,CAAkB,SAAlBA,CAAkB;AAAA,QAAXJ,CAAW,SAAXA,CAAW;AAAA,QAARC,CAAQ,SAARA,CAAQ;AACzC,QAAMI,KAAK,GAAGX,UAAU,CAACC,GAAD,CAAxB;AACA,QAAMW,QAAQ,GAAGhB,UAAU,CAACe,KAAD,CAA3B;AAEAC,IAAAA,QAAQ,CAACC,aAAT,CAAuBd,SAAS,CAACU,cAAV,CAAyBC,CAAzB,CAAvB;AAEA,WAAOE,QAAQ,CAACE,aAAT,CAAuBT,WAAW,CAACC,CAAD,EAAIC,CAAJ,CAAlC,CAAP;AACD,GAPD;AAQD","sourcesContent":["const { improvedDH } = require('../../help/runtime_support')\n\nif (improvedDH) {\n  const { diffieHellman } = require('crypto')\n\n  const { KeyObject } = require('../../help/key_object')\n  const importKey = require('../../jwk/import')\n\n  module.exports = ({ keyObject: privateKey }, publicKey) => {\n    if (!(publicKey instanceof KeyObject)) {\n      ({ keyObject: publicKey } = importKey(publicKey))\n    }\n\n    return diffieHellman({ privateKey, publicKey })\n  }\n} else {\n  const { createECDH, constants: { POINT_CONVERSION_UNCOMPRESSED } } = require('crypto')\n\n  const base64url = require('../../help/base64url')\n\n  const crvToCurve = (crv) => {\n    switch (crv) {\n      case 'P-256':\n        return 'prime256v1'\n      case 'P-384':\n        return 'secp384r1'\n      case 'P-521':\n        return 'secp521r1'\n    }\n  }\n\n  const UNCOMPRESSED = Buffer.alloc(1, POINT_CONVERSION_UNCOMPRESSED)\n  const pubToBuffer = (x, y) => Buffer.concat([UNCOMPRESSED, base64url.decodeToBuffer(x), base64url.decodeToBuffer(y)])\n\n  module.exports = ({ crv, d }, { x, y }) => {\n    const curve = crvToCurve(crv)\n    const exchange = createECDH(curve)\n\n    exchange.setPrivateKey(base64url.decodeToBuffer(d))\n\n    return exchange.computeSecret(pubToBuffer(x, y))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}