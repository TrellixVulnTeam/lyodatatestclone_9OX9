{"ast":null,"code":"var _jsxFileName = \"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/src/Pages/MiddlePage/Graph/GraphData.jsx\",\n    _s = $RefreshSig$();\n\nimport { Container } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GraphData = ({\n  data\n}) => {\n  _s();\n\n  let time = [];\n  let temp = [];\n  let stillTime = [];\n  let pressure = [];\n  let delta = [];\n  let deltaP = [];\n  const [timeData, setTimeData] = useState([]);\n  const [stillTimeData, setStillTimeData] = useState([]);\n  const [deltaTemp, setDeltaTemp] = useState([]);\n  const [deltaPressure, setDeltaP] = useState([]);\n  const [tempData, setTempData] = useState([]);\n  const [pressureData, setPressureData] = useState([]);\n  const totalDuration = 10000;\n  const delayBetweenPoints = totalDuration / data.length;\n  useEffect(() => {\n    var x, y, z;\n    var randomTemp, randomPressure;\n    let currTemp = 25;\n    let currPressure = 800;\n    let currTime = 0;\n\n    for (let index = 0; index < data.length; index++) {\n      x = (data[index].temp1 - currTemp) / data[index].time1;\n      y = (data[index].pressure - currPressure) / data[index].time1;\n\n      for (let j = 0; j < data[index].time1; j++) {\n        currTime++;\n        currTemp = currTemp + x;\n        randomTemp = currTemp + Math.floor(Math.random() * x);\n        currPressure = currPressure + y;\n        randomPressure = currPressure + Math.floor(Math.random() * y);\n        time.push(currTime);\n        temp.push(currTemp);\n        pressure.push(currPressure);\n        delta.push(randomTemp);\n        deltaP.push(randomPressure);\n      }\n\n      for (let k = 0; k < data[index].time2; k++) {\n        currTime++;\n        time.push(currTime);\n        temp.push(currTemp);\n        pressure.push(currPressure);\n        delta.push(randomTemp);\n        deltaP.push(randomPressure);\n      }\n    }\n\n    setTimeData(time);\n    setTempData(temp);\n    setStillTimeData(stillTime);\n    setPressureData(pressure);\n    setDeltaP(deltaP);\n    setDeltaTemp(delta);\n  }, [data]);\n  const dataTwo = {\n    labels: timeData,\n    datasets: [{\n      yAxisID: \"y-axis-0\",\n      label: 'Temprature',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'yellow',\n      borderColor: 'yellow',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'yellow',\n      pointBackgroundColor: 'yellow',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: '#ff7a00',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: tempData\n    }, {\n      yAxisID: \"y-axis-1\",\n      position: \"right\",\n      label: 'Pressure',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'orange',\n      borderColor: 'orange',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'orange',\n      pointBackgroundColor: 'orange',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'orange',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: pressureData\n    }, {\n      yAxisID: \"y2\",\n      label: 'Expected Temp',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'green',\n      borderColor: 'green',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'green',\n      pointBackgroundColor: 'green',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'green',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: deltaTemp\n    }, {\n      yAxisID: \"y3\",\n      label: 'Expected Pressure',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'red',\n      borderColor: 'red',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'red',\n      pointBackgroundColor: 'red',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'red',\n      pointHoverBorderColor: 'red',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: deltaPressure\n    }]\n  };\n  const options = {\n    legend: {\n      position: 'bottom',\n      labels: {\n        fontColor: 'white'\n      }\n    },\n    title: {\n      display: true,\n      text: \"Graph Data for The respective Batch\"\n    },\n    tooltips: {\n      mode: 'label'\n    },\n    interaction: {\n      mode: 'index',\n      intersect: false\n    },\n    responsive: true,\n    scales: {\n      xAxes: [{\n        display: true,\n        stacked: true,\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 12,\n          fontColor: 'white',\n          fontSize: 10,\n          animation: {\n            duration: delayBetweenPoints,\n            easing: 'linear'\n          }\n        }\n      }],\n      ticks: {\n        major: {\n          fontStyle: 'bold',\n          fontColor: '#FF0000'\n        }\n      },\n      yAxes: [{\n        stacked: true,\n        position: \"left\",\n        id: \"y-axis-0\",\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 12,\n          fontColor: 'white',\n          fontSize: 14\n        }\n      }, {\n        stacked: true,\n        display: false,\n        position: \"left\",\n        id: \"y2\",\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 12,\n          fontColor: 'white',\n          fontSize: 14\n        }\n      }, {\n        stacked: false,\n        display: false,\n        position: \"right\",\n        id: \"y3\",\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 12,\n          fontColor: 'white',\n          fontSize: 14\n        }\n      }, {\n        stacked: false,\n        position: \"right\",\n        id: \"y-axis-1\",\n        fontColor: 'white',\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 12,\n          fontColor: 'white',\n          fontSize: 14\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      background: \"black\",\n      color: \"white\",\n      marginBottom: \"20px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: dataTwo,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GraphData, \"VodavgMwWEJqJsFNhY1hPaOFCTQ=\");\n\n_c = GraphData;\nexport default GraphData;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphData\");","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/src/Pages/MiddlePage/Graph/GraphData.jsx"],"names":["Container","React","useEffect","useState","Line","GraphData","data","time","temp","stillTime","pressure","delta","deltaP","timeData","setTimeData","stillTimeData","setStillTimeData","deltaTemp","setDeltaTemp","deltaPressure","setDeltaP","tempData","setTempData","pressureData","setPressureData","totalDuration","delayBetweenPoints","length","x","y","z","randomTemp","randomPressure","currTemp","currPressure","currTime","index","temp1","time1","j","Math","floor","random","push","k","time2","dataTwo","labels","datasets","yAxisID","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","position","options","legend","fontColor","title","display","text","tooltips","mode","interaction","intersect","responsive","scales","xAxes","stacked","ticks","autoSkip","maxTicksLimit","fontSize","animation","duration","easing","major","fontStyle","yAxes","id","background","color","marginBottom"],"mappings":"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","sourcesContent":["import { Container } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { Line } from \"react-chartjs-2\";\n\n\nconst GraphData = ({ data}) => {\n  let time = []\n  let temp = []\n  let stillTime = []\n  let pressure = []\n  let delta =  []\n  let deltaP =[]\n  const [timeData, setTimeData] = useState([])\n  const [stillTimeData, setStillTimeData] = useState([])\n  const [deltaTemp, setDeltaTemp] = useState([])\n  const [deltaPressure, setDeltaP] = useState([])\n  const [tempData, setTempData] = useState([])\n  const [pressureData, setPressureData] = useState([])\nconst totalDuration = 10000;\nconst delayBetweenPoints = totalDuration / data.length;\n\n  \n  useEffect(() => {\n      var x, y, z;\n      var randomTemp, randomPressure;\n      let currTemp=25; let currPressure= 800; let currTime = 0;\n    for (let index = 0; index < data.length; index++) {\n      x = (data[index].temp1 - currTemp)/data[index].time1\n      y = (data[index].pressure - currPressure)/data[index].time1\n     \n      for (let j = 0; j < data[index].time1 ; j++) {\n          currTime++;\n          currTemp = currTemp + x;\n          randomTemp = currTemp + Math.floor(Math.random() * x)\n          currPressure = currPressure + y\n           randomPressure = currPressure+ Math.floor(Math.random() * y)\n          time.push(currTime)\n          temp.push(currTemp)\n          pressure.push(currPressure)\n          delta.push(randomTemp)\n          deltaP.push(randomPressure)\n          \n      }\n\n      for (let k = 0; k < data[index].time2; k++) {\n          currTime++\n          time.push(currTime)\n          temp.push(currTemp)\n          pressure.push(currPressure)\n          delta.push(randomTemp)\n          deltaP.push(randomPressure)\n          \n      }\n    }\n  setTimeData(time)\n  setTempData(temp)\n  setStillTimeData(stillTime)\n  setPressureData(pressure)\n  setDeltaP(deltaP)\n  setDeltaTemp(delta)\n\n  },[data] )\n\n  const dataTwo = {\n  labels: timeData,\n  datasets: [\n    {\n      yAxisID: \"y-axis-0\",\n      label: 'Temprature',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'yellow',\n      borderColor: 'yellow',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'yellow',\n      pointBackgroundColor: 'yellow',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: '#ff7a00',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: tempData\n    },\n     {\n       yAxisID: \"y-axis-1\",\n       position: \"right\",\n      label: 'Pressure',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'orange',\n      borderColor: 'orange',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'orange',\n      pointBackgroundColor: 'orange',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'orange',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: pressureData\n    },\n    {\n      yAxisID: \"y2\",\n      label: 'Expected Temp',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'green',\n      borderColor: 'green',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'green',\n      pointBackgroundColor: 'green',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'green',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: deltaTemp\n    },\n    {\n      yAxisID: \"y3\",\n      label: 'Expected Pressure',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'red',\n      borderColor: 'red',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'red',\n      pointBackgroundColor: 'red',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'red',\n      pointHoverBorderColor: 'red',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: deltaPressure\n    }\n  \n  ]\n};\n  \n  const options =  {\n     legend: {\n       position: 'bottom',\n        labels: {\n                  fontColor: 'white'\n         }\n              },\n    title: {\n      display: true,\n      text: \"Graph Data for The respective Batch\"\n    },\n    \n    tooltips: {\n      mode: 'label'\n    },\n    interaction: {\n      mode: 'index',\n      intersect: false,\n    },\n    responsive: true,\n    scales: {\n     \n      xAxes: [{\n        display: true,\n        stacked: true,\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 12,\n          fontColor: 'white',\n          fontSize: 10,\n          animation: {\n            duration: delayBetweenPoints,\n            easing: 'linear'\n          }\n        }\n        \n      }],\n       ticks: {\n            major: {\n              fontStyle: 'bold',\n              fontColor: '#FF0000'\n            }\n          },\n      yAxes: [{\n        stacked: true,\n        position: \"left\",\n        id: \"y-axis-0\",\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 12,\n          fontColor: 'white',\n          fontSize: 14\n        },\n      \n         \n      },\n      {\n        stacked: true,\n        display: false,\n        position: \"left\",\n        id: \"y2\",\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 12,\n          fontColor: 'white',\n          fontSize: 14\n        },\n      \n         \n      },\n      {\n        stacked: false,\n        display: false,\n        position: \"right\",\n        id: \"y3\",\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 12,\n          fontColor: 'white',\n          fontSize: 14\n        },\n      \n         \n      },\n      {\n        stacked: false,\n        position: \"right\",\n        id: \"y-axis-1\",\n        fontColor: 'white',\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 12,\n          fontColor: 'white',\n          fontSize: 14\n        },\n        \n        \n      }]\n    } \n  }\n\n\n    return (\n        <Container\n        style={{\n          background: \"black\",\n          color: \"white\",\n         marginBottom: \"20px\"\n        }}\n\n        >\n        <Line  data={dataTwo} options={options}/>\n        {/* <Line  data={dataOne}/> */}\n        {/* <FetchRecipee time={timeData} pressure={pressureData} temp={tempData}/> */}\n        </Container>\n    )\n    \n}\n\nexport default GraphData\n"]},"metadata":{},"sourceType":"module"}