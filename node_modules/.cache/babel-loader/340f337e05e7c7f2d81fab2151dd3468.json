{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DownscopedClient = exports.EXPIRATION_TIME_OFFSET = void 0;\n\nconst authclient_1 = require(\"./authclient\");\n\nconst sts = require(\"./stscredentials\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\n\n\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\n\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/**\n * The requested token exchange subject_token_type: rfc8693#section-2.1\n */\n\nconst STS_SUBJECT_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The STS access token exchange end point. */\n\nconst STS_ACCESS_TOKEN_URL = 'https://sts.googleapis.com/v1beta/token';\n/**\n * Offset to take into account network delays and server clock skews.\n */\n\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n\nclass DownscopedClient extends authclient_1.AuthClient {\n  constructor(client, cab, additionalOptions) {\n    super();\n    this.client = client;\n    this.cab = cab; // Check a number of 1-10 access boundary rules are defined within credential access boundary.\n\n    if (cab.accessBoundary.accessBoundaryRules.length === 0) {\n      throw new Error('At least one access boundary rule needs to be defined.');\n    } else if (cab.accessBoundary.accessBoundaryRules.length > 10) {\n      throw new Error('Access boundary rule exceeds limit, max 10 allowed.');\n    } // Check at least one permission should be defined in each access boundary rule.\n\n\n    for (const rule of cab.accessBoundary.accessBoundaryRules) {\n      if (rule.availablePermissions.length === 0) {\n        throw new Error('At least one permission should be defined in access boundary rules.');\n      }\n    }\n\n    this.stsCredential = new sts.StsCredentials(STS_ACCESS_TOKEN_URL); // Default OAuth scope. This could be overridden via public property.\n\n    this.cachedDownscopedAccessToken = null;\n    this.credentialAccessBoundary = cab;\n    this.authClient = client; // As threshold could be zero,\n    // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n    // zero value.\n\n    if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n      this.eagerRefreshThresholdMillis = exports.EXPIRATION_TIME_OFFSET;\n    } else {\n      this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;\n    }\n\n    this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n  }\n  /**\n   * Provides a mechanism to inject Downscoped access tokens directly.\n   * When the provided credential expires, a new credential, using the\n   * external account options are retrieved.\n   * Notice DownscopedClient is the broker class mainly used for generate\n   * downscoped access tokens, it is unlikely we call this function in real\n   * use case.\n   * We implement to make this a helper function for testing all cases in getAccessToken().\n   * @param credentials The Credentials object to set on the current client.\n   */\n\n\n  setCredentials(credentials) {\n    super.setCredentials(credentials);\n    this.cachedDownscopedAccessToken = credentials;\n  }\n\n  async getAccessToken() {\n    // If the cached access token is unavailable or expired, force refresh.\n    // The Downscoped access token will be returned in GetAccessTokenResponse format.\n    // If cached access token is unavailable or expired, force refresh.\n    if (!this.cachedDownscopedAccessToken || this.isExpired(this.cachedDownscopedAccessToken)) {\n      await this.refreshAccessTokenAsync();\n    } // Return Downscoped access token in GetAccessTokenResponse format.\n\n\n    return {\n      token: this.cachedDownscopedAccessToken.access_token,\n      res: this.cachedDownscopedAccessToken.res\n    };\n  }\n  /**\n   * The main authentication interface. It takes an optional url which when\n   * present is the endpoint> being accessed, and returns a Promise which\n   * resolves with authorization header fields.\n   *\n   * The result has the form:\n   * { Authorization: 'Bearer <access_token_value>' }\n   */\n\n\n  async getRequestHeaders() {\n    throw new Error('Not implemented.');\n  }\n\n  request(opts, callback) {\n    throw new Error('Not implemented.');\n  }\n  /**\n   * Forces token refresh, even if unexpired tokens are currently cached.\n   * GCP access tokens are retrieved from authclient object/source credential.\n   * Thenm GCP access tokens are exchanged for downscoped access tokens via the\n   * token exchange endpoint.\n   * @return A promise that resolves with the fresh downscoped access token.\n   */\n\n\n  async refreshAccessTokenAsync() {\n    // Retrieve GCP access token from source credential.\n    const subjectToken = await (await this.authClient.getAccessToken()).token; // Construct the STS credentials options.\n\n    const stsCredentialsOptions = {\n      grantType: STS_GRANT_TYPE,\n      requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n      subjectToken: subjectToken,\n      subjectTokenType: STS_SUBJECT_TOKEN_TYPE\n    }; // Exchange the source access token for a Downscoped access token.\n\n    const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, this.credentialAccessBoundary); // Save response in cached access token.\n\n    this.cachedDownscopedAccessToken = {\n      access_token: stsResponse.access_token,\n      expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n      res: stsResponse.res\n    }; // Save credentials.\n\n    this.credentials = {};\n    Object.assign(this.credentials, this.cachedDownscopedAccessToken);\n    delete this.credentials.res; // Trigger tokens event to notify external listeners.\n\n    this.emit('tokens', {\n      refresh_token: null,\n      expiry_date: this.cachedDownscopedAccessToken.expiry_date,\n      access_token: this.cachedDownscopedAccessToken.access_token,\n      token_type: 'Bearer',\n      id_token: null\n    }); // Return the cached access token.\n\n    return this.cachedDownscopedAccessToken;\n  }\n  /**\n   * Returns whether the provided credentials are expired or not.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   * @param downscopedAccessToken The credentials to check for expiration.\n   * @return Whether the credentials are expired or not.\n   */\n\n\n  isExpired(downscopedAccessToken) {\n    const now = new Date().getTime();\n    return downscopedAccessToken.expiry_date ? now >= downscopedAccessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n  }\n\n}\n\nexports.DownscopedClient = DownscopedClient;","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/gcs-resumable-upload/node_modules/google-auth-library/build/src/auth/downscopedclient.js"],"names":["Object","defineProperty","exports","value","DownscopedClient","EXPIRATION_TIME_OFFSET","authclient_1","require","sts","STS_GRANT_TYPE","STS_REQUEST_TOKEN_TYPE","STS_SUBJECT_TOKEN_TYPE","STS_ACCESS_TOKEN_URL","AuthClient","constructor","client","cab","additionalOptions","accessBoundary","accessBoundaryRules","length","Error","rule","availablePermissions","stsCredential","StsCredentials","cachedDownscopedAccessToken","credentialAccessBoundary","authClient","eagerRefreshThresholdMillis","forceRefreshOnFailure","setCredentials","credentials","getAccessToken","isExpired","refreshAccessTokenAsync","token","access_token","res","getRequestHeaders","request","opts","callback","subjectToken","stsCredentialsOptions","grantType","requestedTokenType","subjectTokenType","stsResponse","exchangeToken","undefined","expiry_date","Date","getTime","expires_in","assign","emit","refresh_token","token_type","id_token","downscopedAccessToken","now"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DownscopedClient = exports.EXPIRATION_TIME_OFFSET = void 0;\nconst authclient_1 = require(\"./authclient\");\nconst sts = require(\"./stscredentials\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/**\n * The requested token exchange subject_token_type: rfc8693#section-2.1\n */\nconst STS_SUBJECT_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The STS access token exchange end point. */\nconst STS_ACCESS_TOKEN_URL = 'https://sts.googleapis.com/v1beta/token';\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\nclass DownscopedClient extends authclient_1.AuthClient {\n    constructor(client, cab, additionalOptions) {\n        super();\n        this.client = client;\n        this.cab = cab;\n        // Check a number of 1-10 access boundary rules are defined within credential access boundary.\n        if (cab.accessBoundary.accessBoundaryRules.length === 0) {\n            throw new Error('At least one access boundary rule needs to be defined.');\n        }\n        else if (cab.accessBoundary.accessBoundaryRules.length > 10) {\n            throw new Error('Access boundary rule exceeds limit, max 10 allowed.');\n        }\n        // Check at least one permission should be defined in each access boundary rule.\n        for (const rule of cab.accessBoundary.accessBoundaryRules) {\n            if (rule.availablePermissions.length === 0) {\n                throw new Error('At least one permission should be defined in access boundary rules.');\n            }\n        }\n        this.stsCredential = new sts.StsCredentials(STS_ACCESS_TOKEN_URL);\n        // Default OAuth scope. This could be overridden via public property.\n        this.cachedDownscopedAccessToken = null;\n        this.credentialAccessBoundary = cab;\n        this.authClient = client;\n        // As threshold could be zero,\n        // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n        // zero value.\n        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n            this.eagerRefreshThresholdMillis = exports.EXPIRATION_TIME_OFFSET;\n        }\n        else {\n            this.eagerRefreshThresholdMillis = additionalOptions\n                .eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n    }\n    /**\n     * Provides a mechanism to inject Downscoped access tokens directly.\n     * When the provided credential expires, a new credential, using the\n     * external account options are retrieved.\n     * Notice DownscopedClient is the broker class mainly used for generate\n     * downscoped access tokens, it is unlikely we call this function in real\n     * use case.\n     * We implement to make this a helper function for testing all cases in getAccessToken().\n     * @param credentials The Credentials object to set on the current client.\n     */\n    setCredentials(credentials) {\n        super.setCredentials(credentials);\n        this.cachedDownscopedAccessToken = credentials;\n    }\n    async getAccessToken() {\n        // If the cached access token is unavailable or expired, force refresh.\n        // The Downscoped access token will be returned in GetAccessTokenResponse format.\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedDownscopedAccessToken ||\n            this.isExpired(this.cachedDownscopedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return Downscoped access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedDownscopedAccessToken.access_token,\n            res: this.cachedDownscopedAccessToken.res,\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint> being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */\n    async getRequestHeaders() {\n        throw new Error('Not implemented.');\n    }\n    request(opts, callback) {\n        throw new Error('Not implemented.');\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * GCP access tokens are retrieved from authclient object/source credential.\n     * Thenm GCP access tokens are exchanged for downscoped access tokens via the\n     * token exchange endpoint.\n     * @return A promise that resolves with the fresh downscoped access token.\n     */\n    async refreshAccessTokenAsync() {\n        // Retrieve GCP access token from source credential.\n        const subjectToken = await (await this.authClient.getAccessToken()).token;\n        // Construct the STS credentials options.\n        const stsCredentialsOptions = {\n            grantType: STS_GRANT_TYPE,\n            requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n            subjectToken: subjectToken,\n            subjectTokenType: STS_SUBJECT_TOKEN_TYPE,\n        };\n        // Exchange the source access token for a Downscoped access token.\n        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, this.credentialAccessBoundary);\n        // Save response in cached access token.\n        this.cachedDownscopedAccessToken = {\n            access_token: stsResponse.access_token,\n            expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n            res: stsResponse.res,\n        };\n        // Save credentials.\n        this.credentials = {};\n        Object.assign(this.credentials, this.cachedDownscopedAccessToken);\n        delete this.credentials.res;\n        // Trigger tokens event to notify external listeners.\n        this.emit('tokens', {\n            refresh_token: null,\n            expiry_date: this.cachedDownscopedAccessToken.expiry_date,\n            access_token: this.cachedDownscopedAccessToken.access_token,\n            token_type: 'Bearer',\n            id_token: null,\n        });\n        // Return the cached access token.\n        return this.cachedDownscopedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param downscopedAccessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(downscopedAccessToken) {\n        const now = new Date().getTime();\n        return downscopedAccessToken.expiry_date\n            ? now >=\n                downscopedAccessToken.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.DownscopedClient = DownscopedClient;\n//# sourceMappingURL=downscopedclient.js.map"]},"metadata":{},"sourceType":"script"}