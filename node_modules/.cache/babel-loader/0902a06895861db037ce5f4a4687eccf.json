{"ast":null,"code":"var _require = require('crypto'),\n    signOneShot = _require.sign,\n    verifyOneShot = _require.verify;\n\nvar _require2 = require('../help/consts'),\n    KEYOBJECT = _require2.KEYOBJECT;\n\nvar _require3 = require('../help/runtime_support'),\n    edDSASupported = _require3.edDSASupported;\n\nvar sign = function sign(_ref, payload) {\n  var keyObject = _ref[KEYOBJECT];\n\n  if (typeof payload === 'string') {\n    payload = Buffer.from(payload);\n  }\n\n  return signOneShot(undefined, payload, keyObject);\n};\n\nvar verify = function verify(_ref2, payload, signature) {\n  var keyObject = _ref2[KEYOBJECT];\n  return verifyOneShot(undefined, payload, keyObject, signature);\n};\n\nmodule.exports = function (JWA, JWK) {\n  if (edDSASupported) {\n    JWA.sign.set('EdDSA', sign);\n    JWA.verify.set('EdDSA', verify);\n\n    JWK.OKP.sign.EdDSA = function (key) {\n      return key.private && JWK.OKP.verify.EdDSA(key);\n    };\n\n    JWK.OKP.verify.EdDSA = function (key) {\n      return (key.use === 'sig' || key.use === undefined) && key.keyObject.asymmetricKeyType.startsWith('ed');\n    };\n  }\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/jwa/eddsa.js"],"names":["require","signOneShot","sign","verifyOneShot","verify","KEYOBJECT","edDSASupported","payload","keyObject","Buffer","from","undefined","signature","module","exports","JWA","JWK","set","OKP","EdDSA","key","private","use","asymmetricKeyType","startsWith"],"mappings":"eAAqDA,OAAO,CAAC,QAAD,C;IAA9CC,W,YAANC,I;IAA2BC,a,YAARC,M;;gBAELJ,OAAO,CAAC,gBAAD,C;IAArBK,S,aAAAA,S;;gBACmBL,OAAO,CAAC,yBAAD,C;IAA1BM,c,aAAAA,c;;AAER,IAAMJ,IAAI,GAAG,SAAPA,IAAO,OAA6BK,OAA7B,EAAyC;AAAA,MAAzBC,SAAyB,QAArCH,SAAqC;;AACpD,MAAI,OAAOE,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,IAAAA,OAAO,GAAGE,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAAV;AACD;;AACD,SAAON,WAAW,CAACU,SAAD,EAAYJ,OAAZ,EAAqBC,SAArB,CAAlB;AACD,CALD;;AAOA,IAAMJ,MAAM,GAAG,SAATA,MAAS,QAA6BG,OAA7B,EAAsCK,SAAtC,EAAoD;AAAA,MAApCJ,SAAoC,SAAhDH,SAAgD;AACjE,SAAOF,aAAa,CAACQ,SAAD,EAAYJ,OAAZ,EAAqBC,SAArB,EAAgCI,SAAhC,CAApB;AACD,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B,MAAIV,cAAJ,EAAoB;AAClBS,IAAAA,GAAG,CAACb,IAAJ,CAASe,GAAT,CAAa,OAAb,EAAsBf,IAAtB;AACAa,IAAAA,GAAG,CAACX,MAAJ,CAAWa,GAAX,CAAe,OAAf,EAAwBb,MAAxB;;AACAY,IAAAA,GAAG,CAACE,GAAJ,CAAQhB,IAAR,CAAaiB,KAAb,GAAqB,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,OAAJ,IAAeL,GAAG,CAACE,GAAJ,CAAQd,MAAR,CAAee,KAAf,CAAqBC,GAArB,CAAnB;AAAA,KAAxB;;AACAJ,IAAAA,GAAG,CAACE,GAAJ,CAAQd,MAAR,CAAee,KAAf,GAAuB,UAAAC,GAAG;AAAA,aAAI,CAACA,GAAG,CAACE,GAAJ,KAAY,KAAZ,IAAqBF,GAAG,CAACE,GAAJ,KAAYX,SAAlC,KAAgDS,GAAG,CAACZ,SAAJ,CAAce,iBAAd,CAAgCC,UAAhC,CAA2C,IAA3C,CAApD;AAAA,KAA1B;AACD;AACF,CAPD","sourcesContent":["const { sign: signOneShot, verify: verifyOneShot } = require('crypto')\n\nconst { KEYOBJECT } = require('../help/consts')\nconst { edDSASupported } = require('../help/runtime_support')\n\nconst sign = ({ [KEYOBJECT]: keyObject }, payload) => {\n  if (typeof payload === 'string') {\n    payload = Buffer.from(payload)\n  }\n  return signOneShot(undefined, payload, keyObject)\n}\n\nconst verify = ({ [KEYOBJECT]: keyObject }, payload, signature) => {\n  return verifyOneShot(undefined, payload, keyObject, signature)\n}\n\nmodule.exports = (JWA, JWK) => {\n  if (edDSASupported) {\n    JWA.sign.set('EdDSA', sign)\n    JWA.verify.set('EdDSA', verify)\n    JWK.OKP.sign.EdDSA = key => key.private && JWK.OKP.verify.EdDSA(key)\n    JWK.OKP.verify.EdDSA = key => (key.use === 'sig' || key.use === undefined) && key.keyObject.asymmetricKeyType.startsWith('ed')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}