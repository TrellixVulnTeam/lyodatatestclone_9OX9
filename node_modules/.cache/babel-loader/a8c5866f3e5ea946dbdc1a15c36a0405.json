{"ast":null,"code":"var _objectSpread = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _require = require('crypto'),\n    randomBytes = _require.randomBytes;\n\nvar base64url = require('./base64url');\n\nvar errors = require('../errors');\n\nvar ZERO = BigInt(0);\nvar ONE = BigInt(1);\nvar TWO = BigInt(2);\n\nvar toJWKParameter = function toJWKParameter(n) {\n  var hex = n.toString(16);\n  return base64url.encodeBuffer(Buffer.from(hex.length % 2 ? \"0\".concat(hex) : hex, 'hex'));\n};\n\nvar fromBuffer = function fromBuffer(buf) {\n  return BigInt(\"0x\".concat(buf.toString('hex')));\n};\n\nvar bitLength = function bitLength(n) {\n  return n.toString(2).length;\n};\n\nvar eGcdX = function eGcdX(a, b) {\n  var x = ZERO;\n  var y = ONE;\n  var u = ONE;\n  var v = ZERO;\n\n  while (a !== ZERO) {\n    var q = b / a;\n    var r = b % a;\n    var m = x - u * q;\n    var n = y - v * q;\n    b = a;\n    a = r;\n    x = u;\n    y = v;\n    u = m;\n    v = n;\n  }\n\n  return x;\n};\n\nvar gcd = function gcd(a, b) {\n  var shift = ZERO;\n\n  while (!((a | b) & ONE)) {\n    a >>= ONE;\n    b >>= ONE;\n    shift++;\n  }\n\n  while (!(a & ONE)) {\n    a >>= ONE;\n  }\n\n  do {\n    while (!(b & ONE)) {\n      b >>= ONE;\n    }\n\n    if (a > b) {\n      var x = a;\n      a = b;\n      b = x;\n    }\n\n    b -= a;\n  } while (b);\n\n  return a << shift;\n};\n\nvar modPow = function modPow(a, b, n) {\n  a = toZn(a, n);\n  var result = ONE;\n  var x = a;\n\n  while (b > 0) {\n    var leastSignificantBit = b % TWO;\n    b = b / TWO;\n\n    if (leastSignificantBit === ONE) {\n      result = result * x;\n      result = result % n;\n    }\n\n    x = x * x;\n    x = x % n;\n  }\n\n  return result;\n};\n\nvar randBetween = function randBetween(min, max) {\n  var interval = max - min;\n  var bitLen = bitLength(interval);\n  var rnd;\n\n  do {\n    rnd = fromBuffer(randBits(bitLen));\n  } while (rnd > interval);\n\n  return rnd + min;\n};\n\nvar randBits = function randBits(bitLength) {\n  var byteLength = Math.ceil(bitLength / 8);\n  var rndBytes = randomBytes(byteLength); // Fill with 0's the extra bits\n\n  rndBytes[0] = rndBytes[0] & Math.pow(2, bitLength % 8) - 1;\n  return rndBytes;\n};\n\nvar toZn = function toZn(a, n) {\n  a = a % n;\n  return a < 0 ? a + n : a;\n};\n\nvar odd = function odd(n) {\n  var r = n;\n\n  while (r % TWO === ZERO) {\n    r = r / TWO;\n  }\n\n  return r;\n}; // not sold on these values\n\n\nvar maxCountWhileNoY = 30;\nvar maxCountWhileInot0 = 22;\n\nvar getPrimeFactors = function getPrimeFactors(e, d, n) {\n  var r = odd(e * d - ONE);\n  var countWhileNoY = 0;\n  var y;\n\n  do {\n    countWhileNoY++;\n\n    if (countWhileNoY === maxCountWhileNoY) {\n      throw new errors.JWKImportFailed('failed to calculate missing primes');\n    }\n\n    var countWhileInot0 = 0;\n    var i = modPow(randBetween(TWO, n), r, n);\n    var o = ZERO;\n\n    while (i !== ONE) {\n      countWhileInot0++;\n\n      if (countWhileInot0 === maxCountWhileInot0) {\n        throw new errors.JWKImportFailed('failed to calculate missing primes');\n      }\n\n      o = i;\n      i = i * i % n;\n    }\n\n    if (o !== n - ONE) {\n      y = o;\n    }\n  } while (!y);\n\n  var p = gcd(y - ONE, n);\n  var q = n / p;\n  return p > q ? {\n    p: p,\n    q: q\n  } : {\n    p: q,\n    q: p\n  };\n};\n\nmodule.exports = function (jwk) {\n  var e = fromBuffer(base64url.decodeToBuffer(jwk.e));\n  var d = fromBuffer(base64url.decodeToBuffer(jwk.d));\n  var n = fromBuffer(base64url.decodeToBuffer(jwk.n));\n\n  if (d >= n) {\n    throw new errors.JWKInvalid('invalid RSA private exponent');\n  }\n\n  var _getPrimeFactors = getPrimeFactors(e, d, n),\n      p = _getPrimeFactors.p,\n      q = _getPrimeFactors.q;\n\n  var dp = d % (p - ONE);\n  var dq = d % (q - ONE);\n  var qi = toZn(eGcdX(toZn(q, p), p), p);\n  return _objectSpread(_objectSpread({}, jwk), {}, {\n    p: toJWKParameter(p),\n    q: toJWKParameter(q),\n    dp: toJWKParameter(dp),\n    dq: toJWKParameter(dq),\n    qi: toJWKParameter(qi)\n  });\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/help/rsa_primes.js"],"names":["require","randomBytes","base64url","errors","ZERO","BigInt","ONE","TWO","toJWKParameter","n","hex","toString","encodeBuffer","Buffer","from","length","fromBuffer","buf","bitLength","eGcdX","a","b","x","y","u","v","q","r","m","gcd","shift","modPow","toZn","result","leastSignificantBit","randBetween","min","max","interval","bitLen","rnd","randBits","byteLength","Math","ceil","rndBytes","odd","maxCountWhileNoY","maxCountWhileInot0","getPrimeFactors","e","d","countWhileNoY","JWKImportFailed","countWhileInot0","i","o","p","module","exports","jwk","decodeToBuffer","JWKInvalid","dp","dq","qi"],"mappings":"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","sourcesContent":["const { randomBytes } = require('crypto')\n\nconst base64url = require('./base64url')\nconst errors = require('../errors')\n\nconst ZERO = BigInt(0)\nconst ONE = BigInt(1)\nconst TWO = BigInt(2)\n\nconst toJWKParameter = (n) => {\n  const hex = n.toString(16)\n  return base64url.encodeBuffer(Buffer.from(hex.length % 2 ? `0${hex}` : hex, 'hex'))\n}\nconst fromBuffer = buf => BigInt(`0x${buf.toString('hex')}`)\nconst bitLength = n => n.toString(2).length\n\nconst eGcdX = (a, b) => {\n  let x = ZERO\n  let y = ONE\n  let u = ONE\n  let v = ZERO\n\n  while (a !== ZERO) {\n    const q = b / a\n    const r = b % a\n    const m = x - (u * q)\n    const n = y - (v * q)\n    b = a\n    a = r\n    x = u\n    y = v\n    u = m\n    v = n\n  }\n  return x\n}\n\nconst gcd = (a, b) => {\n  let shift = ZERO\n  while (!((a | b) & ONE)) {\n    a >>= ONE\n    b >>= ONE\n    shift++\n  }\n  while (!(a & ONE)) {\n    a >>= ONE\n  }\n  do {\n    while (!(b & ONE)) {\n      b >>= ONE\n    }\n    if (a > b) {\n      const x = a\n      a = b\n      b = x\n    }\n    b -= a\n  } while (b)\n\n  return a << shift\n}\n\nconst modPow = (a, b, n) => {\n  a = toZn(a, n)\n  let result = ONE\n  let x = a\n  while (b > 0) {\n    const leastSignificantBit = b % TWO\n    b = b / TWO\n    if (leastSignificantBit === ONE) {\n      result = result * x\n      result = result % n\n    }\n    x = x * x\n    x = x % n\n  }\n  return result\n}\n\nconst randBetween = (min, max) => {\n  const interval = max - min\n  const bitLen = bitLength(interval)\n  let rnd\n  do {\n    rnd = fromBuffer(randBits(bitLen))\n  } while (rnd > interval)\n  return rnd + min\n}\n\nconst randBits = (bitLength) => {\n  const byteLength = Math.ceil(bitLength / 8)\n  const rndBytes = randomBytes(byteLength)\n  // Fill with 0's the extra bits\n  rndBytes[0] = rndBytes[0] & (2 ** (bitLength % 8) - 1)\n  return rndBytes\n}\n\nconst toZn = (a, n) => {\n  a = a % n\n  return (a < 0) ? a + n : a\n}\n\nconst odd = (n) => {\n  let r = n\n  while (r % TWO === ZERO) {\n    r = r / TWO\n  }\n  return r\n}\n\n// not sold on these values\nconst maxCountWhileNoY = 30\nconst maxCountWhileInot0 = 22\n\nconst getPrimeFactors = (e, d, n) => {\n  const r = odd(e * d - ONE)\n\n  let countWhileNoY = 0\n  let y\n  do {\n    countWhileNoY++\n    if (countWhileNoY === maxCountWhileNoY) {\n      throw new errors.JWKImportFailed('failed to calculate missing primes')\n    }\n\n    let countWhileInot0 = 0\n    let i = modPow(randBetween(TWO, n), r, n)\n    let o = ZERO\n    while (i !== ONE) {\n      countWhileInot0++\n      if (countWhileInot0 === maxCountWhileInot0) {\n        throw new errors.JWKImportFailed('failed to calculate missing primes')\n      }\n      o = i\n      i = (i * i) % n\n    }\n    if (o !== (n - ONE)) {\n      y = o\n    }\n  } while (!y)\n\n  const p = gcd(y - ONE, n)\n  const q = n / p\n\n  return p > q ? { p, q } : { p: q, q: p }\n}\n\nmodule.exports = (jwk) => {\n  const e = fromBuffer(base64url.decodeToBuffer(jwk.e))\n  const d = fromBuffer(base64url.decodeToBuffer(jwk.d))\n  const n = fromBuffer(base64url.decodeToBuffer(jwk.n))\n\n  if (d >= n) {\n    throw new errors.JWKInvalid('invalid RSA private exponent')\n  }\n\n  const { p, q } = getPrimeFactors(e, d, n)\n  const dp = d % (p - ONE)\n  const dq = d % (q - ONE)\n  const qi = toZn(eGcdX(toZn(q, p), p), p)\n\n  return {\n    ...jwk,\n    p: toJWKParameter(p),\n    q: toJWKParameter(q),\n    dp: toJWKParameter(dp),\n    dq: toJWKParameter(dq),\n    qi: toJWKParameter(qi)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}