{"ast":null,"code":"var _objectSpread = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar urlUtil = require('url');\n\nmodule.exports.default = function (options) {\n  if (options.fetcher) {\n    return options.fetcher(options.uri);\n  }\n\n  return new Promise(function (resolve, reject) {\n    var _urlUtil$parse = urlUtil.parse(options.uri),\n        hostname = _urlUtil$parse.hostname,\n        path = _urlUtil$parse.path,\n        port = _urlUtil$parse.port,\n        protocol = _urlUtil$parse.protocol;\n\n    var requestOptions = _objectSpread(_objectSpread(_objectSpread({\n      hostname: hostname,\n      path: path,\n      port: port,\n      method: 'GET'\n    }, options.headers && {\n      headers: _objectSpread({}, options.headers)\n    }), options.timeout && {\n      timeout: options.timeout\n    }), options.agent && {\n      agent: options.agent\n    });\n\n    var httpRequestLib = protocol === 'https:' ? https : http;\n    httpRequestLib.request(requestOptions, function (res) {\n      var rawData = '';\n      res.setEncoding('utf8');\n      res.on('data', function (chunk) {\n        rawData += chunk;\n      });\n      res.on('end', function () {\n        if (res.statusCode < 200 || res.statusCode >= 300) {\n          var errorMsg = res.body && (res.body.message || res.body) || res.statusMessage || \"Http Error \".concat(res.statusCode);\n          reject({\n            errorMsg: errorMsg\n          });\n        } else {\n          try {\n            resolve(rawData && JSON.parse(rawData));\n          } catch (error) {\n            reject(error);\n          }\n        }\n      });\n    }).on('error', function (e) {\n      return reject(e);\n    }).end();\n  });\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jwks-rsa/src/wrappers/request.js"],"names":["http","require","https","urlUtil","module","exports","default","options","fetcher","uri","Promise","resolve","reject","parse","hostname","path","port","protocol","requestOptions","method","headers","timeout","agent","httpRequestLib","request","res","rawData","setEncoding","on","chunk","statusCode","errorMsg","body","message","statusMessage","JSON","error","e","end"],"mappings":";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,KAAD,CAAvB;;AAEAG,MAAM,CAACC,OAAP,CAAeC,OAAf,GAA0B,UAACC,OAAD,EAAa;AACrC,MAAIA,OAAO,CAACC,OAAZ,EAAqB;AACnB,WAAOD,OAAO,CAACC,OAAR,CAAgBD,OAAO,CAACE,GAAxB,CAAP;AACD;;AAED,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,yBAMlCT,OAAO,CAACU,KAAR,CAAcN,OAAO,CAACE,GAAtB,CANkC;AAAA,QAEpCK,QAFoC,kBAEpCA,QAFoC;AAAA,QAGpCC,IAHoC,kBAGpCA,IAHoC;AAAA,QAIpCC,IAJoC,kBAIpCA,IAJoC;AAAA,QAKpCC,QALoC,kBAKpCA,QALoC;;AAQtC,QAAMC,cAAc;AAClBJ,MAAAA,QAAQ,EAARA,QADkB;AAElBC,MAAAA,IAAI,EAAJA,IAFkB;AAGlBC,MAAAA,IAAI,EAAJA,IAHkB;AAIlBG,MAAAA,MAAM,EAAE;AAJU,OAKdZ,OAAO,CAACa,OAAR,IAAmB;AAAEA,MAAAA,OAAO,oBAAOb,OAAO,CAACa,OAAf;AAAT,KALL,GAMdb,OAAO,CAACc,OAAR,IAAmB;AAAEA,MAAAA,OAAO,EAAEd,OAAO,CAACc;AAAnB,KANL,GAOdd,OAAO,CAACe,KAAR,IAAiB;AAAEA,MAAAA,KAAK,EAAEf,OAAO,CAACe;AAAjB,KAPH,CAApB;;AAUA,QAAMC,cAAc,GAAGN,QAAQ,KAAK,QAAb,GAAwBf,KAAxB,GAAgCF,IAAvD;AACAuB,IAAAA,cAAc,CAACC,OAAf,CAAuBN,cAAvB,EAAuC,UAACO,GAAD,EAAS;AAC9C,UAAIC,OAAO,GAAG,EAAd;AACAD,MAAAA,GAAG,CAACE,WAAJ,CAAgB,MAAhB;AACAF,MAAAA,GAAG,CAACG,EAAJ,CAAO,MAAP,EAAe,UAACC,KAAD,EAAW;AAAEH,QAAAA,OAAO,IAAIG,KAAX;AAAmB,OAA/C;AACAJ,MAAAA,GAAG,CAACG,EAAJ,CAAO,KAAP,EAAc,YAAM;AAClB,YAAIH,GAAG,CAACK,UAAJ,GAAiB,GAAjB,IAAwBL,GAAG,CAACK,UAAJ,IAAkB,GAA9C,EAAmD;AACjD,cAAMC,QAAQ,GAAGN,GAAG,CAACO,IAAJ,KAAaP,GAAG,CAACO,IAAJ,CAASC,OAAT,IAAoBR,GAAG,CAACO,IAArC,KAA8CP,GAAG,CAACS,aAAlD,yBAAiFT,GAAG,CAACK,UAArF,CAAjB;AACAlB,UAAAA,MAAM,CAAC;AAAEmB,YAAAA,QAAQ,EAARA;AAAF,WAAD,CAAN;AACD,SAHD,MAGO;AACL,cAAI;AACFpB,YAAAA,OAAO,CAACe,OAAO,IAAIS,IAAI,CAACtB,KAAL,CAAWa,OAAX,CAAZ,CAAP;AACD,WAFD,CAEE,OAAOU,KAAP,EAAc;AACdxB,YAAAA,MAAM,CAACwB,KAAD,CAAN;AACD;AACF;AACF,OAXD;AAYD,KAhBD,EAiBGR,EAjBH,CAiBM,OAjBN,EAiBe,UAACS,CAAD;AAAA,aAAOzB,MAAM,CAACyB,CAAD,CAAb;AAAA,KAjBf,EAkBGC,GAlBH;AAmBD,GAtCM,CAAP;AAuCD,CA5CD","sourcesContent":["const http = require('http');\nconst https = require('https');\nconst urlUtil = require('url');\n\nmodule.exports.default =  (options) => {\n  if (options.fetcher) {\n    return options.fetcher(options.uri);\n  }\n\n  return new Promise((resolve, reject) => {\n    const {\n      hostname,\n      path,\n      port,\n      protocol\n    } = urlUtil.parse(options.uri);\n\n    const requestOptions = {\n      hostname,\n      path,\n      port,\n      method: 'GET',\n      ...(options.headers && { headers: { ...options.headers } }),\n      ...(options.timeout && { timeout: options.timeout }),\n      ...(options.agent && { agent: options.agent })\n    };\n\n    const httpRequestLib = protocol === 'https:' ? https : http;\n    httpRequestLib.request(requestOptions, (res) => {\n      let rawData = '';\n      res.setEncoding('utf8');\n      res.on('data', (chunk) => { rawData += chunk; });\n      res.on('end', () => {\n        if (res.statusCode < 200 || res.statusCode >= 300) {\n          const errorMsg = res.body && (res.body.message || res.body) || res.statusMessage || `Http Error ${res.statusCode}`;\n          reject({ errorMsg });\n        } else {\n          try {\n            resolve(rawData && JSON.parse(rawData));\n          } catch (error) {\n            reject(error);\n          }\n        }\n      });\n    })\n      .on('error', (e) => reject(e))\n      .end();\n  });\n};\n"]},"metadata":{},"sourceType":"script"}