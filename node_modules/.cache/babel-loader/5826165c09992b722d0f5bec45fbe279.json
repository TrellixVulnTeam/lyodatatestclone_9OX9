{"ast":null,"code":"var _require = require('crypto'),\n    signOneShot = _require.sign,\n    verifyOneShot = _require.verify,\n    createSign = _require.createSign,\n    createVerify = _require.createVerify,\n    getCurves = _require.getCurves;\n\nvar _require2 = require('../help/ecdsa_signatures'),\n    derToJose = _require2.derToJose,\n    joseToDer = _require2.joseToDer;\n\nvar _require3 = require('../help/consts'),\n    KEYOBJECT = _require3.KEYOBJECT;\n\nvar resolveNodeAlg = require('../help/node_alg');\n\nvar _require4 = require('../help/key_object'),\n    asInput = _require4.asInput;\n\nvar _require5 = require('../help/runtime_support'),\n    dsaEncodingSupported = _require5.dsaEncodingSupported;\n\nvar sign, verify;\n\nif (dsaEncodingSupported) {\n  sign = function sign(jwaAlg, nodeAlg, _ref, payload) {\n    var keyObject = _ref[KEYOBJECT];\n\n    if (typeof payload === 'string') {\n      payload = Buffer.from(payload);\n    }\n\n    return signOneShot(nodeAlg, payload, {\n      key: asInput(keyObject, false),\n      dsaEncoding: 'ieee-p1363'\n    });\n  };\n\n  verify = function verify(jwaAlg, nodeAlg, _ref2, payload, signature) {\n    var keyObject = _ref2[KEYOBJECT];\n\n    try {\n      return verifyOneShot(nodeAlg, payload, {\n        key: asInput(keyObject, true),\n        dsaEncoding: 'ieee-p1363'\n      }, signature);\n    } catch (err) {\n      return false;\n    }\n  };\n} else {\n  sign = function sign(jwaAlg, nodeAlg, _ref3, payload) {\n    var keyObject = _ref3[KEYOBJECT];\n    return derToJose(createSign(nodeAlg).update(payload).sign(asInput(keyObject, false)), jwaAlg);\n  };\n\n  verify = function verify(jwaAlg, nodeAlg, _ref4, payload, signature) {\n    var keyObject = _ref4[KEYOBJECT];\n\n    try {\n      return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), joseToDer(signature, jwaAlg));\n    } catch (err) {\n      return false;\n    }\n  };\n}\n\nvar crvToAlg = function crvToAlg(crv) {\n  switch (crv) {\n    case 'P-256':\n      return 'ES256';\n\n    case 'secp256k1':\n      return 'ES256K';\n\n    case 'P-384':\n      return 'ES384';\n\n    case 'P-521':\n      return 'ES512';\n  }\n};\n\nmodule.exports = function (JWA, JWK) {\n  var algs = [];\n\n  if (getCurves().includes('prime256v1')) {\n    algs.push('ES256');\n  }\n\n  if (getCurves().includes('secp256k1')) {\n    algs.push('ES256K');\n  }\n\n  if (getCurves().includes('secp384r1')) {\n    algs.push('ES384');\n  }\n\n  if (getCurves().includes('secp521r1')) {\n    algs.push('ES512');\n  }\n\n  algs.forEach(function (jwaAlg) {\n    var nodeAlg = resolveNodeAlg(jwaAlg);\n    JWA.sign.set(jwaAlg, sign.bind(undefined, jwaAlg, nodeAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, jwaAlg, nodeAlg));\n\n    JWK.EC.sign[jwaAlg] = function (key) {\n      return key.private && JWK.EC.verify[jwaAlg](key);\n    };\n\n    JWK.EC.verify[jwaAlg] = function (key) {\n      return (key.use === 'sig' || key.use === undefined) && crvToAlg(key.crv) === jwaAlg;\n    };\n  });\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/jwa/ecdsa.js"],"names":["require","signOneShot","sign","verifyOneShot","verify","createSign","createVerify","getCurves","derToJose","joseToDer","KEYOBJECT","resolveNodeAlg","asInput","dsaEncodingSupported","jwaAlg","nodeAlg","payload","keyObject","Buffer","from","key","dsaEncoding","signature","err","update","crvToAlg","crv","module","exports","JWA","JWK","algs","includes","push","forEach","set","bind","undefined","EC","private","use"],"mappings":"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","sourcesContent":["const { sign: signOneShot, verify: verifyOneShot, createSign, createVerify, getCurves } = require('crypto')\n\nconst { derToJose, joseToDer } = require('../help/ecdsa_signatures')\nconst { KEYOBJECT } = require('../help/consts')\nconst resolveNodeAlg = require('../help/node_alg')\nconst { asInput } = require('../help/key_object')\nconst { dsaEncodingSupported } = require('../help/runtime_support')\n\nlet sign, verify\n\nif (dsaEncodingSupported) {\n  sign = (jwaAlg, nodeAlg, { [KEYOBJECT]: keyObject }, payload) => {\n    if (typeof payload === 'string') {\n      payload = Buffer.from(payload)\n    }\n    return signOneShot(nodeAlg, payload, { key: asInput(keyObject, false), dsaEncoding: 'ieee-p1363' })\n  }\n  verify = (jwaAlg, nodeAlg, { [KEYOBJECT]: keyObject }, payload, signature) => {\n    try {\n      return verifyOneShot(nodeAlg, payload, { key: asInput(keyObject, true), dsaEncoding: 'ieee-p1363' }, signature)\n    } catch (err) {\n      return false\n    }\n  }\n} else {\n  sign = (jwaAlg, nodeAlg, { [KEYOBJECT]: keyObject }, payload) => {\n    return derToJose(createSign(nodeAlg).update(payload).sign(asInput(keyObject, false)), jwaAlg)\n  }\n  verify = (jwaAlg, nodeAlg, { [KEYOBJECT]: keyObject }, payload, signature) => {\n    try {\n      return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), joseToDer(signature, jwaAlg))\n    } catch (err) {\n      return false\n    }\n  }\n}\n\nconst crvToAlg = (crv) => {\n  switch (crv) {\n    case 'P-256':\n      return 'ES256'\n    case 'secp256k1':\n      return 'ES256K'\n    case 'P-384':\n      return 'ES384'\n    case 'P-521':\n      return 'ES512'\n  }\n}\n\nmodule.exports = (JWA, JWK) => {\n  const algs = []\n\n  if (getCurves().includes('prime256v1')) {\n    algs.push('ES256')\n  }\n\n  if (getCurves().includes('secp256k1')) {\n    algs.push('ES256K')\n  }\n\n  if (getCurves().includes('secp384r1')) {\n    algs.push('ES384')\n  }\n\n  if (getCurves().includes('secp521r1')) {\n    algs.push('ES512')\n  }\n\n  algs.forEach((jwaAlg) => {\n    const nodeAlg = resolveNodeAlg(jwaAlg)\n    JWA.sign.set(jwaAlg, sign.bind(undefined, jwaAlg, nodeAlg))\n    JWA.verify.set(jwaAlg, verify.bind(undefined, jwaAlg, nodeAlg))\n    JWK.EC.sign[jwaAlg] = key => key.private && JWK.EC.verify[jwaAlg](key)\n    JWK.EC.verify[jwaAlg] = key => (key.use === 'sig' || key.use === undefined) && crvToAlg(key.crv) === jwaAlg\n  })\n}\n"]},"metadata":{},"sourceType":"script"}