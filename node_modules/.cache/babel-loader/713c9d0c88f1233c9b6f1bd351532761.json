{"ast":null,"code":"var _require = require('../../help/runtime_support'),\n    improvedDH = _require.improvedDH;\n\nvar _require2 = require('../../registry'),\n    KEYLENGTHS = _require2.KEYLENGTHS;\n\nvar _require3 = require('../../jwk/generate'),\n    generateSync = _require3.generateSync;\n\nvar derive = require('./derive');\n\nvar wrapKey = function wrapKey(key, payload, _ref) {\n  var enc = _ref.enc;\n  var epk = generateSync(key.kty, key.crv);\n  var derivedKey = derive(enc, KEYLENGTHS.get(enc), epk, key);\n  return {\n    wrapped: derivedKey,\n    header: {\n      epk: {\n        kty: key.kty,\n        crv: key.crv,\n        x: epk.x,\n        y: epk.y\n      }\n    }\n  };\n};\n\nvar unwrapKey = function unwrapKey(key, payload, header) {\n  var enc = header.enc,\n      epk = header.epk;\n  return derive(enc, KEYLENGTHS.get(enc), key, epk, header);\n};\n\nmodule.exports = function (JWA, JWK) {\n  JWA.keyManagementEncrypt.set('ECDH-ES', wrapKey);\n  JWA.keyManagementDecrypt.set('ECDH-ES', unwrapKey);\n\n  JWK.EC.deriveKey['ECDH-ES'] = function (key) {\n    return (key.use === 'enc' || key.use === undefined) && key.crv !== 'secp256k1';\n  };\n\n  if (improvedDH) {\n    JWK.OKP.deriveKey['ECDH-ES'] = function (key) {\n      return (key.use === 'enc' || key.use === undefined) && key.keyObject.asymmetricKeyType.startsWith('x');\n    };\n  }\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/jwa/ecdh/dir.js"],"names":["require","improvedDH","KEYLENGTHS","generateSync","derive","wrapKey","key","payload","enc","epk","kty","crv","derivedKey","get","wrapped","header","x","y","unwrapKey","module","exports","JWA","JWK","keyManagementEncrypt","set","keyManagementDecrypt","EC","deriveKey","use","undefined","OKP","keyObject","asymmetricKeyType","startsWith"],"mappings":"eAAuBA,OAAO,CAAC,4BAAD,C;IAAtBC,U,YAAAA,U;;gBACeD,OAAO,CAAC,gBAAD,C;IAAtBE,U,aAAAA,U;;gBACiBF,OAAO,CAAC,oBAAD,C;IAAxBG,Y,aAAAA,Y;;AAER,IAAMC,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAMC,OAAN,QAA2B;AAAA,MAAVC,GAAU,QAAVA,GAAU;AACzC,MAAMC,GAAG,GAAGN,YAAY,CAACG,GAAG,CAACI,GAAL,EAAUJ,GAAG,CAACK,GAAd,CAAxB;AAEA,MAAMC,UAAU,GAAGR,MAAM,CAACI,GAAD,EAAMN,UAAU,CAACW,GAAX,CAAeL,GAAf,CAAN,EAA2BC,GAA3B,EAAgCH,GAAhC,CAAzB;AAEA,SAAO;AACLQ,IAAAA,OAAO,EAAEF,UADJ;AAELG,IAAAA,MAAM,EAAE;AAAEN,MAAAA,GAAG,EAAE;AAAEC,QAAAA,GAAG,EAAEJ,GAAG,CAACI,GAAX;AAAgBC,QAAAA,GAAG,EAAEL,GAAG,CAACK,GAAzB;AAA8BK,QAAAA,CAAC,EAAEP,GAAG,CAACO,CAArC;AAAwCC,QAAAA,CAAC,EAAER,GAAG,CAACQ;AAA/C;AAAP;AAFH,GAAP;AAID,CATD;;AAWA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACZ,GAAD,EAAMC,OAAN,EAAeQ,MAAf,EAA0B;AAAA,MAClCP,GADkC,GACrBO,MADqB,CAClCP,GADkC;AAAA,MAC7BC,GAD6B,GACrBM,MADqB,CAC7BN,GAD6B;AAE1C,SAAOL,MAAM,CAACI,GAAD,EAAMN,UAAU,CAACW,GAAX,CAAeL,GAAf,CAAN,EAA2BF,GAA3B,EAAgCG,GAAhC,EAAqCM,MAArC,CAAb;AACD,CAHD;;AAKAI,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7BD,EAAAA,GAAG,CAACE,oBAAJ,CAAyBC,GAAzB,CAA6B,SAA7B,EAAwCnB,OAAxC;AACAgB,EAAAA,GAAG,CAACI,oBAAJ,CAAyBD,GAAzB,CAA6B,SAA7B,EAAwCN,SAAxC;;AACAI,EAAAA,GAAG,CAACI,EAAJ,CAAOC,SAAP,CAAiB,SAAjB,IAA8B,UAAArB,GAAG;AAAA,WAAI,CAACA,GAAG,CAACsB,GAAJ,KAAY,KAAZ,IAAqBtB,GAAG,CAACsB,GAAJ,KAAYC,SAAlC,KAAgDvB,GAAG,CAACK,GAAJ,KAAY,WAAhE;AAAA,GAAjC;;AAEA,MAAIV,UAAJ,EAAgB;AACdqB,IAAAA,GAAG,CAACQ,GAAJ,CAAQH,SAAR,CAAkB,SAAlB,IAA+B,UAAArB,GAAG;AAAA,aAAI,CAACA,GAAG,CAACsB,GAAJ,KAAY,KAAZ,IAAqBtB,GAAG,CAACsB,GAAJ,KAAYC,SAAlC,KAAgDvB,GAAG,CAACyB,SAAJ,CAAcC,iBAAd,CAAgCC,UAAhC,CAA2C,GAA3C,CAApD;AAAA,KAAlC;AACD;AACF,CARD","sourcesContent":["const { improvedDH } = require('../../help/runtime_support')\nconst { KEYLENGTHS } = require('../../registry')\nconst { generateSync } = require('../../jwk/generate')\n\nconst derive = require('./derive')\n\nconst wrapKey = (key, payload, { enc }) => {\n  const epk = generateSync(key.kty, key.crv)\n\n  const derivedKey = derive(enc, KEYLENGTHS.get(enc), epk, key)\n\n  return {\n    wrapped: derivedKey,\n    header: { epk: { kty: key.kty, crv: key.crv, x: epk.x, y: epk.y } }\n  }\n}\n\nconst unwrapKey = (key, payload, header) => {\n  const { enc, epk } = header\n  return derive(enc, KEYLENGTHS.get(enc), key, epk, header)\n}\n\nmodule.exports = (JWA, JWK) => {\n  JWA.keyManagementEncrypt.set('ECDH-ES', wrapKey)\n  JWA.keyManagementDecrypt.set('ECDH-ES', unwrapKey)\n  JWK.EC.deriveKey['ECDH-ES'] = key => (key.use === 'enc' || key.use === undefined) && key.crv !== 'secp256k1'\n\n  if (improvedDH) {\n    JWK.OKP.deriveKey['ECDH-ES'] = key => (key.use === 'enc' || key.use === undefined) && key.keyObject.asymmetricKeyType.startsWith('x')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}