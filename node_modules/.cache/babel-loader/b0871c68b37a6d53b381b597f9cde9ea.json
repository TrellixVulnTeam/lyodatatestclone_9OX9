{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _toConsumableArray = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _a, _b;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fallback = exports.protobuf = exports.createApiCall = exports.lro = exports.GrpcClient = exports.version = exports.routingHeader = void 0; // Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n\nvar isbrowser_1 = require(\"./isbrowser\");\n\nvar needTextEncoderPolyfill = false;\n\nif (isbrowser_1.isBrowser() && ( // eslint-disable-next-line node/no-unsupported-features/node-builtins\ntypeof TextEncoder === 'undefined' || typeof TextDecoder === 'undefined')) {\n  needTextEncoderPolyfill = true;\n}\n\nif (typeof process !== 'undefined' && ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) && ((_b = process === null || process === void 0 ? void 0 : process.versions) === null || _b === void 0 ? void 0 : _b.node.match(/^10\\./))) {\n  // Node.js 10 does not have global TextDecoder\n  // TODO(@alexander-fenster): remove this logic after Node.js 10 is EOL.\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  var util = require('util');\n\n  Object.assign(global, {\n    TextDecoder: util.TextDecoder,\n    TextEncoder: util.TextEncoder\n  });\n}\n\nif (needTextEncoderPolyfill) {\n  require('fast-text-encoding');\n}\n\nvar protobuf = require(\"protobufjs\");\n\nexports.protobuf = protobuf;\n\nvar gax = require(\"./gax\");\n\nvar node_fetch_1 = require(\"node-fetch\");\n\nvar routingHeader = require(\"./routingHeader\");\n\nexports.routingHeader = routingHeader;\n\nvar abort_controller_1 = require(\"abort-controller\");\n\nvar status_1 = require(\"./status\");\n\nvar google_auth_library_1 = require(\"google-auth-library\");\n\nvar objectHash = require(\"object-hash\");\n\nvar operationsClient_1 = require(\"./operationsClient\");\n\nvar createApiCall_1 = require(\"./createApiCall\");\n\nvar fallbackError_1 = require(\"./fallbackError\");\n\nvar transcoding_1 = require(\"./transcoding\");\n\nvar pathTemplate_1 = require(\"./pathTemplate\");\n\nObject.defineProperty(exports, \"PathTemplate\", {\n  enumerable: true,\n  get: function get() {\n    return pathTemplate_1.PathTemplate;\n  }\n});\n\nvar gax_1 = require(\"./gax\");\n\nObject.defineProperty(exports, \"CallSettings\", {\n  enumerable: true,\n  get: function get() {\n    return gax_1.CallSettings;\n  }\n});\nObject.defineProperty(exports, \"constructSettings\", {\n  enumerable: true,\n  get: function get() {\n    return gax_1.constructSettings;\n  }\n});\nObject.defineProperty(exports, \"RetryOptions\", {\n  enumerable: true,\n  get: function get() {\n    return gax_1.RetryOptions;\n  }\n});\nexports.version = require('../../package.json').version + '-fallback';\n\nvar descriptor_1 = require(\"./descriptor\");\n\nObject.defineProperty(exports, \"BundleDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.BundleDescriptor;\n  }\n});\nObject.defineProperty(exports, \"LongrunningDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.LongrunningDescriptor;\n  }\n});\nObject.defineProperty(exports, \"PageDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.PageDescriptor;\n  }\n});\nObject.defineProperty(exports, \"StreamDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.StreamDescriptor;\n  }\n});\n\nvar streaming_1 = require(\"./streamingCalls/streaming\");\n\nObject.defineProperty(exports, \"StreamType\", {\n  enumerable: true,\n  get: function get() {\n    return streaming_1.StreamType;\n  }\n});\nvar CLIENT_VERSION_HEADER = 'x-goog-api-client';\n\nvar GrpcClient = /*#__PURE__*/function () {\n  /**\n   * gRPC-fallback version of GrpcClient\n   * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n   *\n   * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\n   *  to use in Node.js. Required for browser, optional for Node.js.\n   * @constructor\n   */\n  function GrpcClient() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, GrpcClient);\n\n    if (isbrowser_1.isBrowser()) {\n      if (!options.auth) {\n        throw new Error(JSON.stringify(options) + 'You need to pass auth instance to use gRPC-fallback client in browser. Use OAuth2Client from google-auth-library.');\n      }\n\n      this.auth = options.auth;\n    } else {\n      this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n    }\n\n    this.fallback = options.fallback !== 'rest' ? 'proto' : 'rest';\n    this.grpcVersion = require('../../package.json').version;\n  }\n  /**\n   * In rare cases users might need to deallocate all memory consumed by loaded protos.\n   * This method will delete the proto cache content.\n   */\n\n\n  _createClass(GrpcClient, [{\n    key: \"loadProto\",\n    value:\n    /**\n     * gRPC-fallback version of loadProto\n     * Loads the protobuf root object from a JSON object created from a proto file\n     * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n     * @returns {Object} Root namespace of proto JSON\n     */\n    function loadProto(jsonObject) {\n      var rootObject = protobuf.Root.fromJSON(jsonObject);\n      return rootObject;\n    }\n  }, {\n    key: \"loadProtoJSON\",\n    value: function loadProtoJSON(json) {\n      var ignoreCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var hash = objectHash(json);\n      var cached = GrpcClient.protoCache.get(hash);\n\n      if (cached && !ignoreCache) {\n        return cached;\n      }\n\n      var root = protobuf.Root.fromJSON(json);\n      GrpcClient.protoCache.set(hash, root);\n      return root;\n    }\n  }, {\n    key: \"constructSettings\",\n    value:\n    /**\n     * gRPC-fallback version of constructSettings\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */\n    function constructSettings(serviceName, clientConfig, configOverrides, headers) {\n      function buildMetadata(abTests, moreHeaders) {\n        var metadata = {};\n\n        if (!headers) {\n          headers = {};\n        } // Since gRPC expects each header to be an array,\n        // we are doing the same for fallback here.\n\n\n        for (var key in headers) {\n          metadata[key] = Array.isArray(headers[key]) ? headers[key] : [headers[key]];\n        } // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n\n\n        var clientVersions = [];\n\n        if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {\n          clientVersions.push.apply(clientVersions, _toConsumableArray(metadata[CLIENT_VERSION_HEADER][0].split(' ')));\n        }\n\n        clientVersions.push(\"grpc-web/\".concat(exports.version));\n        metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n\n        if (!moreHeaders) {\n          return metadata;\n        }\n\n        for (var _key in moreHeaders) {\n          if (_key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n            var value = moreHeaders[_key];\n\n            if (Array.isArray(value)) {\n              if (metadata[_key] === undefined) {\n                metadata[_key] = value;\n              } else {\n                if (Array.isArray(metadata[_key])) {\n                  var _metadata$_key;\n\n                  (_metadata$_key = metadata[_key]).push.apply(_metadata$_key, _toConsumableArray(value));\n                } else {\n                  throw new Error(\"Can not add value \".concat(value, \" to the call metadata.\"));\n                }\n              }\n            } else {\n              metadata[_key] = [value];\n            }\n          }\n        }\n\n        return metadata;\n      }\n\n      return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, {\n        metadataBuilder: buildMetadata\n      });\n    }\n    /**\n     * gRPC-fallback version of createStub\n     * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\n     *\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n     * @param {Object} opts - Connection options, as described below.\n     * @param {string} opts.servicePath - The hostname of the API endpoint service.\n     * @param {number} opts.port - The port of the service.\n     * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n     */\n\n  }, {\n    key: \"createStub\",\n    value: function () {\n      var _createStub = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(service, opts, // For consistency with createStub in grpc.ts, customServicePath is defined:\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      customServicePath) {\n        var _this = this;\n\n        var serviceClientImpl, statusDecoder, authHeader, serviceStub, methods, grpcCompatibleServiceStub, _loop, _i, _Object$entries;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                serviceClientImpl = function _serviceClientImpl(method, requestData, callback) {\n                  return [requestData, callback];\n                };\n\n                // decoder for google.rpc.Status messages\n                statusDecoder = new fallbackError_1.FallbackErrorDecoder();\n\n                if (this.authClient) {\n                  _context.next = 10;\n                  break;\n                }\n\n                if (!(this.auth && 'getClient' in this.auth)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.auth.getClient();\n\n              case 6:\n                this.authClient = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 9:\n                if (this.auth && 'getRequestHeaders' in this.auth) {\n                  this.authClient = this.auth;\n                }\n\n              case 10:\n                if (this.authClient) {\n                  _context.next = 12;\n                  break;\n                }\n\n                throw new Error('No authentication was provided');\n\n              case 12:\n                _context.next = 14;\n                return this.authClient.getRequestHeaders();\n\n              case 14:\n                authHeader = _context.sent;\n                serviceStub = service.create(serviceClientImpl, false, false);\n                methods = GrpcClient.getServiceMethods(service); // grpcCompatibleServiceStub methods accept four parameters:\n                // request, options, metadata, and callback - similar to\n                // the stub returned by grpc.ts\n\n                grpcCompatibleServiceStub = service.create(serviceClientImpl, false, false);\n\n                _loop = function _loop() {\n                  var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                      methodName = _Object$entries$_i[0],\n                      methodObject = _Object$entries$_i[1];\n\n                  grpcCompatibleServiceStub[methodName] = function (req, options, metadata, callback) {\n                    var _serviceStub$methodNa = serviceStub[methodName].apply(serviceStub, [methodObject.resolvedRequestType.fromObject(req), function (err, response) {\n                      if (!err) {\n                        // converts a protobuf message instance to a plain JavaScript object\n                        // with enum and long conversion options specified\n                        var responseObject = methodObject.resolvedResponseType.toObject(response, {\n                          enums: String,\n                          longs: String\n                        });\n                        callback(null, responseObject);\n                      } else {\n                        callback(err);\n                      }\n                    }]),\n                        _serviceStub$methodNa2 = _slicedToArray(_serviceStub$methodNa, 2),\n                        requestData = _serviceStub$methodNa2[0],\n                        serviceCallback = _serviceStub$methodNa2[1]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n                    var cancelController, cancelSignal;\n\n                    if (isbrowser_1.isBrowser() || typeof AbortController !== 'undefined') {\n                      // eslint-disable-next-line no-undef\n                      cancelController = new AbortController();\n                    } else {\n                      cancelController = new abort_controller_1.AbortController();\n                    }\n\n                    if (cancelController) {\n                      cancelSignal = cancelController.signal;\n                    }\n\n                    var cancelRequested = false;\n                    var headers = Object.assign({}, authHeader);\n\n                    for (var _i2 = 0, _Object$keys = Object.keys(options); _i2 < _Object$keys.length; _i2++) {\n                      var key = _Object$keys[_i2];\n                      headers[key] = options[key][0];\n                    }\n\n                    var grpcFallbackProtocol = opts.protocol || 'https';\n                    var servicePath = opts.servicePath;\n\n                    if (!servicePath && service.options && service.options['(google.api.default_host)']) {\n                      servicePath = service.options['(google.api.default_host)'];\n                    }\n\n                    if (!servicePath) {\n                      serviceCallback(new Error('Service path is undefined'));\n                      return;\n                    }\n\n                    var servicePort;\n                    var match = servicePath.match(/^(.*):(\\d+)$/);\n\n                    if (match) {\n                      servicePath = match[1];\n                      servicePort = match[2];\n                    }\n\n                    if (opts.port) {\n                      servicePort = opts.port;\n                    } else if (!servicePort) {\n                      servicePort = 443;\n                    }\n\n                    var protoNamespaces = [];\n                    var currNamespace = methodObject.parent;\n\n                    while (currNamespace.name !== '') {\n                      protoNamespaces.unshift(currNamespace.name);\n                      currNamespace = currNamespace.parent;\n                    }\n\n                    var protoServiceName = protoNamespaces.join('.');\n                    var rpcName = methodObject.name;\n                    var url;\n                    var data;\n                    var httpMethod; // TODO(@alexander-fenster): refactor this into separate function that prepares\n                    // request object for `fetch`.\n\n                    if (_this.fallback === 'rest') {\n                      // REGAPIC: JSON over HTTP/1 with gRPC trancoding\n                      headers['Content-Type'] = 'application/json';\n                      var decodedRequest = methodObject.resolvedRequestType.decode(requestData);\n                      var requestJSON = methodObject.resolvedRequestType.toObject( // TODO: use toJSON instead of toObject\n                      decodedRequest, {\n                        enums: String,\n                        longs: String\n                      });\n                      var transcoded = transcoding_1.transcode(requestJSON, methodObject.parsedOptions, methodObject.resolvedRequestType.fields);\n\n                      if (!transcoded) {\n                        throw new Error(\"Cannot build HTTP request for \".concat(JSON.stringify(requestJSON), \", method: \").concat(methodObject.name));\n                      }\n\n                      httpMethod = transcoded.httpMethod;\n                      data = JSON.stringify(transcoded.data);\n                      url = \"\".concat(grpcFallbackProtocol, \"://\").concat(servicePath, \":\").concat(servicePort, \"/\").concat(transcoded.url.replace(/^\\//, ''), \"?\").concat(transcoded.queryString);\n                    } else {\n                      // gRPC-fallback: proto over HTTP/1\n                      headers['Content-Type'] = 'application/x-protobuf';\n                      httpMethod = 'post';\n                      data = requestData;\n                      url = \"\".concat(grpcFallbackProtocol, \"://\").concat(servicePath, \":\").concat(servicePort, \"/$rpc/\").concat(protoServiceName, \"/\").concat(rpcName);\n                    }\n\n                    var fetch = isbrowser_1.isBrowser() ? // eslint-disable-next-line no-undef\n                    window.fetch : node_fetch_1.default;\n                    var fetchRequest = {\n                      headers: headers,\n                      body: data,\n                      method: httpMethod,\n                      signal: cancelSignal\n                    };\n\n                    if (httpMethod === 'get' || httpMethod === 'delete' || httpMethod === 'head') {\n                      delete fetchRequest['body'];\n                    }\n\n                    fetch(url, fetchRequest).then(function (response) {\n                      return Promise.all([Promise.resolve(response.ok), response.arrayBuffer()]);\n                    }).then(function (_ref) {\n                      var _ref2 = _slicedToArray(_ref, 2),\n                          ok = _ref2[0],\n                          buffer = _ref2[1];\n\n                      // TODO(@alexander-fenster): response processing to be moved\n                      // to a separate function.\n                      if (_this.fallback === 'rest') {\n                        // REGAPIC: JSON over HTTP/1\n                        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n                        var decodedString = new TextDecoder().decode(buffer);\n                        var response = JSON.parse(decodedString);\n\n                        if (!ok) {\n                          var error = Object.assign(new Error(response['error']['message']), response.error);\n                          throw error;\n                        }\n\n                        var message = methodObject.resolvedResponseType.fromObject(response);\n                        var encoded = methodObject.resolvedResponseType.encode(message).finish();\n                        serviceCallback(null, encoded);\n                      } else {\n                        // gRPC-fallback: proto over HTTP/1\n                        if (!ok) {\n                          var _error = statusDecoder.decodeErrorFromBuffer(buffer);\n\n                          throw _error;\n                        }\n\n                        serviceCallback(null, new Uint8Array(buffer));\n                      }\n                    }).catch(function (err) {\n                      if (!cancelRequested || err.name !== 'AbortError') {\n                        serviceCallback(err);\n                      }\n                    });\n                    return {\n                      cancel: function cancel() {\n                        if (!cancelController) {\n                          console.warn('AbortController not found: Cancellation is not supported in this environment');\n                          return;\n                        }\n\n                        cancelRequested = true;\n                        cancelController.abort();\n                      }\n                    };\n                  };\n                };\n\n                for (_i = 0, _Object$entries = Object.entries(methods); _i < _Object$entries.length; _i++) {\n                  _loop();\n                }\n\n                return _context.abrupt(\"return\", grpcCompatibleServiceStub);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createStub(_x, _x2, _x3) {\n        return _createStub.apply(this, arguments);\n      }\n\n      return createStub;\n    }()\n  }], [{\n    key: \"clearProtoCache\",\n    value: function clearProtoCache() {\n      GrpcClient.protoCache.clear();\n    }\n  }, {\n    key: \"getServiceMethods\",\n    value: function getServiceMethods(service) {\n      var methods = {};\n\n      for (var _i3 = 0, _Object$entries2 = Object.entries(service.methods); _i3 < _Object$entries2.length; _i3++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),\n            methodName = _Object$entries2$_i[0],\n            methodObject = _Object$entries2$_i[1];\n\n        var methodNameLowerCamelCase = methodName[0].toLowerCase() + methodName.substring(1);\n        methods[methodNameLowerCamelCase] = methodObject;\n      }\n\n      return methods;\n    }\n  }]);\n\n  return GrpcClient;\n}();\n\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\n\nfunction lro(options) {\n  options = Object.assign({\n    scopes: []\n  }, options);\n  var gaxGrpc = new GrpcClient(options);\n  return new operationsClient_1.OperationsClientBuilder(gaxGrpc);\n}\n\nexports.lro = lro;\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\n\nfunction createApiCall(func, settings, descriptor) {\n  if (descriptor && 'streaming' in descriptor) {\n    return function () {\n      throw new Error('The gRPC-fallback client library (e.g. browser version of the library) currently does not support streaming calls.');\n    };\n  }\n\n  return createApiCall_1.createApiCall(func, settings, descriptor);\n}\n\nexports.createApiCall = createApiCall;\nexports.protobufMinimal = require(\"protobufjs/minimal\"); // Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\n\nvar fallback = module.exports;\nexports.fallback = fallback;","map":{"version":3,"sources":["../../src/fallback.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fallback = exports.protobuf = exports.createApiCall = exports.lro = exports.GrpcClient = exports.version = exports.routingHeader = void 0;\n// Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\nconst isbrowser_1 = require(\"./isbrowser\");\nlet needTextEncoderPolyfill = false;\nif (isbrowser_1.isBrowser() &&\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    (typeof TextEncoder === 'undefined' || typeof TextDecoder === 'undefined')) {\n    needTextEncoderPolyfill = true;\n}\nif (typeof process !== 'undefined' && ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) && ((_b = process === null || process === void 0 ? void 0 : process.versions) === null || _b === void 0 ? void 0 : _b.node.match(/^10\\./))) {\n    // Node.js 10 does not have global TextDecoder\n    // TODO(@alexander-fenster): remove this logic after Node.js 10 is EOL.\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const util = require('util');\n    Object.assign(global, {\n        TextDecoder: util.TextDecoder,\n        TextEncoder: util.TextEncoder,\n    });\n}\nif (needTextEncoderPolyfill) {\n    require('fast-text-encoding');\n}\nconst protobuf = require(\"protobufjs\");\nexports.protobuf = protobuf;\nconst gax = require(\"./gax\");\nconst node_fetch_1 = require(\"node-fetch\");\nconst routingHeader = require(\"./routingHeader\");\nexports.routingHeader = routingHeader;\nconst abort_controller_1 = require(\"abort-controller\");\nconst status_1 = require(\"./status\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst objectHash = require(\"object-hash\");\nconst operationsClient_1 = require(\"./operationsClient\");\nconst createApiCall_1 = require(\"./createApiCall\");\nconst fallbackError_1 = require(\"./fallbackError\");\nconst transcoding_1 = require(\"./transcoding\");\nvar pathTemplate_1 = require(\"./pathTemplate\");\nObject.defineProperty(exports, \"PathTemplate\", { enumerable: true, get: function () { return pathTemplate_1.PathTemplate; } });\nvar gax_1 = require(\"./gax\");\nObject.defineProperty(exports, \"CallSettings\", { enumerable: true, get: function () { return gax_1.CallSettings; } });\nObject.defineProperty(exports, \"constructSettings\", { enumerable: true, get: function () { return gax_1.constructSettings; } });\nObject.defineProperty(exports, \"RetryOptions\", { enumerable: true, get: function () { return gax_1.RetryOptions; } });\nexports.version = require('../../package.json').version + '-fallback';\nvar descriptor_1 = require(\"./descriptor\");\nObject.defineProperty(exports, \"BundleDescriptor\", { enumerable: true, get: function () { return descriptor_1.BundleDescriptor; } });\nObject.defineProperty(exports, \"LongrunningDescriptor\", { enumerable: true, get: function () { return descriptor_1.LongrunningDescriptor; } });\nObject.defineProperty(exports, \"PageDescriptor\", { enumerable: true, get: function () { return descriptor_1.PageDescriptor; } });\nObject.defineProperty(exports, \"StreamDescriptor\", { enumerable: true, get: function () { return descriptor_1.StreamDescriptor; } });\nvar streaming_1 = require(\"./streamingCalls/streaming\");\nObject.defineProperty(exports, \"StreamType\", { enumerable: true, get: function () { return streaming_1.StreamType; } });\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\nclass GrpcClient {\n    /**\n     * gRPC-fallback version of GrpcClient\n     * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n     *\n     * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\n     *  to use in Node.js. Required for browser, optional for Node.js.\n     * @constructor\n     */\n    constructor(options = {}) {\n        if (isbrowser_1.isBrowser()) {\n            if (!options.auth) {\n                throw new Error(JSON.stringify(options) +\n                    'You need to pass auth instance to use gRPC-fallback client in browser. Use OAuth2Client from google-auth-library.');\n            }\n            this.auth = options.auth;\n        }\n        else {\n            this.auth =\n                options.auth ||\n                    new google_auth_library_1.GoogleAuth(options);\n        }\n        this.fallback = options.fallback !== 'rest' ? 'proto' : 'rest';\n        this.grpcVersion = require('../../package.json').version;\n    }\n    /**\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\n     * This method will delete the proto cache content.\n     */\n    static clearProtoCache() {\n        GrpcClient.protoCache.clear();\n    }\n    /**\n     * gRPC-fallback version of loadProto\n     * Loads the protobuf root object from a JSON object created from a proto file\n     * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n     * @returns {Object} Root namespace of proto JSON\n     */\n    loadProto(jsonObject) {\n        const rootObject = protobuf.Root.fromJSON(jsonObject);\n        return rootObject;\n    }\n    loadProtoJSON(json, ignoreCache = false) {\n        const hash = objectHash(json);\n        const cached = GrpcClient.protoCache.get(hash);\n        if (cached && !ignoreCache) {\n            return cached;\n        }\n        const root = protobuf.Root.fromJSON(json);\n        GrpcClient.protoCache.set(hash, root);\n        return root;\n    }\n    static getServiceMethods(service) {\n        const methods = {};\n        for (const [methodName, methodObject] of Object.entries(service.methods)) {\n            const methodNameLowerCamelCase = methodName[0].toLowerCase() + methodName.substring(1);\n            methods[methodNameLowerCamelCase] = methodObject;\n        }\n        return methods;\n    }\n    /**\n     * gRPC-fallback version of constructSettings\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */\n    constructSettings(serviceName, clientConfig, configOverrides, headers) {\n        function buildMetadata(abTests, moreHeaders) {\n            const metadata = {};\n            if (!headers) {\n                headers = {};\n            }\n            // Since gRPC expects each header to be an array,\n            // we are doing the same for fallback here.\n            for (const key in headers) {\n                metadata[key] = Array.isArray(headers[key])\n                    ? headers[key]\n                    : [headers[key]];\n            }\n            // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n            const clientVersions = [];\n            if (metadata[CLIENT_VERSION_HEADER] &&\n                metadata[CLIENT_VERSION_HEADER][0]) {\n                clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\n            }\n            clientVersions.push(`grpc-web/${exports.version}`);\n            metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n            if (!moreHeaders) {\n                return metadata;\n            }\n            for (const key in moreHeaders) {\n                if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n                    const value = moreHeaders[key];\n                    if (Array.isArray(value)) {\n                        if (metadata[key] === undefined) {\n                            metadata[key] = value;\n                        }\n                        else {\n                            if (Array.isArray(metadata[key])) {\n                                metadata[key].push(...value);\n                            }\n                            else {\n                                throw new Error(`Can not add value ${value} to the call metadata.`);\n                            }\n                        }\n                    }\n                    else {\n                        metadata[key] = [value];\n                    }\n                }\n            }\n            return metadata;\n        }\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, { metadataBuilder: buildMetadata });\n    }\n    /**\n     * gRPC-fallback version of createStub\n     * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\n     *\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n     * @param {Object} opts - Connection options, as described below.\n     * @param {string} opts.servicePath - The hostname of the API endpoint service.\n     * @param {number} opts.port - The port of the service.\n     * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n     */\n    async createStub(service, opts, \n    // For consistency with createStub in grpc.ts, customServicePath is defined:\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    customServicePath) {\n        // an RPC function to be passed to protobufjs RPC API\n        function serviceClientImpl(method, requestData, callback) {\n            return [requestData, callback];\n        }\n        // decoder for google.rpc.Status messages\n        const statusDecoder = new fallbackError_1.FallbackErrorDecoder();\n        if (!this.authClient) {\n            if (this.auth && 'getClient' in this.auth) {\n                this.authClient = await this.auth.getClient();\n            }\n            else if (this.auth && 'getRequestHeaders' in this.auth) {\n                this.authClient = this.auth;\n            }\n        }\n        if (!this.authClient) {\n            throw new Error('No authentication was provided');\n        }\n        const authHeader = await this.authClient.getRequestHeaders();\n        const serviceStub = service.create(serviceClientImpl, false, false);\n        const methods = GrpcClient.getServiceMethods(service);\n        // grpcCompatibleServiceStub methods accept four parameters:\n        // request, options, metadata, and callback - similar to\n        // the stub returned by grpc.ts\n        const grpcCompatibleServiceStub = service.create(serviceClientImpl, false, false);\n        for (const [methodName, methodObject] of Object.entries(methods)) {\n            grpcCompatibleServiceStub[methodName] = (req, options, metadata, callback) => {\n                const [requestData, serviceCallback] = serviceStub[methodName].apply(serviceStub, [\n                    methodObject.resolvedRequestType.fromObject(req),\n                    (err, response) => {\n                        if (!err) {\n                            // converts a protobuf message instance to a plain JavaScript object\n                            // with enum and long conversion options specified\n                            const responseObject = methodObject.resolvedResponseType.toObject(response, {\n                                enums: String,\n                                longs: String,\n                            });\n                            callback(null, responseObject);\n                        }\n                        else {\n                            callback(err);\n                        }\n                    },\n                ]);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let cancelController, cancelSignal;\n                if (isbrowser_1.isBrowser() || typeof AbortController !== 'undefined') {\n                    // eslint-disable-next-line no-undef\n                    cancelController = new AbortController();\n                }\n                else {\n                    cancelController = new abort_controller_1.AbortController();\n                }\n                if (cancelController) {\n                    cancelSignal = cancelController.signal;\n                }\n                let cancelRequested = false;\n                const headers = Object.assign({}, authHeader);\n                for (const key of Object.keys(options)) {\n                    headers[key] = options[key][0];\n                }\n                const grpcFallbackProtocol = opts.protocol || 'https';\n                let servicePath = opts.servicePath;\n                if (!servicePath &&\n                    service.options &&\n                    service.options['(google.api.default_host)']) {\n                    servicePath = service.options['(google.api.default_host)'];\n                }\n                if (!servicePath) {\n                    serviceCallback(new Error('Service path is undefined'));\n                    return;\n                }\n                let servicePort;\n                const match = servicePath.match(/^(.*):(\\d+)$/);\n                if (match) {\n                    servicePath = match[1];\n                    servicePort = match[2];\n                }\n                if (opts.port) {\n                    servicePort = opts.port;\n                }\n                else if (!servicePort) {\n                    servicePort = 443;\n                }\n                const protoNamespaces = [];\n                let currNamespace = methodObject.parent;\n                while (currNamespace.name !== '') {\n                    protoNamespaces.unshift(currNamespace.name);\n                    currNamespace = currNamespace.parent;\n                }\n                const protoServiceName = protoNamespaces.join('.');\n                const rpcName = methodObject.name;\n                let url;\n                let data;\n                let httpMethod;\n                // TODO(@alexander-fenster): refactor this into separate function that prepares\n                // request object for `fetch`.\n                if (this.fallback === 'rest') {\n                    // REGAPIC: JSON over HTTP/1 with gRPC trancoding\n                    headers['Content-Type'] = 'application/json';\n                    const decodedRequest = methodObject.resolvedRequestType.decode(requestData);\n                    const requestJSON = methodObject.resolvedRequestType.toObject(\n                    // TODO: use toJSON instead of toObject\n                    decodedRequest, {\n                        enums: String,\n                        longs: String,\n                    });\n                    const transcoded = transcoding_1.transcode(requestJSON, methodObject.parsedOptions, methodObject.resolvedRequestType.fields);\n                    if (!transcoded) {\n                        throw new Error(`Cannot build HTTP request for ${JSON.stringify(requestJSON)}, method: ${methodObject.name}`);\n                    }\n                    httpMethod = transcoded.httpMethod;\n                    data = JSON.stringify(transcoded.data);\n                    url = `${grpcFallbackProtocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n                }\n                else {\n                    // gRPC-fallback: proto over HTTP/1\n                    headers['Content-Type'] = 'application/x-protobuf';\n                    httpMethod = 'post';\n                    data = requestData;\n                    url = `${grpcFallbackProtocol}://${servicePath}:${servicePort}/$rpc/${protoServiceName}/${rpcName}`;\n                }\n                const fetch = isbrowser_1.isBrowser()\n                    ? // eslint-disable-next-line no-undef\n                        window.fetch\n                    : node_fetch_1.default;\n                const fetchRequest = {\n                    headers,\n                    body: data,\n                    method: httpMethod,\n                    signal: cancelSignal,\n                };\n                if (httpMethod === 'get' ||\n                    httpMethod === 'delete' ||\n                    httpMethod === 'head') {\n                    delete fetchRequest['body'];\n                }\n                fetch(url, fetchRequest)\n                    .then((response) => {\n                    return Promise.all([\n                        Promise.resolve(response.ok),\n                        response.arrayBuffer(),\n                    ]);\n                })\n                    .then(([ok, buffer]) => {\n                    // TODO(@alexander-fenster): response processing to be moved\n                    // to a separate function.\n                    if (this.fallback === 'rest') {\n                        // REGAPIC: JSON over HTTP/1\n                        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n                        const decodedString = new TextDecoder().decode(buffer);\n                        const response = JSON.parse(decodedString);\n                        if (!ok) {\n                            const error = Object.assign(new Error(response['error']['message']), response.error);\n                            throw error;\n                        }\n                        const message = methodObject.resolvedResponseType.fromObject(response);\n                        const encoded = methodObject\n                            .resolvedResponseType.encode(message)\n                            .finish();\n                        serviceCallback(null, encoded);\n                    }\n                    else {\n                        // gRPC-fallback: proto over HTTP/1\n                        if (!ok) {\n                            const error = statusDecoder.decodeErrorFromBuffer(buffer);\n                            throw error;\n                        }\n                        serviceCallback(null, new Uint8Array(buffer));\n                    }\n                })\n                    .catch((err) => {\n                    if (!cancelRequested || err.name !== 'AbortError') {\n                        serviceCallback(err);\n                    }\n                });\n                return {\n                    cancel: () => {\n                        if (!cancelController) {\n                            console.warn('AbortController not found: Cancellation is not supported in this environment');\n                            return;\n                        }\n                        cancelRequested = true;\n                        cancelController.abort();\n                    },\n                };\n            };\n        }\n        return grpcCompatibleServiceStub;\n    }\n}\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\nfunction lro(options) {\n    options = Object.assign({ scopes: [] }, options);\n    const gaxGrpc = new GrpcClient(options);\n    return new operationsClient_1.OperationsClientBuilder(gaxGrpc);\n}\nexports.lro = lro;\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\nfunction createApiCall(func, settings, descriptor) {\n    if (descriptor && 'streaming' in descriptor) {\n        return () => {\n            throw new Error('The gRPC-fallback client library (e.g. browser version of the library) currently does not support streaming calls.');\n        };\n    }\n    return createApiCall_1.createApiCall(func, settings, descriptor);\n}\nexports.createApiCall = createApiCall;\nexports.protobufMinimal = require(\"protobufjs/minimal\");\n// Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\nconst fallback = module.exports;\nexports.fallback = fallback;\n//# sourceMappingURL=fallback.js.map"]},"metadata":{},"sourceType":"script"}