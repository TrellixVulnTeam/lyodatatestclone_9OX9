{"ast":null,"code":"var _jsxFileName = \"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/src/Pages/Tests/TestHome.jsx\",\n    _s = $RefreshSig$();\n\nimport { Container } from '@material-ui/core';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TestHome = ({\n  data\n}) => {\n  _s();\n\n  let time = [];\n  let temp = [];\n  let stillTime = [];\n  let pressure = [];\n  let delta = [];\n  let deltaP = [];\n  const [timeData, setTimeData] = useState([]);\n  const [stillTimeData, setStillTimeData] = useState([]);\n  const [deltaTemp, setDeltaTemp] = useState([]);\n  const [deltaPressure, setDeltaP] = useState([]);\n  const [tempData, setTempData] = useState([]);\n  const [pressureData, setPressureData] = useState([]);\n  useEffect(() => {\n    var x, y, z;\n    var randomTemp, randomPressure;\n    let currTemp = 25;\n    let currPressure = 800;\n    let currTime = 0;\n\n    for (let index = 0; index < data.length; index++) {\n      x = (data[index].temp1 - currTemp) / data[index].time1;\n      y = (data[index].pressure - currPressure) / data[index].time1;\n\n      for (let j = 0; j < data[index].time1; j++) {\n        currTime++;\n        currTemp = currTemp + x;\n        randomTemp = currTemp + Math.floor(Math.random() * x);\n        currPressure = currPressure + y;\n        randomPressure = currPressure + Math.floor(Math.random() * y);\n        time.push(currTime);\n        temp.push(currTemp);\n        pressure.push(currPressure);\n        delta.push(randomTemp);\n        deltaP.push(randomPressure);\n      }\n\n      for (let k = 0; k < data[index].time2; k++) {\n        currTime++;\n        time.push(currTime);\n        delta.push(randomTemp + Math.random() * x);\n        deltaP.push(randomPressure + Math.random() * y);\n        temp.push(currTemp);\n        pressure.push(currPressure);\n      }\n    }\n\n    setTimeData(time);\n    setTempData(temp);\n    setStillTimeData(stillTime);\n    setPressureData(pressure);\n    setDeltaP(deltaP);\n    setDeltaTemp(delta);\n  }, []);\n  const options = {\n    chart: {\n      foreColor: \"#fff\",\n      toolbar: {\n        show: false\n      }\n    },\n    fill: {\n      type: \"gradient\",\n      gradient: {\n        gradientToColors: [\"#F55555\", \"e84545\", \"#6094ea\"]\n      }\n    },\n    stroke: {\n      curve: 'smooth'\n    },\n    markers: {\n      size: 0\n    },\n    colors: [\"#ffcc29\", \"#f58634\", \"#f02fc2\"],\n    xaxis: {\n      axisTicks: {\n        color: \"#333\"\n      },\n      labels: {\n        show: false\n      },\n      categories: timeData\n    },\n    animations: {\n      enabled: true,\n      easing: 'linear',\n      speed: 800,\n      animateGradually: {\n        enabled: true,\n        delay: 150\n      },\n      animateGradually: {\n        enabled: true,\n        delay: 200\n      },\n      dynamicAnimation: {\n        enabled: true,\n        speed: 350\n      }\n    },\n    dropShadow: {\n      enabled: true,\n      opacity: 0.3,\n      blur: 5,\n      left: -7,\n      top: 22\n    },\n    yaxis: [{\n      tickAmount: 6,\n      min: -50,\n      max: 40,\n      fontColor: '#f8f5f1',\n      title: {\n        text: \"Temprature\"\n      }\n    }, {\n      fontColor: '#f8f5f1',\n      tickAmount: 6,\n      min: 500,\n      opposite: true,\n      title: {\n        text: \"Pressure\"\n      }\n    }]\n  };\n  const series = [{\n    name: 'Temprature',\n    data: tempData\n  }, {\n    name: 'Pressure',\n    data: pressureData\n  }];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      background: '#132c33'\n    },\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: options,\n      series: series,\n      type: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 6\n  }, this);\n};\n\n_s(TestHome, \"VodavgMwWEJqJsFNhY1hPaOFCTQ=\");\n\n_c = TestHome;\nexport default TestHome;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestHome\");","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/src/Pages/Tests/TestHome.jsx"],"names":["Container","React","Fragment","useEffect","useState","Chart","TestHome","data","time","temp","stillTime","pressure","delta","deltaP","timeData","setTimeData","stillTimeData","setStillTimeData","deltaTemp","setDeltaTemp","deltaPressure","setDeltaP","tempData","setTempData","pressureData","setPressureData","x","y","z","randomTemp","randomPressure","currTemp","currPressure","currTime","index","length","temp1","time1","j","Math","floor","random","push","k","time2","options","chart","foreColor","toolbar","show","fill","type","gradient","gradientToColors","stroke","curve","markers","size","colors","xaxis","axisTicks","color","labels","categories","animations","enabled","easing","speed","animateGradually","delay","dynamicAnimation","dropShadow","opacity","blur","left","top","yaxis","tickAmount","min","max","fontColor","title","text","opposite","series","name","background"],"mappings":"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","sourcesContent":["import { Container } from '@material-ui/core';\r\nimport React, { Fragment, useEffect, useState } from 'react';\r\nimport Chart from 'react-apexcharts'\r\nconst TestHome = ({data}) => {\r\n   let time = []\r\n  let temp = []\r\n  let stillTime = []\r\n  let pressure = []\r\n  let delta =  []\r\n  let deltaP =[]\r\n  const [timeData, setTimeData] = useState([])\r\n  const [stillTimeData, setStillTimeData] = useState([])\r\n  const [deltaTemp, setDeltaTemp] = useState([])\r\n  const [deltaPressure, setDeltaP] = useState([])\r\n  const [tempData, setTempData] = useState([])\r\n  const [pressureData, setPressureData] = useState([])\r\nuseEffect(() => {\r\n      var x, y, z;\r\n      var randomTemp, randomPressure;\r\n      let currTemp=25; let currPressure= 800; let currTime = 0;\r\n    for (let index = 0; index < data.length; index++) {\r\n      x = (data[index].temp1 - currTemp)/data[index].time1\r\n      y = (data[index].pressure - currPressure)/data[index].time1\r\n     \r\n      for (let j = 0; j < data[index].time1 ; j++) {\r\n          currTime++;\r\n          currTemp = currTemp + x;\r\n          randomTemp = currTemp + Math.floor(Math.random() * x)\r\n          currPressure = currPressure + y\r\n           randomPressure = currPressure+ Math.floor(Math.random() * y)\r\n          time.push(currTime)\r\n          temp.push(currTemp)\r\n          pressure.push(currPressure)\r\n          delta.push(randomTemp)\r\n          deltaP.push(randomPressure)\r\n          \r\n      }\r\n\r\n      for (let k = 0; k < data[index].time2; k++) {\r\n          currTime++\r\n          time.push(currTime)\r\n          delta.push(randomTemp + Math.random() * x)\r\n          deltaP.push (randomPressure + Math.random()*y)\r\n          temp.push(currTemp)\r\n          pressure.push(currPressure)\r\n         \r\n         \r\n     \r\n      }\r\n    }\r\n  setTimeData(time)\r\n  setTempData(temp)\r\n  setStillTimeData(stillTime)\r\n  setPressureData(pressure)\r\n  setDeltaP(deltaP)\r\n  setDeltaTemp(delta)\r\n\r\n  }, [])\r\n\r\n   const options = {\r\n      chart: {\r\n    foreColor: \"#fff\",\r\n    toolbar: {\r\n      show: false\r\n    }},\r\n    fill: {\r\n    type: \"gradient\",\r\n    gradient: {\r\n      gradientToColors: [\"#F55555\", \"e84545\", \"#6094ea\"]\r\n    }\r\n  },\r\n    stroke: {\r\n      curve: 'smooth'\r\n    },\r\n    markers: {\r\n      size: 0\r\n    },\r\n    colors: [\"#ffcc29\", \"#f58634\", \"#f02fc2\"],\r\n    xaxis: {\r\n    axisTicks: {\r\n      color: \"#333\"\r\n    },\r\n      labels: {\r\n        show: false\r\n      },\r\n      categories: timeData\r\n    },\r\n    animations: {\r\n        enabled: true,\r\n        easing: 'linear',\r\n        speed: 800,\r\n        animateGradually: {\r\n            enabled: true,\r\n            delay: 150\r\n        },\r\n        animateGradually: {\r\n          enabled: true,\r\n          delay: 200,\r\n        },\r\n      \r\n        dynamicAnimation: {\r\n            enabled: true,\r\n            speed: 350\r\n        }\r\n      \r\n    },\r\n     dropShadow: {\r\n      enabled: true,\r\n      opacity: 0.3,\r\n      blur: 5,\r\n      left: -7,\r\n      top: 22\r\n    },\r\n    \r\n    yaxis: [\r\n    \r\n  {\r\n    tickAmount: 6,\r\n    min: -50,\r\n    max: 40,\r\n  fontColor:'#f8f5f1',\r\n    title: {\r\n      text: \"Temprature\"\r\n    },\r\n  },\r\n  {\r\n    fontColor:'#f8f5f1',\r\n    tickAmount: 6,\r\n    min: 500,\r\n    opposite: true,\r\n    title: {\r\n      text: \"Pressure\"\r\n    }\r\n  }]\r\n  };\r\n  const series = [\r\n   \r\n    {\r\n      \r\n      name: 'Temprature',\r\n      data: tempData\r\n    },\r\n    {\r\n      \r\n      name: 'Pressure',\r\n      data: pressureData\r\n    }\r\n  ];\r\n\r\n  return (\r\n     <Container style={{background: '#132c33'}}>\r\n      <Chart options={options} series={series} type=\"line\" />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default TestHome\r\n"]},"metadata":{},"sourceType":"module"}