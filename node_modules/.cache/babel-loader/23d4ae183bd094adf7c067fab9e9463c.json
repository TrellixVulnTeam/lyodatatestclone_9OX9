{"ast":null,"code":"var base64url = require('../help/base64url');\n\nvar errors = require('../errors');\n\nmodule.exports = function (token) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$complete = _ref.complete,\n      complete = _ref$complete === void 0 ? false : _ref$complete;\n\n  if (typeof token !== 'string' || !token) {\n    throw new TypeError('JWT must be a string');\n  }\n\n  var _token$split = token.split('.'),\n      header = _token$split[0],\n      payload = _token$split[1],\n      signature = _token$split[2],\n      length = _token$split.length;\n\n  if (length === 5) {\n    throw new TypeError('encrypted JWTs cannot be decoded');\n  }\n\n  if (length !== 3) {\n    throw new errors.JWTMalformed('JWTs must have three components');\n  }\n\n  try {\n    var result = {\n      header: base64url.JSON.decode(header),\n      payload: base64url.JSON.decode(payload),\n      signature: signature\n    };\n    return complete ? result : result.payload;\n  } catch (err) {\n    throw new errors.JWTMalformed('JWT is malformed');\n  }\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/jwt/decode.js"],"names":["base64url","require","errors","module","exports","token","complete","TypeError","split","header","payload","signature","length","JWTMalformed","result","JSON","decode","err"],"mappings":"AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,mBAAD,CAAzB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAACC,KAAD,EAAsC;AAAA,iFAAP,EAAO;AAAA,2BAA5BC,QAA4B;AAAA,MAA5BA,QAA4B,8BAAjB,KAAiB;;AACrD,MAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KAAlC,EAAyC;AACvC,UAAM,IAAIE,SAAJ,CAAc,sBAAd,CAAN;AACD;;AAHoD,qBAKGF,KAAK,CAACG,KAAN,CAAY,GAAZ,CALH;AAAA,MAK1CC,MAL0C,gBAK7C,CAL6C;AAAA,MAK/BC,OAL+B,gBAKlC,CALkC;AAAA,MAKnBC,SALmB,gBAKtB,CALsB;AAAA,MAKRC,MALQ,gBAKRA,MALQ;;AAOrD,MAAIA,MAAM,KAAK,CAAf,EAAkB;AAChB,UAAM,IAAIL,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,MAAIK,MAAM,KAAK,CAAf,EAAkB;AAChB,UAAM,IAAIV,MAAM,CAACW,YAAX,CAAwB,iCAAxB,CAAN;AACD;;AAED,MAAI;AACF,QAAMC,MAAM,GAAG;AACbL,MAAAA,MAAM,EAAET,SAAS,CAACe,IAAV,CAAeC,MAAf,CAAsBP,MAAtB,CADK;AAEbC,MAAAA,OAAO,EAAEV,SAAS,CAACe,IAAV,CAAeC,MAAf,CAAsBN,OAAtB,CAFI;AAGbC,MAAAA,SAAS,EAATA;AAHa,KAAf;AAMA,WAAOL,QAAQ,GAAGQ,MAAH,GAAYA,MAAM,CAACJ,OAAlC;AACD,GARD,CAQE,OAAOO,GAAP,EAAY;AACZ,UAAM,IAAIf,MAAM,CAACW,YAAX,CAAwB,kBAAxB,CAAN;AACD;AACF,CA1BD","sourcesContent":["const base64url = require('../help/base64url')\nconst errors = require('../errors')\n\nmodule.exports = (token, { complete = false } = {}) => {\n  if (typeof token !== 'string' || !token) {\n    throw new TypeError('JWT must be a string')\n  }\n\n  const { 0: header, 1: payload, 2: signature, length } = token.split('.')\n\n  if (length === 5) {\n    throw new TypeError('encrypted JWTs cannot be decoded')\n  }\n\n  if (length !== 3) {\n    throw new errors.JWTMalformed('JWTs must have three components')\n  }\n\n  try {\n    const result = {\n      header: base64url.JSON.decode(header),\n      payload: base64url.JSON.decode(payload),\n      signature\n    }\n\n    return complete ? result : result.payload\n  } catch (err) {\n    throw new errors.JWTMalformed('JWT is malformed')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}