{"ast":null,"code":"var _require = require('crypto'),\n    createCipheriv = _require.createCipheriv,\n    createDecipheriv = _require.createDecipheriv,\n    getCiphers = _require.getCiphers;\n\nvar _require2 = require('../help/consts'),\n    KEYOBJECT = _require2.KEYOBJECT;\n\nvar _require3 = require('../help/key_object'),\n    asInput = _require3.asInput;\n\nvar checkInput = function checkInput(data) {\n  if (data !== undefined && data.length % 8 !== 0) {\n    throw new Error('invalid data length');\n  }\n};\n\nvar wrapKey = function wrapKey(alg, _ref, payload) {\n  var keyObject = _ref[KEYOBJECT];\n  var key = asInput(keyObject, false);\n  var cipher = createCipheriv(alg, key, Buffer.alloc(8, 'a6', 'hex'));\n  return {\n    wrapped: Buffer.concat([cipher.update(payload), cipher.final()])\n  };\n};\n\nvar unwrapKey = function unwrapKey(alg, _ref2, payload) {\n  var keyObject = _ref2[KEYOBJECT];\n  var key = asInput(keyObject, false);\n  checkInput(payload);\n  var cipher = createDecipheriv(alg, key, Buffer.alloc(8, 'a6', 'hex'));\n  return Buffer.concat([cipher.update(payload), cipher.final()]);\n};\n\nmodule.exports = function (JWA, JWK) {\n  ['A128KW', 'A192KW', 'A256KW'].forEach(function (jwaAlg) {\n    var size = parseInt(jwaAlg.substr(1, 3), 10);\n    var alg = \"aes\".concat(size, \"-wrap\");\n\n    if (getCiphers().includes(alg)) {\n      JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, alg));\n      JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, alg));\n\n      JWK.oct.wrapKey[jwaAlg] = JWK.oct.unwrapKey[jwaAlg] = function (key) {\n        return (key.use === 'enc' || key.use === undefined) && key.length === size;\n      };\n    }\n  });\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/jwa/aes_kw.js"],"names":["require","createCipheriv","createDecipheriv","getCiphers","KEYOBJECT","asInput","checkInput","data","undefined","length","Error","wrapKey","alg","payload","keyObject","key","cipher","Buffer","alloc","wrapped","concat","update","final","unwrapKey","module","exports","JWA","JWK","forEach","jwaAlg","size","parseInt","substr","includes","keyManagementEncrypt","set","bind","keyManagementDecrypt","oct","use"],"mappings":"eAAyDA,OAAO,CAAC,QAAD,C;IAAxDC,c,YAAAA,c;IAAgBC,gB,YAAAA,gB;IAAkBC,U,YAAAA,U;;gBAEpBH,OAAO,CAAC,gBAAD,C;IAArBI,S,aAAAA,S;;gBACYJ,OAAO,CAAC,oBAAD,C;IAAnBK,O,aAAAA,O;;AAER,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;AAC3B,MAAIA,IAAI,KAAKC,SAAT,IAAsBD,IAAI,CAACE,MAAL,GAAc,CAAd,KAAoB,CAA9C,EAAiD;AAC/C,UAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;AACF,CAJD;;AAMA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,QAAkCC,OAAlC,EAA8C;AAAA,MAAzBC,SAAyB,QAArCV,SAAqC;AAC5D,MAAMW,GAAG,GAAGV,OAAO,CAACS,SAAD,EAAY,KAAZ,CAAnB;AACA,MAAME,MAAM,GAAGf,cAAc,CAACW,GAAD,EAAMG,GAAN,EAAWE,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgB,IAAhB,EAAsB,KAAtB,CAAX,CAA7B;AAEA,SAAO;AAAEC,IAAAA,OAAO,EAAEF,MAAM,CAACG,MAAP,CAAc,CAACJ,MAAM,CAACK,MAAP,CAAcR,OAAd,CAAD,EAAyBG,MAAM,CAACM,KAAP,EAAzB,CAAd;AAAX,GAAP;AACD,CALD;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACX,GAAD,SAAkCC,OAAlC,EAA8C;AAAA,MAAzBC,SAAyB,SAArCV,SAAqC;AAC9D,MAAMW,GAAG,GAAGV,OAAO,CAACS,SAAD,EAAY,KAAZ,CAAnB;AACAR,EAAAA,UAAU,CAACO,OAAD,CAAV;AACA,MAAMG,MAAM,GAAGd,gBAAgB,CAACU,GAAD,EAAMG,GAAN,EAAWE,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgB,IAAhB,EAAsB,KAAtB,CAAX,CAA/B;AAEA,SAAOD,MAAM,CAACG,MAAP,CAAc,CAACJ,MAAM,CAACK,MAAP,CAAcR,OAAd,CAAD,EAAyBG,MAAM,CAACM,KAAP,EAAzB,CAAd,CAAP;AACD,CAND;;AAQAE,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B,GAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+BC,OAA/B,CAAuC,UAACC,MAAD,EAAY;AACjD,QAAMC,IAAI,GAAGC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAArB;AACA,QAAMpB,GAAG,gBAASkB,IAAT,UAAT;;AACA,QAAI3B,UAAU,GAAG8B,QAAb,CAAsBrB,GAAtB,CAAJ,EAAgC;AAC9Bc,MAAAA,GAAG,CAACQ,oBAAJ,CAAyBC,GAAzB,CAA6BN,MAA7B,EAAqClB,OAAO,CAACyB,IAAR,CAAa5B,SAAb,EAAwBI,GAAxB,CAArC;AACAc,MAAAA,GAAG,CAACW,oBAAJ,CAAyBF,GAAzB,CAA6BN,MAA7B,EAAqCN,SAAS,CAACa,IAAV,CAAe5B,SAAf,EAA0BI,GAA1B,CAArC;;AACAe,MAAAA,GAAG,CAACW,GAAJ,CAAQ3B,OAAR,CAAgBkB,MAAhB,IAA0BF,GAAG,CAACW,GAAJ,CAAQf,SAAR,CAAkBM,MAAlB,IAA4B,UAAAd,GAAG;AAAA,eAAI,CAACA,GAAG,CAACwB,GAAJ,KAAY,KAAZ,IAAqBxB,GAAG,CAACwB,GAAJ,KAAY/B,SAAlC,KAAgDO,GAAG,CAACN,MAAJ,KAAeqB,IAAnE;AAAA,OAAzD;AACD;AACF,GARD;AASD,CAVD","sourcesContent":["const { createCipheriv, createDecipheriv, getCiphers } = require('crypto')\n\nconst { KEYOBJECT } = require('../help/consts')\nconst { asInput } = require('../help/key_object')\n\nconst checkInput = (data) => {\n  if (data !== undefined && data.length % 8 !== 0) {\n    throw new Error('invalid data length')\n  }\n}\n\nconst wrapKey = (alg, { [KEYOBJECT]: keyObject }, payload) => {\n  const key = asInput(keyObject, false)\n  const cipher = createCipheriv(alg, key, Buffer.alloc(8, 'a6', 'hex'))\n\n  return { wrapped: Buffer.concat([cipher.update(payload), cipher.final()]) }\n}\n\nconst unwrapKey = (alg, { [KEYOBJECT]: keyObject }, payload) => {\n  const key = asInput(keyObject, false)\n  checkInput(payload)\n  const cipher = createDecipheriv(alg, key, Buffer.alloc(8, 'a6', 'hex'))\n\n  return Buffer.concat([cipher.update(payload), cipher.final()])\n}\n\nmodule.exports = (JWA, JWK) => {\n  ['A128KW', 'A192KW', 'A256KW'].forEach((jwaAlg) => {\n    const size = parseInt(jwaAlg.substr(1, 3), 10)\n    const alg = `aes${size}-wrap`\n    if (getCiphers().includes(alg)) {\n      JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, alg))\n      JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, alg))\n      JWK.oct.wrapKey[jwaAlg] = JWK.oct.unwrapKey[jwaAlg] = key => (key.use === 'enc' || key.use === undefined) && key.length === size\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}