{"ast":null,"code":"import _regeneratorRuntime from\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";import{useAuth}from\"../components/context/AuthContext\";import{storage}from\"../firebase\";export var useStorage=function useStorage(file){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),progress=_useState2[0],setProgress=_useState2[1];var _useAuth=useAuth(),currentUser=_useAuth.currentUser;var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),url=_useState6[0],setUrl=_useState6[1];// runs every time the file value changes\nuseEffect(function(){if(file){// storage ref\nvar storageRef=storage.ref(\"users/\".concat(currentUser.email,\"/\").concat(file.name));storageRef.put(file).on(\"state_changed\",function(snap){// track the upload progress\nvar percentage=Math.round(snap.bytesTransferred/snap.totalBytes*100);setProgress(percentage);},function(err){setError(err);},/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var downloadUrl;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return storageRef.getDownloadURL();case 2:downloadUrl=_context.sent;// save the url to local state\nsetUrl(downloadUrl);case 4:case\"end\":return _context.stop();}}},_callee);})));}},[file]);return{progress:progress,url:url,error:error};};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/src/utils/useStorage.js"],"names":["useState","useEffect","useAuth","storage","useStorage","file","progress","setProgress","currentUser","error","setError","url","setUrl","storageRef","ref","email","name","put","on","snap","percentage","Math","round","bytesTransferred","totalBytes","err","getDownloadURL","downloadUrl"],"mappings":"8fAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,OAAT,KAAwB,mCAAxB,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,IAAD,CAAU,eACAL,QAAQ,CAAC,CAAD,CADR,wCACzBM,QADyB,eACfC,WADe,4BAEVL,OAAO,EAFG,CAEzBM,WAFyB,UAEzBA,WAFyB,gBAGNR,QAAQ,CAAC,IAAD,CAHF,yCAGzBS,KAHyB,eAGlBC,QAHkB,8BAIVV,QAAQ,CAAC,IAAD,CAJE,yCAIzBW,GAJyB,eAIpBC,MAJoB,eAMhC;AACAX,SAAS,CAAC,UAAM,CACZ,GAAII,IAAJ,CAAU,CACN;AACA,GAAMQ,CAAAA,UAAU,CAAGV,OAAO,CAACW,GAAR,iBAAqBN,WAAW,CAACO,KAAjC,aAA0CV,IAAI,CAACW,IAA/C,EAAnB,CACIH,UAAU,CAACI,GAAX,CAAeZ,IAAf,EAAqBa,EAArB,CACA,eADA,CAEA,SAACC,IAAD,CAAU,CACN;AACA,GAAIC,CAAAA,UAAU,CACVC,IAAI,CAACC,KAAL,CACCH,IAAI,CAACI,gBAAL,CAAwBJ,IAAI,CAACK,UAA9B,CAA4C,GAD5C,CADJ,CAIAjB,WAAW,CAACa,UAAD,CAAX,CACH,CATD,CAUA,SAACK,GAAD,CAAS,CACLf,QAAQ,CAACe,GAAD,CAAR,CACH,CAZD,sEAaA,yKAE8BZ,CAAAA,UAAU,CAACa,cAAX,EAF9B,QAEUC,WAFV,eAII;AACAf,MAAM,CAACe,WAAD,CAAN,CALJ,sDAbA,IAqBP,CACJ,CA1BQ,CA0BN,CAACtB,IAAD,CA1BM,CAAT,CA4BA,MAAO,CAAEC,QAAQ,CAARA,QAAF,CAAYK,GAAG,CAAHA,GAAZ,CAAiBF,KAAK,CAALA,KAAjB,CAAP,CACH,CApCM","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useAuth } from \"../components/context/AuthContext\";\nimport { storage } from \"../firebase\";\n\nexport const useStorage = (file) => {\n    const [progress, setProgress] = useState(0);\n    const {currentUser} = useAuth()\n    const [error, setError] = useState(null);\n    const [url, setUrl] = useState(null);\n\n    // runs every time the file value changes\n    useEffect(() => {\n        if (file) {\n            // storage ref\n            const storageRef = storage.ref(`users/${currentUser.email}/${file.name}`);        \n                storageRef.put(file).on(\n                \"state_changed\",\n                (snap) => {\n                    // track the upload progress\n                    let percentage =\n                        Math.round(\n                        (snap.bytesTransferred / snap.totalBytes) * 100\n                    );\n                    setProgress(percentage);\n                },\n                (err) => {\n                    setError(err);\n                },\n                async () => {\n                    // get the public download img url\n                    const downloadUrl = await storageRef.getDownloadURL();\n\n                    // save the url to local state\n                    setUrl(downloadUrl);\n                }\n            );\n        }\n    }, [file]);\n\n    return { progress, url, error };\n};\n"]},"metadata":{},"sourceType":"module"}