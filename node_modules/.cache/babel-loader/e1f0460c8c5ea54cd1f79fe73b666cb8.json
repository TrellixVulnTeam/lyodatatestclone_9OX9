{"ast":null,"code":"var _jsxFileName = \"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/src/TestGraph/GraphSelect.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Chartjs from \"chart.js\";\nimport { db } from \"../firebase\";\nimport { firebaseLooper } from \"../utils/tools\";\nimport { Button, Container } from \"@material-ui/core\";\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chartConfig = {\n  type: \"line\",\n  data: {\n    labels: [],\n    datasets: [{\n      fill: 'false',\n      label: \"Temprature\",\n      yAxisID: \"y-axis-0\",\n      data: [],\n      borderWidth: 1,\n      lineTension: 0.1,\n      backgroundColor: 'yellow',\n      borderColor: 'yellow',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'yellow',\n      pointBackgroundColor: 'yellow',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: '#ff7a00',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }, {\n      fill: 'false',\n      yAxisID: \"y-axis-1\",\n      label: \"Pressure\",\n      data: [],\n      lineTension: 0.1,\n      backgroundColor: 'orangered',\n      borderColor: 'orangered',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'orangered',\n      pointBackgroundColor: 'orangered',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: '#ff7a00',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      borderWidth: 1\n    }, {\n      yAxisID: \"y2\",\n      label: 'RealTime',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'green',\n      borderColor: 'green',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'green',\n      pointBackgroundColor: 'green',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'green',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: []\n    }]\n  },\n  options: {\n    legend: {\n      position: 'bottom',\n      labels: {\n        fontColor: 'white'\n      }\n    },\n    title: {\n      display: true,\n      text: \"Select/Change The Required to Showcase Data\"\n    },\n    tooltips: {\n      mode: 'label'\n    },\n    interaction: {\n      mode: 'index',\n      intersect: false\n    },\n    responsive: true,\n    scales: {\n      xAxes: [{\n        display: true,\n        stacked: false,\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 15,\n          fontColor: 'white',\n          fontSize: 10,\n          animation: {\n            easing: 'linear'\n          }\n        }\n      }],\n      ticks: {\n        major: {\n          fontStyle: 'bold',\n          fontColor: '#FF0000'\n        }\n      },\n      yAxes: [{\n        stacked: true,\n        position: \"left\",\n        id: \"y-axis-0\",\n        title: 'Temp Set Point',\n        ticks: {\n          steps: 10,\n          max: 50,\n          fontColor: 'white',\n          fontSize: 14,\n          min: -100\n        }\n      }, {\n        stacked: false,\n        display: false,\n        position: \"left\",\n        id: \"y2\",\n        title: 'Realtime',\n        ticks: {\n          steps: 10,\n          max: 50,\n          fontColor: 'white',\n          fontSize: 14,\n          min: -100\n        }\n      }, {\n        stacked: false,\n        position: \"right\",\n        id: \"y-axis-1\",\n        fontColor: 'white',\n        ticks: {\n          steps: 100,\n          fontColor: 'white',\n          fontSize: 14\n        }\n      } // {\n      //   stacked: false,\n      //   display: false,\n      //   position: \"right\",\n      //   id: \"y3\",\n      //   ticks: {\n      //     autoSkip: true,\n      //     maxTicksLimit: 12,\n      //     fontColor: 'white',\n      //     fontSize: 14\n      //   },\n      // },\n      ]\n    }\n  }\n};\n\nconst GraphSelect = ({\n  realData,\n  rData\n}) => {\n  _s();\n\n  let time = [];\n  let temp = [];\n  let stillTime = [];\n  let pressure = [];\n  let delta = [];\n  let deltaP = [];\n  const [stillTimeData, setStillTimeData] = useState([]);\n  const [deltaTemp, setDeltaTemp] = useState([]);\n  const [deltaPressure, setDeltaP] = useState([]);\n  const [tempData, setTempData] = useState([]);\n  const [pressureData, setPressureData] = useState([]);\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer]);\n\n  const updateDataset = (time, newData, pressure) => {\n    chartInstance.data.labels = time;\n    chartInstance.data.datasets[0].data = newData;\n    chartInstance.data.datasets[1].data = pressure;\n    chartInstance.data.datasets[2].data = realData;\n    chartInstance.update();\n  };\n\n  const onButtonClick = e => {\n    var x, y, z;\n    var randomTemp, randomPressure;\n    let currTemp = 0;\n    let currPressure = 800;\n    let currTime = 0;\n\n    for (let index = 0; index < rData.length; index++) {\n      x = (rData[index].temp1 - currTemp) / rData[index].time1;\n      y = (rData[index].pressure - currPressure) / rData[index].time1;\n\n      for (let j = 0; j < rData[index].time1; j++) {\n        currTime++;\n        currTemp = currTemp + x;\n        randomTemp = currTemp + Math.floor(Math.random() * x);\n        currPressure = currPressure + y;\n        randomPressure = currPressure + Math.floor(Math.random() * y);\n        time.push(currTime);\n        temp.push(currTemp);\n        pressure.push(currPressure);\n        delta.push(randomTemp);\n        deltaP.push(randomPressure);\n      }\n\n      for (let k = 0; k < rData[index].time2; k++) {\n        currTime++;\n        time.push(currTime);\n        delta.push(randomTemp + Math.random() * x);\n        deltaP.push(randomPressure + Math.random() * y);\n        temp.push(currTemp);\n        pressure.push(currPressure);\n      }\n    }\n\n    setTempData(temp);\n    setStillTimeData(stillTime);\n    setPressureData(pressure);\n    setDeltaP(deltaP);\n    setDeltaTemp(delta);\n    updateDataset(time, temp, pressure);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      marginTop: '10px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(TimelineIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 29\n        }, this),\n        style: {\n          color: 'white',\n          backgroundImage: 'linear-gradient(to right top, #6b75d1, #6373d3, #5a70d6, #4f6ed8, #426cdb, #3d66d1, #3960c7, #345abd, #364fa5, #35448e, #323a78, #2d3063)',\n          marginBottom: '7px'\n        },\n        onClick: onButtonClick,\n        children: \"Set Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      style: {\n        background: 'black'\n      },\n      ref: chartContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GraphSelect, \"khmOD7+RxY1S3y1mQxo9463LRk4=\");\n\n_c = GraphSelect;\nexport default GraphSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphSelect\");","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/src/TestGraph/GraphSelect.jsx"],"names":["React","useEffect","useRef","useState","Chartjs","db","firebaseLooper","Button","Container","TimelineIcon","chartConfig","type","data","labels","datasets","fill","label","yAxisID","borderWidth","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","legend","position","fontColor","title","display","text","tooltips","mode","interaction","intersect","responsive","scales","xAxes","stacked","ticks","autoSkip","maxTicksLimit","fontSize","animation","easing","major","fontStyle","yAxes","id","steps","max","min","GraphSelect","realData","rData","time","temp","stillTime","pressure","delta","deltaP","stillTimeData","setStillTimeData","deltaTemp","setDeltaTemp","deltaPressure","setDeltaP","tempData","setTempData","pressureData","setPressureData","chartContainer","chartInstance","setChartInstance","current","newChartInstance","updateDataset","newData","update","onButtonClick","e","x","y","z","randomTemp","randomPressure","currTemp","currPressure","currTime","index","length","temp1","time1","j","Math","floor","random","push","k","time2","marginTop","color","backgroundImage","marginBottom","background"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,mBAAlC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;AAGA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,MADY;AAElBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,EADJ;AAGJC,IAAAA,QAAQ,EAAE,CACR;AACIC,MAAAA,IAAI,EAAE,OADV;AAEEC,MAAAA,KAAK,EAAE,YAFT;AAGGC,MAAAA,OAAO,EAAE,UAHZ;AAIEL,MAAAA,IAAI,EAAE,EAJR;AAKEM,MAAAA,WAAW,EAAE,CALf;AAMEC,MAAAA,WAAW,EAAE,GANf;AAOAC,MAAAA,eAAe,EAAE,QAPjB;AAQAC,MAAAA,WAAW,EAAE,QARb;AASAC,MAAAA,cAAc,EAAE,MAThB;AAUAC,MAAAA,UAAU,EAAE,EAVZ;AAWAC,MAAAA,gBAAgB,EAAE,GAXlB;AAYAC,MAAAA,eAAe,EAAE,OAZjB;AAaAC,MAAAA,gBAAgB,EAAE,QAblB;AAcAC,MAAAA,oBAAoB,EAAE,QAdtB;AAeAC,MAAAA,gBAAgB,EAAE,CAflB;AAgBAC,MAAAA,gBAAgB,EAAE,CAhBlB;AAiBAC,MAAAA,yBAAyB,EAAE,SAjB3B;AAkBAC,MAAAA,qBAAqB,EAAE,SAlBvB;AAmBAC,MAAAA,qBAAqB,EAAE,CAnBvB;AAoBAC,MAAAA,WAAW,EAAE,CApBb;AAqBAC,MAAAA,cAAc,EAAE;AArBhB,KADQ,EAwBN;AAEEnB,MAAAA,IAAI,EAAE,OAFR;AAGGE,MAAAA,OAAO,EAAE,UAHZ;AAIAD,MAAAA,KAAK,EAAE,UAJP;AAKAJ,MAAAA,IAAI,EAAE,EALN;AAMAO,MAAAA,WAAW,EAAE,GANb;AAOFC,MAAAA,eAAe,EAAE,WAPf;AAQFC,MAAAA,WAAW,EAAE,WARX;AASFC,MAAAA,cAAc,EAAE,MATd;AAUFC,MAAAA,UAAU,EAAE,EAVV;AAWFC,MAAAA,gBAAgB,EAAE,GAXhB;AAYFC,MAAAA,eAAe,EAAE,OAZf;AAaFC,MAAAA,gBAAgB,EAAE,WAbhB;AAcFC,MAAAA,oBAAoB,EAAE,WAdpB;AAeFC,MAAAA,gBAAgB,EAAE,CAfhB;AAgBFC,MAAAA,gBAAgB,EAAE,CAhBhB;AAiBFC,MAAAA,yBAAyB,EAAE,SAjBzB;AAkBFC,MAAAA,qBAAqB,EAAE,SAlBrB;AAmBFC,MAAAA,qBAAqB,EAAE,CAnBrB;AAoBFC,MAAAA,WAAW,EAAE,CApBX;AAqBFC,MAAAA,cAAc,EAAE,EArBd;AAsBAhB,MAAAA,WAAW,EAAE;AAtBb,KAxBM,EAgDR;AACCD,MAAAA,OAAO,EAAE,IADV;AAGAD,MAAAA,KAAK,EAAE,UAHP;AAIAD,MAAAA,IAAI,EAAE,KAJN;AAKAI,MAAAA,WAAW,EAAE,GALb;AAMAC,MAAAA,eAAe,EAAE,OANjB;AAOAC,MAAAA,WAAW,EAAE,OAPb;AAQAC,MAAAA,cAAc,EAAE,MARhB;AASAC,MAAAA,UAAU,EAAE,EATZ;AAUAC,MAAAA,gBAAgB,EAAE,GAVlB;AAWAC,MAAAA,eAAe,EAAE,OAXjB;AAYAC,MAAAA,gBAAgB,EAAE,OAZlB;AAaAC,MAAAA,oBAAoB,EAAE,OAbtB;AAcAC,MAAAA,gBAAgB,EAAE,CAdlB;AAeAC,MAAAA,gBAAgB,EAAE,CAflB;AAgBAC,MAAAA,yBAAyB,EAAE,OAhB3B;AAiBAC,MAAAA,qBAAqB,EAAE,SAjBvB;AAkBAC,MAAAA,qBAAqB,EAAE,CAlBvB;AAmBAC,MAAAA,WAAW,EAAE,CAnBb;AAoBAC,MAAAA,cAAc,EAAE,EApBhB;AAqBAtB,MAAAA,IAAI,EAAE;AArBN,KAhDQ;AAHN,GAFY;AAgFlBuB,EAAAA,OAAO,EAAE;AACNC,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAE,QADJ;AAELxB,MAAAA,MAAM,EAAE;AACEyB,QAAAA,SAAS,EAAE;AADb;AAFH,KADF;AAOPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,IAAI,EAAE;AAFD,KAPA;AAYPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,IAAI,EAAE;AADE,KAZH;AAePC,IAAAA,WAAW,EAAE;AACXD,MAAAA,IAAI,EAAE,OADK;AAEXE,MAAAA,SAAS,EAAE;AAFA,KAfN;AAmBPC,IAAAA,UAAU,EAAE,IAnBL;AAoBPC,IAAAA,MAAM,EAAE;AAENC,MAAAA,KAAK,EAAE,CAAC;AACNR,QAAAA,OAAO,EAAE,IADH;AAENS,QAAAA,OAAO,EAAE,KAFH;AAGNC,QAAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,IADL;AAELC,UAAAA,aAAa,EAAE,EAFV;AAGLd,UAAAA,SAAS,EAAE,OAHN;AAILe,UAAAA,QAAQ,EAAE,EAJL;AAKLC,UAAAA,SAAS,EAAE;AAETC,YAAAA,MAAM,EAAE;AAFC;AALN;AAHD,OAAD,CAFD;AAiBLL,MAAAA,KAAK,EAAE;AACFM,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE,MADN;AAELnB,UAAAA,SAAS,EAAE;AAFN;AADL,OAjBF;AAuBNoB,MAAAA,KAAK,EAAE,CAAC;AACNT,QAAAA,OAAO,EAAE,IADH;AAENZ,QAAAA,QAAQ,EAAE,MAFJ;AAGNsB,QAAAA,EAAE,EAAE,UAHE;AAINpB,QAAAA,KAAK,EAAE,gBAJD;AAKNW,QAAAA,KAAK,EAAE;AAELU,UAAAA,KAAK,EAAE,EAFF;AAGLC,UAAAA,GAAG,EAAE,EAHA;AAILvB,UAAAA,SAAS,EAAE,OAJN;AAKLe,UAAAA,QAAQ,EAAE,EALL;AAMJS,UAAAA,GAAG,EAAE,CAAC;AANF;AALD,OAAD,EAgBN;AACCb,QAAAA,OAAO,EAAE,KADV;AAECT,QAAAA,OAAO,EAAE,KAFV;AAGCH,QAAAA,QAAQ,EAAE,MAHX;AAICsB,QAAAA,EAAE,EAAE,IAJL;AAKCpB,QAAAA,KAAK,EAAE,UALR;AAMCW,QAAAA,KAAK,EAAE;AAELU,UAAAA,KAAK,EAAE,EAFF;AAGPC,UAAAA,GAAG,EAAE,EAHE;AAILvB,UAAAA,SAAS,EAAE,OAJN;AAKLe,UAAAA,QAAQ,EAAE,EALL;AAMLS,UAAAA,GAAG,EAAE,CAAC;AAND;AANR,OAhBM,EAiCP;AACEb,QAAAA,OAAO,EAAE,KADX;AAEEZ,QAAAA,QAAQ,EAAE,OAFZ;AAGEsB,QAAAA,EAAE,EAAE,UAHN;AAIErB,QAAAA,SAAS,EAAE,OAJb;AAKEY,QAAAA,KAAK,EAAE;AACNU,UAAAA,KAAK,EAAE,GADD;AAGLtB,UAAAA,SAAS,EAAE,OAHN;AAILe,UAAAA,QAAQ,EAAE;AAJL;AALT,OAjCO,CAgDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AA7DO;AAvBD;AApBD;AAhFS,CAApB;;AA+LA,MAAMU,WAAW,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAUC,EAAAA;AAAV,CAAD,KAAsB;AAAA;;AACrC,MAAIC,IAAI,GAAG,EAAX;AACH,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,KAAK,GAAI,EAAb;AACA,MAAIC,MAAM,GAAE,EAAZ;AAEA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCtE,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACuE,SAAD,EAAYC,YAAZ,IAA4BxE,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACyE,aAAD,EAAgBC,SAAhB,IAA6B1E,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAAC2E,QAAD,EAAWC,WAAX,IAA0B5E,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC6E,YAAD,EAAeC,eAAf,IAAkC9E,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM+E,cAAc,GAAGhF,MAAM,CAAC,IAAD,CAA7B;AACA,QAAM,CAACiF,aAAD,EAAgBC,gBAAhB,IAAoCjF,QAAQ,CAAC,IAAD,CAAlD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AAEd,QAAIiF,cAAc,IAAIA,cAAc,CAACG,OAArC,EAA8C;AAC5C,YAAMC,gBAAgB,GAAG,IAAIlF,OAAJ,CAAY8E,cAAc,CAACG,OAA3B,EAAoC3E,WAApC,CAAzB;AACA0E,MAAAA,gBAAgB,CAACE,gBAAD,CAAhB;AACD;AACF,GANQ,EAMN,CAACJ,cAAD,CANM,CAAT;;AAQA,QAAMK,aAAa,GAAG,CAACrB,IAAD,EAAOsB,OAAP,EAAgBnB,QAAhB,KAA6B;AAC/Cc,IAAAA,aAAa,CAACvE,IAAd,CAAmBC,MAAnB,GAA4BqD,IAA5B;AACFiB,IAAAA,aAAa,CAACvE,IAAd,CAAmBE,QAAnB,CAA4B,CAA5B,EAA+BF,IAA/B,GAAsC4E,OAAtC;AACAL,IAAAA,aAAa,CAACvE,IAAd,CAAmBE,QAAnB,CAA4B,CAA5B,EAA+BF,IAA/B,GAAsCyD,QAAtC;AACCc,IAAAA,aAAa,CAACvE,IAAd,CAAmBE,QAAnB,CAA4B,CAA5B,EAA+BF,IAA/B,GAAsCoD,QAAtC;AACDmB,IAAAA,aAAa,CAACM,MAAd;AACD,GAND;;AAQA,QAAMC,aAAa,GAAIC,CAAD,IAAO;AACzB,QAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV;AACA,QAAIC,UAAJ,EAAgBC,cAAhB;AACA,QAAIC,QAAQ,GAAC,CAAb;AAAgB,QAAIC,YAAY,GAAE,GAAlB;AAAuB,QAAIC,QAAQ,GAAG,CAAf;;AACzC,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGnC,KAAK,CAACoC,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;AACjDR,MAAAA,CAAC,GAAG,CAAC3B,KAAK,CAACmC,KAAD,CAAL,CAAaE,KAAb,GAAqBL,QAAtB,IAAgChC,KAAK,CAACmC,KAAD,CAAL,CAAaG,KAAjD;AACAV,MAAAA,CAAC,GAAG,CAAC5B,KAAK,CAACmC,KAAD,CAAL,CAAa/B,QAAb,GAAwB6B,YAAzB,IAAuCjC,KAAK,CAACmC,KAAD,CAAL,CAAaG,KAAxD;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvC,KAAK,CAACmC,KAAD,CAAL,CAAaG,KAAjC,EAAyCC,CAAC,EAA1C,EAA8C;AAC1CL,QAAAA,QAAQ;AACRF,QAAAA,QAAQ,GAAGA,QAAQ,GAAGL,CAAtB;AACAG,QAAAA,UAAU,GAAGE,QAAQ,GAAGQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBf,CAA3B,CAAxB;AACAM,QAAAA,YAAY,GAAGA,YAAY,GAAGL,CAA9B;AACCG,QAAAA,cAAc,GAAGE,YAAY,GAAEO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBd,CAA3B,CAA/B;AACD3B,QAAAA,IAAI,CAAC0C,IAAL,CAAUT,QAAV;AACAhC,QAAAA,IAAI,CAACyC,IAAL,CAAUX,QAAV;AACA5B,QAAAA,QAAQ,CAACuC,IAAT,CAAcV,YAAd;AACA5B,QAAAA,KAAK,CAACsC,IAAN,CAAWb,UAAX;AACAxB,QAAAA,MAAM,CAACqC,IAAP,CAAYZ,cAAZ;AAEH;;AAED,WAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5C,KAAK,CAACmC,KAAD,CAAL,CAAaU,KAAjC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCV,QAAAA,QAAQ;AACRjC,QAAAA,IAAI,CAAC0C,IAAL,CAAUT,QAAV;AACA7B,QAAAA,KAAK,CAACsC,IAAN,CAAWb,UAAU,GAAGU,IAAI,CAACE,MAAL,KAAgBf,CAAxC;AACArB,QAAAA,MAAM,CAACqC,IAAP,CAAaZ,cAAc,GAAGS,IAAI,CAACE,MAAL,KAAcd,CAA5C;AACA1B,QAAAA,IAAI,CAACyC,IAAL,CAAUX,QAAV;AACA5B,QAAAA,QAAQ,CAACuC,IAAT,CAAcV,YAAd;AAIH;AACF;;AAEHnB,IAAAA,WAAW,CAACZ,IAAD,CAAX;AACAM,IAAAA,gBAAgB,CAACL,SAAD,CAAhB;AACAa,IAAAA,eAAe,CAACZ,QAAD,CAAf;AACAQ,IAAAA,SAAS,CAACN,MAAD,CAAT;AACAI,IAAAA,YAAY,CAACL,KAAD,CAAZ;AAGEiB,IAAAA,aAAa,CAACrB,IAAD,EAAOC,IAAP,EAAaE,QAAb,CAAb;AACD,GA3CD;;AA6CA,sBACE,QAAC,SAAD;AAAY,IAAA,KAAK,EAAE;AAAC0C,MAAAA,SAAS,EAAE;AAAZ,KAAnB;AAAA,4BAEG;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,SAAS,eAAE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,gBAAnB;AAAoC,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAC,OAAP;AAAgBC,UAAAA,eAAe,EAAE,2IAAjC;AAA8KC,UAAAA,YAAY,EAAE;AAA5L,SAA3C;AAAgP,QAAA,OAAO,EAAExB,aAAzP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFH,eAOE;AAAQ,MAAA,KAAK,EAAE;AAACyB,QAAAA,UAAU,EAAE;AAAb,OAAf;AAAsC,MAAA,GAAG,EAAEjC;AAA3C;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAxFD;;GAAMnB,W;;KAAAA,W;AA0FN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Chartjs from \"chart.js\";\nimport { db } from \"../firebase\";\nimport { firebaseLooper } from \"../utils/tools\";\nimport { Button, Container } from \"@material-ui/core\";\nimport TimelineIcon from '@material-ui/icons/Timeline';\n\n\nconst chartConfig = {\n  type: \"line\",\n  data: {\n    labels: [],\n\n    datasets: [\n      {\n          fill: 'false',\n        label: \"Temprature\",\n         yAxisID: \"y-axis-0\",\n        data: [],\n        borderWidth: 1,\n        lineTension: 0.1,\n      backgroundColor: 'yellow',\n      borderColor: 'yellow',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'yellow',\n      pointBackgroundColor: 'yellow',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: '#ff7a00',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      },\n        {\n       \n          fill: 'false',\n           yAxisID: \"y-axis-1\",\n        label: \"Pressure\",\n        data: [],\n        lineTension: 0.1,\n      backgroundColor: 'orangered',\n      borderColor: 'orangered',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'orangered',\n      pointBackgroundColor: 'orangered',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: '#ff7a00',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n        borderWidth: 1\n      },\n      {\n       yAxisID: \"y2\",\n      \n      label: 'RealTime',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'green',\n      borderColor: 'green',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'green',\n      pointBackgroundColor: 'green',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'green',\n      pointHoverBorderColor: '#7868e6',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: []\n    },\n     \n\n    ]\n  },\n  options: {\n     legend: {\n       position: 'bottom',\n        labels: {\n                  fontColor: 'white'\n         }\n              },\n    title: {\n      display: true,\n      text: \"Select/Change The Required to Showcase Data\"\n    },\n    \n    tooltips: {\n      mode: 'label'\n    },\n    interaction: {\n      mode: 'index',\n      intersect: false,\n    },\n    responsive: true,\n    scales: {\n     \n      xAxes: [{\n        display: true,\n        stacked: false,\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 15,\n          fontColor: 'white',\n          fontSize: 10,\n          animation: {\n            \n            easing: 'linear'\n          }\n        }\n        \n      }],\n       ticks: {\n            major: {\n              fontStyle: 'bold',\n              fontColor: '#FF0000'\n            }\n          },\n      yAxes: [{\n        stacked: true,\n        position: \"left\",\n        id: \"y-axis-0\",\n        title: 'Temp Set Point',\n        ticks: {\n         \n          steps: 10,\n          max: 50,\n          fontColor: 'white',\n          fontSize: 14,\n           min: -100\n        },\n      \n         \n      },\n       {\n        stacked: false,\n        display: false,\n        position: \"left\",\n        id: \"y2\",\n        title: 'Realtime',\n        ticks: {\n         \n          steps: 10,\n        max: 50,\n          fontColor: 'white',\n          fontSize: 14,\n          min: -100\n        },\n      \n         \n      },\n      {\n        stacked: false,\n        position: \"right\",\n        id: \"y-axis-1\",\n        fontColor: 'white',\n        ticks: {\n         steps: 100,\n          \n          fontColor: 'white',\n          fontSize: 14\n        },\n        \n        \n      },\n    \n      // {\n      //   stacked: false,\n      //   display: false,\n      //   position: \"right\",\n      //   id: \"y3\",\n      //   ticks: {\n      //     autoSkip: true,\n      //     maxTicksLimit: 12,\n      //     fontColor: 'white',\n      //     fontSize: 14\n      //   },\n      \n         \n      // },\n      \n     ]\n    } \n  }\n};\n\nconst GraphSelect = ({realData,rData}) => {\n     let time = []\n  let temp = []\n  let stillTime = []\n  let pressure = []\n  let delta =  []\n  let deltaP =[]\n \n  const [stillTimeData, setStillTimeData] = useState([])\n  const [deltaTemp, setDeltaTemp] = useState([])\n  const [deltaPressure, setDeltaP] = useState([])\n  const [tempData, setTempData] = useState([])\n  const [pressureData, setPressureData] = useState([])\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n\n  useEffect(() => {\n    \n    if (chartContainer && chartContainer.current) {\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer]);\n\n  const updateDataset = (time, newData, pressure) => {\n      chartInstance.data.labels = time\n    chartInstance.data.datasets[0].data = newData;\n    chartInstance.data.datasets[1].data = pressure;\n     chartInstance.data.datasets[2].data = realData;\n    chartInstance.update();\n  };\n\n  const onButtonClick = (e) => {\n      var x, y, z;\n      var randomTemp, randomPressure;\n      let currTemp=0; let currPressure= 800; let currTime = 0;\n    for (let index = 0; index < rData.length; index++) {\n      x = (rData[index].temp1 - currTemp)/rData[index].time1\n      y = (rData[index].pressure - currPressure)/rData[index].time1\n     \n      for (let j = 0; j < rData[index].time1 ; j++) {\n          currTime++;\n          currTemp = currTemp + x;\n          randomTemp = currTemp + Math.floor(Math.random() * x)\n          currPressure = currPressure + y\n           randomPressure = currPressure+ Math.floor(Math.random() * y)\n          time.push(currTime)\n          temp.push(currTemp)\n          pressure.push(currPressure)\n          delta.push(randomTemp)\n          deltaP.push(randomPressure)\n          \n      }\n\n      for (let k = 0; k < rData[index].time2; k++) {\n          currTime++\n          time.push(currTime)\n          delta.push(randomTemp + Math.random() * x)\n          deltaP.push (randomPressure + Math.random()*y)\n          temp.push(currTemp)\n          pressure.push(currPressure)\n         \n         \n     \n      }\n    }\n \n  setTempData(temp)\n  setStillTimeData(stillTime)\n  setPressureData(pressure)\n  setDeltaP(deltaP)\n  setDeltaTemp(delta)\n\n    \n    updateDataset(time, temp, pressure);\n  };\n\n  return (\n    <Container  style={{marginTop: '10px'}}>\n       \n       <div>\n         <Button startIcon={<TimelineIcon/>} style={{color:'white', backgroundImage: 'linear-gradient(to right top, #6b75d1, #6373d3, #5a70d6, #4f6ed8, #426cdb, #3d66d1, #3960c7, #345abd, #364fa5, #35448e, #323a78, #2d3063)', marginBottom: '7px'}}  onClick={onButtonClick}>Set Graph</Button>\n     \n       </div>\n         \n      <canvas style={{background: 'black'}} ref={chartContainer} />\n    </Container>\n  );\n};\n\nexport default GraphSelect;"]},"metadata":{},"sourceType":"module"}