{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _toConsumableArray = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _require = require('crypto'),\n    generateKeyPairSync = _require.generateKeyPairSync,\n    async = _require.generateKeyPair;\n\nvar _require2 = require('util'),\n    promisify = _require2.promisify;\n\nvar _require3 = require('../../help/consts'),\n    THUMBPRINT_MATERIAL = _require3.THUMBPRINT_MATERIAL,\n    JWK_MEMBERS = _require3.JWK_MEMBERS,\n    PUBLIC_MEMBERS = _require3.PUBLIC_MEMBERS,\n    PRIVATE_MEMBERS = _require3.PRIVATE_MEMBERS,\n    KEY_MANAGEMENT_DECRYPT = _require3.KEY_MANAGEMENT_DECRYPT,\n    KEY_MANAGEMENT_ENCRYPT = _require3.KEY_MANAGEMENT_ENCRYPT;\n\nvar _require4 = require('../../registry'),\n    EC_CURVES = _require4.EC_CURVES;\n\nvar _require5 = require('../../help/runtime_support'),\n    keyObjectSupported = _require5.keyObjectSupported;\n\nvar _require6 = require('../../help/key_object'),\n    createPublicKey = _require6.createPublicKey,\n    createPrivateKey = _require6.createPrivateKey;\n\nvar errors = require('../../errors');\n\nvar Key = require('./base');\n\nvar generateKeyPair = promisify(async);\nvar EC_PUBLIC = new Set(['crv', 'x', 'y']);\nObject.freeze(EC_PUBLIC);\nvar EC_PRIVATE = new Set([].concat(_toConsumableArray(EC_PUBLIC), ['d']));\nObject.freeze(EC_PRIVATE); // Elliptic Curve Key Type\n\nvar ECKey = /*#__PURE__*/function (_Key) {\n  \"use strict\";\n\n  _inherits(ECKey, _Key);\n\n  var _super = _createSuper(ECKey);\n\n  function ECKey() {\n    var _this;\n\n    _classCallCheck(this, ECKey);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this[JWK_MEMBERS]();\n\n    Object.defineProperty(_assertThisInitialized(_this), 'kty', {\n      value: 'EC',\n      enumerable: true\n    });\n\n    if (!EC_CURVES.has(_this.crv)) {\n      throw new errors.JOSENotSupported('unsupported EC key curve');\n    }\n\n    return _this;\n  }\n\n  _createClass(ECKey, [{\n    key: THUMBPRINT_MATERIAL,\n    value: // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n    // JSON.stringify handling in V8\n    function value() {\n      return {\n        crv: this.crv,\n        kty: 'EC',\n        x: this.x,\n        y: this.y\n      };\n    }\n  }, {\n    key: KEY_MANAGEMENT_ENCRYPT,\n    value: function value() {\n      return this.algorithms('deriveKey');\n    }\n  }, {\n    key: KEY_MANAGEMENT_DECRYPT,\n    value: function value() {\n      if (this.public) {\n        return new Set();\n      }\n\n      return this.algorithms('deriveKey');\n    }\n  }], [{\n    key: PUBLIC_MEMBERS,\n    get: function get() {\n      return EC_PUBLIC;\n    }\n  }, {\n    key: PRIVATE_MEMBERS,\n    get: function get() {\n      return EC_PRIVATE;\n    }\n  }, {\n    key: \"generate\",\n    value: function () {\n      var _generate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var crv,\n            privat,\n            privateKey,\n            publicKey,\n            _yield$generateKeyPai,\n            _yield$generateKeyPai2,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                crv = _args.length > 0 && _args[0] !== undefined ? _args[0] : 'P-256';\n                privat = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n\n                if (EC_CURVES.has(crv)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new errors.JOSENotSupported(\"unsupported EC key curve: \".concat(crv));\n\n              case 4:\n                if (!keyObjectSupported) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 7;\n                return generateKeyPair('ec', {\n                  namedCurve: crv\n                });\n\n              case 7:\n                _yield$generateKeyPai = _context.sent;\n                privateKey = _yield$generateKeyPai.privateKey;\n                publicKey = _yield$generateKeyPai.publicKey;\n                return _context.abrupt(\"return\", privat ? privateKey : publicKey);\n\n              case 11:\n                _context.next = 13;\n                return generateKeyPair('ec', {\n                  namedCurve: crv,\n                  publicKeyEncoding: {\n                    type: 'spki',\n                    format: 'pem'\n                  },\n                  privateKeyEncoding: {\n                    type: 'pkcs8',\n                    format: 'pem'\n                  }\n                });\n\n              case 13:\n                _yield$generateKeyPai2 = _context.sent;\n                privateKey = _yield$generateKeyPai2.privateKey;\n                publicKey = _yield$generateKeyPai2.publicKey;\n\n                if (!privat) {\n                  _context.next = 20;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", createPrivateKey(privateKey));\n\n              case 20:\n                return _context.abrupt(\"return\", createPublicKey(publicKey));\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function generate() {\n        return _generate.apply(this, arguments);\n      }\n\n      return generate;\n    }()\n  }, {\n    key: \"generateSync\",\n    value: function generateSync() {\n      var crv = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'P-256';\n      var privat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!EC_CURVES.has(crv)) {\n        throw new errors.JOSENotSupported(\"unsupported EC key curve: \".concat(crv));\n      }\n\n      var privateKey, publicKey;\n\n      if (keyObjectSupported) {\n        var _generateKeyPairSync = generateKeyPairSync('ec', {\n          namedCurve: crv\n        });\n\n        privateKey = _generateKeyPairSync.privateKey;\n        publicKey = _generateKeyPairSync.publicKey;\n        return privat ? privateKey : publicKey;\n      }\n\n      var _generateKeyPairSync2 = generateKeyPairSync('ec', {\n        namedCurve: crv,\n        publicKeyEncoding: {\n          type: 'spki',\n          format: 'pem'\n        },\n        privateKeyEncoding: {\n          type: 'pkcs8',\n          format: 'pem'\n        }\n      });\n\n      privateKey = _generateKeyPairSync2.privateKey;\n      publicKey = _generateKeyPairSync2.publicKey;\n\n      if (privat) {\n        return createPrivateKey(privateKey);\n      } else {\n        return createPublicKey(publicKey);\n      }\n    }\n  }]);\n\n  return ECKey;\n}(Key);\n\nmodule.exports = ECKey;","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/jwk/key/ec.js"],"names":["require","generateKeyPairSync","async","generateKeyPair","promisify","THUMBPRINT_MATERIAL","JWK_MEMBERS","PUBLIC_MEMBERS","PRIVATE_MEMBERS","KEY_MANAGEMENT_DECRYPT","KEY_MANAGEMENT_ENCRYPT","EC_CURVES","keyObjectSupported","createPublicKey","createPrivateKey","errors","Key","EC_PUBLIC","Set","Object","freeze","EC_PRIVATE","ECKey","args","defineProperty","value","enumerable","has","crv","JOSENotSupported","kty","x","y","algorithms","public","privat","namedCurve","privateKey","publicKey","publicKeyEncoding","type","format","privateKeyEncoding","module","exports"],"mappings":"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","sourcesContent":["const { generateKeyPairSync, generateKeyPair: async } = require('crypto')\nconst { promisify } = require('util')\n\nconst {\n  THUMBPRINT_MATERIAL, JWK_MEMBERS, PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS, KEY_MANAGEMENT_DECRYPT, KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts')\nconst { EC_CURVES } = require('../../registry')\nconst { keyObjectSupported } = require('../../help/runtime_support')\nconst { createPublicKey, createPrivateKey } = require('../../help/key_object')\n\nconst errors = require('../../errors')\n\nconst Key = require('./base')\n\nconst generateKeyPair = promisify(async)\n\nconst EC_PUBLIC = new Set(['crv', 'x', 'y'])\nObject.freeze(EC_PUBLIC)\nconst EC_PRIVATE = new Set([...EC_PUBLIC, 'd'])\nObject.freeze(EC_PRIVATE)\n\n// Elliptic Curve Key Type\nclass ECKey extends Key {\n  constructor (...args) {\n    super(...args)\n    this[JWK_MEMBERS]()\n    Object.defineProperty(this, 'kty', { value: 'EC', enumerable: true })\n    if (!EC_CURVES.has(this.crv)) {\n      throw new errors.JOSENotSupported('unsupported EC key curve')\n    }\n  }\n\n  static get [PUBLIC_MEMBERS] () {\n    return EC_PUBLIC\n  }\n\n  static get [PRIVATE_MEMBERS] () {\n    return EC_PRIVATE\n  }\n\n  // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n  [THUMBPRINT_MATERIAL] () {\n    return { crv: this.crv, kty: 'EC', x: this.x, y: this.y }\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT] () {\n    return this.algorithms('deriveKey')\n  }\n\n  [KEY_MANAGEMENT_DECRYPT] () {\n    if (this.public) {\n      return new Set()\n    }\n    return this.algorithms('deriveKey')\n  }\n\n  static async generate (crv = 'P-256', privat = true) {\n    if (!EC_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported EC key curve: ${crv}`)\n    }\n\n    let privateKey, publicKey\n\n    if (keyObjectSupported) {\n      ({ privateKey, publicKey } = await generateKeyPair('ec', { namedCurve: crv }))\n      return privat ? privateKey : publicKey\n    }\n\n    ({ privateKey, publicKey } = await generateKeyPair('ec', {\n      namedCurve: crv,\n      publicKeyEncoding: { type: 'spki', format: 'pem' },\n      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }\n    }))\n\n    if (privat) {\n      return createPrivateKey(privateKey)\n    } else {\n      return createPublicKey(publicKey)\n    }\n  }\n\n  static generateSync (crv = 'P-256', privat = true) {\n    if (!EC_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported EC key curve: ${crv}`)\n    }\n\n    let privateKey, publicKey\n\n    if (keyObjectSupported) {\n      ({ privateKey, publicKey } = generateKeyPairSync('ec', { namedCurve: crv }))\n      return privat ? privateKey : publicKey\n    }\n\n    ({ privateKey, publicKey } = generateKeyPairSync('ec', {\n      namedCurve: crv,\n      publicKeyEncoding: { type: 'spki', format: 'pem' },\n      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }\n    }))\n\n    if (privat) {\n      return createPrivateKey(privateKey)\n    } else {\n      return createPublicKey(publicKey)\n    }\n  }\n}\n\nmodule.exports = ECKey\n"]},"metadata":{},"sourceType":"script"}