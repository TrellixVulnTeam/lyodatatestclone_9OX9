{"ast":null,"code":"var _objectSpread = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _require = require('os'),\n    EOL = _require.EOL;\n\nvar errors = require('../errors');\n\nvar _require2 = require('./runtime_support'),\n    keyObjectSupported = _require2.keyObjectSupported;\n\nvar _require3 = require('./key_object'),\n    createPublicKey = _require3.createPublicKey;\n\nvar base64url = require('./base64url');\n\nvar asn1 = require('./asn1');\n\nvar computePrimes = require('./rsa_primes');\n\nvar _require4 = require('../registry'),\n    OKP_CURVES = _require4.OKP_CURVES,\n    EC_CURVES = _require4.EC_CURVES;\n\nvar formatPem = function formatPem(base64pem, descriptor) {\n  return \"-----BEGIN \".concat(descriptor, \" KEY-----\").concat(EOL).concat((base64pem.match(/.{1,64}/g) || []).join(EOL)).concat(EOL, \"-----END \").concat(descriptor, \" KEY-----\");\n};\n\nvar okpToJWK = {\n  private: function _private(crv, keyObject) {\n    var der = keyObject.export({\n      type: 'pkcs8',\n      format: 'der'\n    });\n    var OneAsymmetricKey = asn1.get('OneAsymmetricKey');\n\n    var _OneAsymmetricKey$dec = OneAsymmetricKey.decode(der),\n        d = _OneAsymmetricKey$dec.privateKey.privateKey;\n\n    return _objectSpread(_objectSpread({}, okpToJWK.public(crv, createPublicKey(keyObject))), {}, {\n      d: base64url.encodeBuffer(d)\n    });\n  },\n  public: function _public(crv, keyObject) {\n    var der = keyObject.export({\n      type: 'spki',\n      format: 'der'\n    });\n    var PublicKeyInfo = asn1.get('PublicKeyInfo');\n\n    var _PublicKeyInfo$decode = PublicKeyInfo.decode(der),\n        x = _PublicKeyInfo$decode.publicKey.data;\n\n    return {\n      kty: 'OKP',\n      crv: crv,\n      x: base64url.encodeBuffer(x)\n    };\n  }\n};\nvar keyObjectToJWK = {\n  rsa: {\n    private: function _private(keyObject) {\n      var der = keyObject.export({\n        type: 'pkcs8',\n        format: 'der'\n      });\n      var PrivateKeyInfo = asn1.get('PrivateKeyInfo');\n      var RSAPrivateKey = asn1.get('RSAPrivateKey');\n\n      var _PrivateKeyInfo$decod = PrivateKeyInfo.decode(der),\n          privateKey = _PrivateKeyInfo$decod.privateKey;\n\n      var _RSAPrivateKey$decode = RSAPrivateKey.decode(privateKey),\n          version = _RSAPrivateKey$decode.version,\n          n = _RSAPrivateKey$decode.n,\n          e = _RSAPrivateKey$decode.e,\n          d = _RSAPrivateKey$decode.d,\n          p = _RSAPrivateKey$decode.p,\n          q = _RSAPrivateKey$decode.q,\n          dp = _RSAPrivateKey$decode.dp,\n          dq = _RSAPrivateKey$decode.dq,\n          qi = _RSAPrivateKey$decode.qi;\n\n      if (version !== 'two-prime') {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported');\n      }\n\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e),\n        d: base64url.encodeBigInt(d),\n        p: base64url.encodeBigInt(p),\n        q: base64url.encodeBigInt(q),\n        dp: base64url.encodeBigInt(dp),\n        dq: base64url.encodeBigInt(dq),\n        qi: base64url.encodeBigInt(qi)\n      };\n    },\n    public: function _public(keyObject) {\n      var der = keyObject.export({\n        type: 'spki',\n        format: 'der'\n      });\n      var PublicKeyInfo = asn1.get('PublicKeyInfo');\n      var RSAPublicKey = asn1.get('RSAPublicKey');\n\n      var _PublicKeyInfo$decode2 = PublicKeyInfo.decode(der),\n          publicKey = _PublicKeyInfo$decode2.publicKey.data;\n\n      var _RSAPublicKey$decode = RSAPublicKey.decode(publicKey),\n          n = _RSAPublicKey$decode.n,\n          e = _RSAPublicKey$decode.e;\n\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e)\n      };\n    }\n  },\n  ec: {\n    private: function _private(keyObject) {\n      var der = keyObject.export({\n        type: 'pkcs8',\n        format: 'der'\n      });\n      var PrivateKeyInfo = asn1.get('PrivateKeyInfo');\n      var ECPrivateKey = asn1.get('ECPrivateKey');\n\n      var _PrivateKeyInfo$decod2 = PrivateKeyInfo.decode(der),\n          privateKey = _PrivateKeyInfo$decod2.privateKey,\n          crv = _PrivateKeyInfo$decod2.algorithm.parameters.value;\n\n      var _ECPrivateKey$decode = ECPrivateKey.decode(privateKey),\n          d = _ECPrivateKey$decode.privateKey,\n          publicKey = _ECPrivateKey$decode.publicKey;\n\n      if (typeof publicKey === 'undefined') {\n        if (keyObjectSupported) {\n          return _objectSpread(_objectSpread({}, keyObjectToJWK.ec.public(createPublicKey(keyObject))), {}, {\n            d: base64url.encodeBuffer(d)\n          });\n        }\n\n        throw new errors.JOSENotSupported('Private EC keys without the public key embedded are not supported in your Node.js runtime version');\n      }\n\n      var x = publicKey.data.slice(1, (publicKey.data.length - 1) / 2 + 1);\n      var y = publicKey.data.slice((publicKey.data.length - 1) / 2 + 1);\n      return {\n        kty: 'EC',\n        crv: crv,\n        d: base64url.encodeBuffer(d),\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      };\n    },\n    public: function _public(keyObject) {\n      var der = keyObject.export({\n        type: 'spki',\n        format: 'der'\n      });\n      var PublicKeyInfo = asn1.get('PublicKeyInfo');\n\n      var _PublicKeyInfo$decode3 = PublicKeyInfo.decode(der),\n          publicKey = _PublicKeyInfo$decode3.publicKey.data,\n          crv = _PublicKeyInfo$decode3.algorithm.parameters.value;\n\n      var x = publicKey.slice(1, (publicKey.length - 1) / 2 + 1);\n      var y = publicKey.slice((publicKey.length - 1) / 2 + 1);\n      return {\n        kty: 'EC',\n        crv: crv,\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      };\n    }\n  },\n  ed25519: {\n    private: function _private(keyObject) {\n      return okpToJWK.private('Ed25519', keyObject);\n    },\n    public: function _public(keyObject) {\n      return okpToJWK.public('Ed25519', keyObject);\n    }\n  },\n  ed448: {\n    private: function _private(keyObject) {\n      return okpToJWK.private('Ed448', keyObject);\n    },\n    public: function _public(keyObject) {\n      return okpToJWK.public('Ed448', keyObject);\n    }\n  },\n  x25519: {\n    private: function _private(keyObject) {\n      return okpToJWK.private('X25519', keyObject);\n    },\n    public: function _public(keyObject) {\n      return okpToJWK.public('X25519', keyObject);\n    }\n  },\n  x448: {\n    private: function _private(keyObject) {\n      return okpToJWK.private('X448', keyObject);\n    },\n    public: function _public(keyObject) {\n      return okpToJWK.public('X448', keyObject);\n    }\n  }\n};\n\nmodule.exports.keyObjectToJWK = function (keyObject) {\n  if (keyObject.type === 'private') {\n    return keyObjectToJWK[keyObject.asymmetricKeyType].private(keyObject);\n  }\n\n  return keyObjectToJWK[keyObject.asymmetricKeyType].public(keyObject);\n};\n\nvar concatEcPublicKey = function concatEcPublicKey(x, y) {\n  return {\n    unused: 0,\n    data: Buffer.concat([Buffer.alloc(1, 4), base64url.decodeToBuffer(x), base64url.decodeToBuffer(y)])\n  };\n};\n\nvar jwkToPem = {\n  RSA: {\n    private: function _private(jwk, _ref) {\n      var calculateMissingRSAPrimes = _ref.calculateMissingRSAPrimes;\n      var RSAPrivateKey = asn1.get('RSAPrivateKey');\n\n      if ('oth' in jwk) {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported');\n      }\n\n      if (jwk.p || jwk.q || jwk.dp || jwk.dq || jwk.qi) {\n        if (!(jwk.p && jwk.q && jwk.dp && jwk.dq && jwk.qi)) {\n          throw new errors.JWKInvalid('all other private key parameters must be present when any one of them is present');\n        }\n      } else if (calculateMissingRSAPrimes) {\n        jwk = computePrimes(jwk);\n      } else if (!calculateMissingRSAPrimes) {\n        throw new errors.JOSENotSupported('importing private RSA keys without all other private key parameters is not enabled, see documentation and its advisory on how and when its ok to enable it');\n      }\n\n      return RSAPrivateKey.encode({\n        version: 0,\n        n: BigInt(\"0x\".concat(base64url.decodeToBuffer(jwk.n).toString('hex'))),\n        e: BigInt(\"0x\".concat(base64url.decodeToBuffer(jwk.e).toString('hex'))),\n        d: BigInt(\"0x\".concat(base64url.decodeToBuffer(jwk.d).toString('hex'))),\n        p: BigInt(\"0x\".concat(base64url.decodeToBuffer(jwk.p).toString('hex'))),\n        q: BigInt(\"0x\".concat(base64url.decodeToBuffer(jwk.q).toString('hex'))),\n        dp: BigInt(\"0x\".concat(base64url.decodeToBuffer(jwk.dp).toString('hex'))),\n        dq: BigInt(\"0x\".concat(base64url.decodeToBuffer(jwk.dq).toString('hex'))),\n        qi: BigInt(\"0x\".concat(base64url.decodeToBuffer(jwk.qi).toString('hex')))\n      }, 'pem', {\n        label: 'RSA PRIVATE KEY'\n      });\n    },\n    public: function _public(jwk) {\n      var RSAPublicKey = asn1.get('RSAPublicKey');\n      return RSAPublicKey.encode({\n        version: 0,\n        n: BigInt(\"0x\".concat(base64url.decodeToBuffer(jwk.n).toString('hex'))),\n        e: BigInt(\"0x\".concat(base64url.decodeToBuffer(jwk.e).toString('hex')))\n      }, 'pem', {\n        label: 'RSA PUBLIC KEY'\n      });\n    }\n  },\n  EC: {\n    private: function _private(jwk) {\n      var ECPrivateKey = asn1.get('ECPrivateKey');\n      return ECPrivateKey.encode({\n        version: 1,\n        privateKey: base64url.decodeToBuffer(jwk.d),\n        parameters: {\n          type: 'namedCurve',\n          value: jwk.crv\n        },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', {\n        label: 'EC PRIVATE KEY'\n      });\n    },\n    public: function _public(jwk) {\n      var PublicKeyInfo = asn1.get('PublicKeyInfo');\n      return PublicKeyInfo.encode({\n        algorithm: {\n          algorithm: 'ecPublicKey',\n          parameters: {\n            type: 'namedCurve',\n            value: jwk.crv\n          }\n        },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', {\n        label: 'PUBLIC KEY'\n      });\n    }\n  },\n  OKP: {\n    private: function _private(jwk) {\n      var OneAsymmetricKey = asn1.get('OneAsymmetricKey');\n      var b64 = OneAsymmetricKey.encode({\n        version: 0,\n        privateKey: {\n          privateKey: base64url.decodeToBuffer(jwk.d)\n        },\n        algorithm: {\n          algorithm: jwk.crv\n        }\n      }, 'der'); // TODO: WHYYY? https://github.com/indutny/asn1.js/issues/110\n\n      b64.write('04', 12, 1, 'hex');\n      return formatPem(b64.toString('base64'), 'PRIVATE');\n    },\n    public: function _public(jwk) {\n      var PublicKeyInfo = asn1.get('PublicKeyInfo');\n      return PublicKeyInfo.encode({\n        algorithm: {\n          algorithm: jwk.crv\n        },\n        publicKey: {\n          unused: 0,\n          data: base64url.decodeToBuffer(jwk.x)\n        }\n      }, 'pem', {\n        label: 'PUBLIC KEY'\n      });\n    }\n  }\n};\n\nmodule.exports.jwkToPem = function (jwk) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$calculateMissin = _ref2.calculateMissingRSAPrimes,\n      calculateMissingRSAPrimes = _ref2$calculateMissin === void 0 ? false : _ref2$calculateMissin;\n\n  switch (jwk.kty) {\n    case 'EC':\n      if (!EC_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(\"unsupported EC key curve: \".concat(jwk.crv));\n      }\n\n      break;\n\n    case 'OKP':\n      if (!OKP_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(\"unsupported OKP key curve: \".concat(jwk.crv));\n      }\n\n      break;\n\n    case 'RSA':\n      break;\n\n    default:\n      throw new errors.JOSENotSupported(\"unsupported key type: \".concat(jwk.kty));\n  }\n\n  if (jwk.d) {\n    return jwkToPem[jwk.kty].private(jwk, {\n      calculateMissingRSAPrimes: calculateMissingRSAPrimes\n    });\n  }\n\n  return jwkToPem[jwk.kty].public(jwk);\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/help/key_utils.js"],"names":["require","EOL","errors","keyObjectSupported","createPublicKey","base64url","asn1","computePrimes","OKP_CURVES","EC_CURVES","formatPem","base64pem","descriptor","match","join","okpToJWK","private","crv","keyObject","der","export","type","format","OneAsymmetricKey","get","decode","d","privateKey","public","encodeBuffer","PublicKeyInfo","x","publicKey","data","kty","keyObjectToJWK","rsa","PrivateKeyInfo","RSAPrivateKey","version","n","e","p","q","dp","dq","qi","JOSENotSupported","encodeBigInt","RSAPublicKey","ec","ECPrivateKey","algorithm","parameters","value","slice","length","y","ed25519","ed448","x25519","x448","module","exports","asymmetricKeyType","concatEcPublicKey","unused","Buffer","concat","alloc","decodeToBuffer","jwkToPem","RSA","jwk","calculateMissingRSAPrimes","JWKInvalid","encode","BigInt","toString","label","EC","OKP","b64","write","has"],"mappings":"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","sourcesContent":["const { EOL } = require('os')\n\nconst errors = require('../errors')\n\nconst { keyObjectSupported } = require('./runtime_support')\nconst { createPublicKey } = require('./key_object')\nconst base64url = require('./base64url')\nconst asn1 = require('./asn1')\nconst computePrimes = require('./rsa_primes')\nconst { OKP_CURVES, EC_CURVES } = require('../registry')\n\nconst formatPem = (base64pem, descriptor) => `-----BEGIN ${descriptor} KEY-----${EOL}${(base64pem.match(/.{1,64}/g) || []).join(EOL)}${EOL}-----END ${descriptor} KEY-----`\n\nconst okpToJWK = {\n  private (crv, keyObject) {\n    const der = keyObject.export({ type: 'pkcs8', format: 'der' })\n    const OneAsymmetricKey = asn1.get('OneAsymmetricKey')\n    const { privateKey: { privateKey: d } } = OneAsymmetricKey.decode(der)\n\n    return {\n      ...okpToJWK.public(crv, createPublicKey(keyObject)),\n      d: base64url.encodeBuffer(d)\n    }\n  },\n  public (crv, keyObject) {\n    const der = keyObject.export({ type: 'spki', format: 'der' })\n\n    const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n    const { publicKey: { data: x } } = PublicKeyInfo.decode(der)\n\n    return {\n      kty: 'OKP',\n      crv,\n      x: base64url.encodeBuffer(x)\n    }\n  }\n}\n\nconst keyObjectToJWK = {\n  rsa: {\n    private (keyObject) {\n      const der = keyObject.export({ type: 'pkcs8', format: 'der' })\n\n      const PrivateKeyInfo = asn1.get('PrivateKeyInfo')\n      const RSAPrivateKey = asn1.get('RSAPrivateKey')\n\n      const { privateKey } = PrivateKeyInfo.decode(der)\n      const { version, n, e, d, p, q, dp, dq, qi } = RSAPrivateKey.decode(privateKey)\n\n      if (version !== 'two-prime') {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported')\n      }\n\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e),\n        d: base64url.encodeBigInt(d),\n        p: base64url.encodeBigInt(p),\n        q: base64url.encodeBigInt(q),\n        dp: base64url.encodeBigInt(dp),\n        dq: base64url.encodeBigInt(dq),\n        qi: base64url.encodeBigInt(qi)\n      }\n    },\n    public (keyObject) {\n      const der = keyObject.export({ type: 'spki', format: 'der' })\n\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n      const RSAPublicKey = asn1.get('RSAPublicKey')\n\n      const { publicKey: { data: publicKey } } = PublicKeyInfo.decode(der)\n      const { n, e } = RSAPublicKey.decode(publicKey)\n\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e)\n      }\n    }\n  },\n  ec: {\n    private (keyObject) {\n      const der = keyObject.export({ type: 'pkcs8', format: 'der' })\n\n      const PrivateKeyInfo = asn1.get('PrivateKeyInfo')\n      const ECPrivateKey = asn1.get('ECPrivateKey')\n\n      const { privateKey, algorithm: { parameters: { value: crv } } } = PrivateKeyInfo.decode(der)\n      const { privateKey: d, publicKey } = ECPrivateKey.decode(privateKey)\n\n      if (typeof publicKey === 'undefined') {\n        if (keyObjectSupported) {\n          return {\n            ...keyObjectToJWK.ec.public(createPublicKey(keyObject)),\n            d: base64url.encodeBuffer(d)\n          }\n        }\n\n        throw new errors.JOSENotSupported('Private EC keys without the public key embedded are not supported in your Node.js runtime version')\n      }\n\n      const x = publicKey.data.slice(1, ((publicKey.data.length - 1) / 2) + 1)\n      const y = publicKey.data.slice(((publicKey.data.length - 1) / 2) + 1)\n\n      return {\n        kty: 'EC',\n        crv,\n        d: base64url.encodeBuffer(d),\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      }\n    },\n    public (keyObject) {\n      const der = keyObject.export({ type: 'spki', format: 'der' })\n\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n      const { publicKey: { data: publicKey }, algorithm: { parameters: { value: crv } } } = PublicKeyInfo.decode(der)\n\n      const x = publicKey.slice(1, ((publicKey.length - 1) / 2) + 1)\n      const y = publicKey.slice(((publicKey.length - 1) / 2) + 1)\n\n      return {\n        kty: 'EC',\n        crv,\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      }\n    }\n  },\n  ed25519: {\n    private (keyObject) {\n      return okpToJWK.private('Ed25519', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('Ed25519', keyObject)\n    }\n  },\n  ed448: {\n    private (keyObject) {\n      return okpToJWK.private('Ed448', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('Ed448', keyObject)\n    }\n  },\n  x25519: {\n    private (keyObject) {\n      return okpToJWK.private('X25519', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('X25519', keyObject)\n    }\n  },\n  x448: {\n    private (keyObject) {\n      return okpToJWK.private('X448', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('X448', keyObject)\n    }\n  }\n}\n\nmodule.exports.keyObjectToJWK = (keyObject) => {\n  if (keyObject.type === 'private') {\n    return keyObjectToJWK[keyObject.asymmetricKeyType].private(keyObject)\n  }\n\n  return keyObjectToJWK[keyObject.asymmetricKeyType].public(keyObject)\n}\n\nconst concatEcPublicKey = (x, y) => ({\n  unused: 0,\n  data: Buffer.concat([\n    Buffer.alloc(1, 4),\n    base64url.decodeToBuffer(x),\n    base64url.decodeToBuffer(y)\n  ])\n})\n\nconst jwkToPem = {\n  RSA: {\n    private (jwk, { calculateMissingRSAPrimes }) {\n      const RSAPrivateKey = asn1.get('RSAPrivateKey')\n\n      if ('oth' in jwk) {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported')\n      }\n\n      if (jwk.p || jwk.q || jwk.dp || jwk.dq || jwk.qi) {\n        if (!(jwk.p && jwk.q && jwk.dp && jwk.dq && jwk.qi)) {\n          throw new errors.JWKInvalid('all other private key parameters must be present when any one of them is present')\n        }\n      } else if (calculateMissingRSAPrimes) {\n        jwk = computePrimes(jwk)\n      } else if (!calculateMissingRSAPrimes) {\n        throw new errors.JOSENotSupported('importing private RSA keys without all other private key parameters is not enabled, see documentation and its advisory on how and when its ok to enable it')\n      }\n\n      return RSAPrivateKey.encode({\n        version: 0,\n        n: BigInt(`0x${base64url.decodeToBuffer(jwk.n).toString('hex')}`),\n        e: BigInt(`0x${base64url.decodeToBuffer(jwk.e).toString('hex')}`),\n        d: BigInt(`0x${base64url.decodeToBuffer(jwk.d).toString('hex')}`),\n        p: BigInt(`0x${base64url.decodeToBuffer(jwk.p).toString('hex')}`),\n        q: BigInt(`0x${base64url.decodeToBuffer(jwk.q).toString('hex')}`),\n        dp: BigInt(`0x${base64url.decodeToBuffer(jwk.dp).toString('hex')}`),\n        dq: BigInt(`0x${base64url.decodeToBuffer(jwk.dq).toString('hex')}`),\n        qi: BigInt(`0x${base64url.decodeToBuffer(jwk.qi).toString('hex')}`)\n      }, 'pem', { label: 'RSA PRIVATE KEY' })\n    },\n    public (jwk) {\n      const RSAPublicKey = asn1.get('RSAPublicKey')\n\n      return RSAPublicKey.encode({\n        version: 0,\n        n: BigInt(`0x${base64url.decodeToBuffer(jwk.n).toString('hex')}`),\n        e: BigInt(`0x${base64url.decodeToBuffer(jwk.e).toString('hex')}`)\n      }, 'pem', { label: 'RSA PUBLIC KEY' })\n    }\n  },\n  EC: {\n    private (jwk) {\n      const ECPrivateKey = asn1.get('ECPrivateKey')\n\n      return ECPrivateKey.encode({\n        version: 1,\n        privateKey: base64url.decodeToBuffer(jwk.d),\n        parameters: { type: 'namedCurve', value: jwk.crv },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', { label: 'EC PRIVATE KEY' })\n    },\n    public (jwk) {\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n      return PublicKeyInfo.encode({\n        algorithm: {\n          algorithm: 'ecPublicKey',\n          parameters: { type: 'namedCurve', value: jwk.crv }\n        },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', { label: 'PUBLIC KEY' })\n    }\n  },\n  OKP: {\n    private (jwk) {\n      const OneAsymmetricKey = asn1.get('OneAsymmetricKey')\n\n      const b64 = OneAsymmetricKey.encode({\n        version: 0,\n        privateKey: { privateKey: base64url.decodeToBuffer(jwk.d) },\n        algorithm: { algorithm: jwk.crv }\n      }, 'der')\n\n      // TODO: WHYYY? https://github.com/indutny/asn1.js/issues/110\n      b64.write('04', 12, 1, 'hex')\n\n      return formatPem(b64.toString('base64'), 'PRIVATE')\n    },\n    public (jwk) {\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n      return PublicKeyInfo.encode({\n        algorithm: { algorithm: jwk.crv },\n        publicKey: {\n          unused: 0,\n          data: base64url.decodeToBuffer(jwk.x)\n        }\n      }, 'pem', { label: 'PUBLIC KEY' })\n    }\n  }\n}\n\nmodule.exports.jwkToPem = (jwk, { calculateMissingRSAPrimes = false } = {}) => {\n  switch (jwk.kty) {\n    case 'EC':\n      if (!EC_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(`unsupported EC key curve: ${jwk.crv}`)\n      }\n      break\n    case 'OKP':\n      if (!OKP_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(`unsupported OKP key curve: ${jwk.crv}`)\n      }\n      break\n    case 'RSA':\n      break\n    default:\n      throw new errors.JOSENotSupported(`unsupported key type: ${jwk.kty}`)\n  }\n\n  if (jwk.d) {\n    return jwkToPem[jwk.kty].private(jwk, { calculateMissingRSAPrimes })\n  }\n\n  return jwkToPem[jwk.kty].public(jwk)\n}\n"]},"metadata":{},"sourceType":"script"}