{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar OTKAnalytics = require('opentok-solutions-logging'); // eslint-disable-next-line no-console\n\n\nvar message = function message(messageText) {\n  return console.log('otAccCore: ' + messageText);\n};\n/** Analytics */\n\n\nvar logVariation = {\n  attempt: 'Attempt',\n  success: 'Success',\n  fail: 'Fail'\n};\nvar logAction = {\n  // vars for the analytics logs. Internal use\n  init: 'Init',\n  initPackages: 'InitPackages',\n  connect: 'ConnectCoreAcc',\n  disconnect: 'DisconnectCoreAcc',\n  forceDisconnect: 'ForceDisconnectCoreAcc',\n  forceUnpublish: 'ForceUnpublishCoreAcc',\n  getAccPack: 'GetAccPack',\n  signal: 'SignalCoreAcc',\n  startCall: 'StartCallCoreAcc',\n  endCall: 'EndCallCoreAcc',\n  toggleLocalAudio: 'ToggleLocalAudio',\n  toggleLocalVideo: 'ToggleLocalVideo',\n  toggleRemoteAudio: 'ToggleRemoteAudio',\n  toggleRemoteVideo: 'ToggleRemoteVideo',\n  subscribe: 'SubscribeCoreAcc',\n  unsubscribe: 'UnsubscribeCoreAcc'\n};\n\nvar Analytics = function Analytics(source, sessionId, connectionId, apikey, applicationName) {\n  _classCallCheck(this, Analytics);\n\n  _initialiseProps.call(this);\n\n  var otkanalyticsData = {\n    clientVersion: 'js-vsol-2.0.17',\n    // x.y.z filled by npm build script\n    source: source,\n    componentId: 'acceleratorCore',\n    name: applicationName || 'coreAccelerator',\n    partnerId: apikey\n  };\n  this.analytics = new OTKAnalytics(otkanalyticsData);\n\n  if (connectionId) {\n    this.update(sessionId, connectionId, apikey);\n  }\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  Object.defineProperty(this, 'update', {\n    enumerable: true,\n    writable: true,\n    value: function value(sessionId, connectionId, apiKey) {\n      if (sessionId && connectionId && apiKey) {\n        var sessionInfo = {\n          sessionId: sessionId,\n          connectionId: connectionId,\n          partnerId: apiKey\n        };\n\n        _this.analytics.addSessionInfo(sessionInfo);\n      }\n    }\n  });\n  Object.defineProperty(this, 'log', {\n    enumerable: true,\n    writable: true,\n    value: function value(action, variation) {\n      _this.analytics.logEvent({\n        action: action,\n        variation: variation\n      });\n    }\n  });\n};\n\nmodule.exports = {\n  Analytics: Analytics,\n  logVariation: logVariation,\n  logAction: logAction,\n  message: message\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/opentok-accelerator-core/dist/logging.js"],"names":["_classCallCheck","instance","Constructor","TypeError","OTKAnalytics","require","message","messageText","console","log","logVariation","attempt","success","fail","logAction","init","initPackages","connect","disconnect","forceDisconnect","forceUnpublish","getAccPack","signal","startCall","endCall","toggleLocalAudio","toggleLocalVideo","toggleRemoteAudio","toggleRemoteVideo","subscribe","unsubscribe","Analytics","source","sessionId","connectionId","apikey","applicationName","_initialiseProps","call","otkanalyticsData","clientVersion","componentId","name","partnerId","analytics","update","_this","Object","defineProperty","enumerable","writable","value","apiKey","sessionInfo","addSessionInfo","action","variation","logEvent","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar OTKAnalytics = require('opentok-solutions-logging');\n\n// eslint-disable-next-line no-console\nvar message = function message(messageText) {\n  return console.log('otAccCore: ' + messageText);\n};\n\n/** Analytics */\n\nvar logVariation = {\n  attempt: 'Attempt',\n  success: 'Success',\n  fail: 'Fail'\n};\n\nvar logAction = {\n  // vars for the analytics logs. Internal use\n  init: 'Init',\n  initPackages: 'InitPackages',\n  connect: 'ConnectCoreAcc',\n  disconnect: 'DisconnectCoreAcc',\n  forceDisconnect: 'ForceDisconnectCoreAcc',\n  forceUnpublish: 'ForceUnpublishCoreAcc',\n  getAccPack: 'GetAccPack',\n  signal: 'SignalCoreAcc',\n  startCall: 'StartCallCoreAcc',\n  endCall: 'EndCallCoreAcc',\n  toggleLocalAudio: 'ToggleLocalAudio',\n  toggleLocalVideo: 'ToggleLocalVideo',\n  toggleRemoteAudio: 'ToggleRemoteAudio',\n  toggleRemoteVideo: 'ToggleRemoteVideo',\n  subscribe: 'SubscribeCoreAcc',\n  unsubscribe: 'UnsubscribeCoreAcc'\n};\n\nvar Analytics = function Analytics(source, sessionId, connectionId, apikey, applicationName) {\n  _classCallCheck(this, Analytics);\n\n  _initialiseProps.call(this);\n\n  var otkanalyticsData = {\n    clientVersion: 'js-vsol-2.0.17', // x.y.z filled by npm build script\n    source: source,\n    componentId: 'acceleratorCore',\n    name: applicationName || 'coreAccelerator',\n    partnerId: apikey\n  };\n\n  this.analytics = new OTKAnalytics(otkanalyticsData);\n\n  if (connectionId) {\n    this.update(sessionId, connectionId, apikey);\n  }\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  Object.defineProperty(this, 'update', {\n    enumerable: true,\n    writable: true,\n    value: function value(sessionId, connectionId, apiKey) {\n      if (sessionId && connectionId && apiKey) {\n        var sessionInfo = {\n          sessionId: sessionId,\n          connectionId: connectionId,\n          partnerId: apiKey\n        };\n        _this.analytics.addSessionInfo(sessionInfo);\n      }\n    }\n  });\n  Object.defineProperty(this, 'log', {\n    enumerable: true,\n    writable: true,\n    value: function value(action, variation) {\n      _this.analytics.logEvent({ action: action, variation: variation });\n    }\n  });\n};\n\nmodule.exports = {\n  Analytics: Analytics,\n  logVariation: logVariation,\n  logAction: logAction,\n  message: message\n};"]},"metadata":{},"sourceType":"script"}