{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar debug = require('debug');\n\nvar _require = require('limiter'),\n    RateLimiter = _require.RateLimiter;\n\nvar JwksRateLimitError = require('../errors/JwksRateLimitError');\n\nfunction rateLimtWrapper(client, _ref) {\n  var _ref$jwksRequestsPerM = _ref.jwksRequestsPerMinute,\n      jwksRequestsPerMinute = _ref$jwksRequestsPerM === void 0 ? 10 : _ref$jwksRequestsPerM;\n  var logger = debug('jwks');\n  var getSigningKey = client.getSigningKey.bind(client);\n  var limiter = new RateLimiter(jwksRequestsPerMinute, 'minute', true);\n  logger(\"Configured rate limiting to JWKS endpoint at \".concat(jwksRequestsPerMinute, \"/minute\"));\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(kid) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return new Promise(function (resolve, reject) {\n                limiter.removeTokens(1, /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(err, remaining) {\n                    var key;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            if (err) {\n                              reject(err);\n                            }\n\n                            logger('Requests to the JWKS endpoint available for the next minute:', remaining);\n\n                            if (!(remaining < 0)) {\n                              _context.next = 7;\n                              break;\n                            }\n\n                            logger('Too many requests to the JWKS endpoint');\n                            reject(new JwksRateLimitError('Too many requests to the JWKS endpoint'));\n                            _context.next = 17;\n                            break;\n\n                          case 7:\n                            _context.prev = 7;\n                            _context.next = 10;\n                            return getSigningKey(kid);\n\n                          case 10:\n                            key = _context.sent;\n                            resolve(key);\n                            _context.next = 17;\n                            break;\n\n                          case 14:\n                            _context.prev = 14;\n                            _context.t0 = _context[\"catch\"](7);\n                            reject(_context.t0);\n\n                          case 17:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, null, [[7, 14]]);\n                  }));\n\n                  return function (_x2, _x3) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n              });\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\n\nmodule.exports.default = rateLimtWrapper;","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jwks-rsa/src/wrappers/rateLimit.js"],"names":["debug","require","RateLimiter","JwksRateLimitError","rateLimtWrapper","client","jwksRequestsPerMinute","logger","getSigningKey","bind","limiter","kid","Promise","resolve","reject","removeTokens","err","remaining","key","module","exports","default"],"mappings":";;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;eACwBA,OAAO,CAAC,SAAD,C;IAAvBC,W,YAAAA,W;;AAER,IAAMC,kBAAkB,GAAGF,OAAO,CAAC,8BAAD,CAAlC;;AAEA,SAASG,eAAT,CAAyBC,MAAzB,QAAiE;AAAA,mCAA9BC,qBAA8B;AAAA,MAA9BA,qBAA8B,sCAAN,EAAM;AAC/D,MAAMC,MAAM,GAAGP,KAAK,CAAC,MAAD,CAApB;AACA,MAAMQ,aAAa,GAAGH,MAAM,CAACG,aAAP,CAAqBC,IAArB,CAA0BJ,MAA1B,CAAtB;AAEA,MAAMK,OAAO,GAAG,IAAIR,WAAJ,CAAgBI,qBAAhB,EAAuC,QAAvC,EAAiD,IAAjD,CAAhB;AACAC,EAAAA,MAAM,wDAAiDD,qBAAjD,aAAN;AAEA;AAAA,yEAAO,kBAAOK,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAqB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC3DJ,gBAAAA,OAAO,CAACK,YAAR,CAAqB,CAArB;AAAA,uFAAwB,iBAAOC,GAAP,EAAYC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACtB,gCAAID,GAAJ,EAAS;AACPF,8BAAAA,MAAM,CAACE,GAAD,CAAN;AACD;;AAEDT,4BAAAA,MAAM,CAAC,8DAAD,EAAiEU,SAAjE,CAAN;;AALsB,kCAMlBA,SAAS,GAAG,CANM;AAAA;AAAA;AAAA;;AAOpBV,4BAAAA,MAAM,CAAC,wCAAD,CAAN;AACAO,4BAAAA,MAAM,CAAC,IAAIX,kBAAJ,CAAuB,wCAAvB,CAAD,CAAN;AARoB;AAAA;;AAAA;AAAA;AAAA;AAAA,mCAWAK,aAAa,CAACG,GAAD,CAXb;;AAAA;AAWZO,4BAAAA,GAXY;AAYlBL,4BAAAA,OAAO,CAACK,GAAD,CAAP;AAZkB;AAAA;;AAAA;AAAA;AAAA;AAclBJ,4BAAAA,MAAM,aAAN;;AAdkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAxB;;AAAA;AAAA;AAAA;AAAA;AAkBD,eAnB2B,CAArB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAoBD;;AAEDK,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBjB,eAAzB","sourcesContent":["const debug = require('debug');\nconst { RateLimiter } = require('limiter');\n\nconst JwksRateLimitError = require('../errors/JwksRateLimitError');\n\nfunction rateLimtWrapper(client, { jwksRequestsPerMinute = 10 }) {\n  const logger = debug('jwks');\n  const getSigningKey = client.getSigningKey.bind(client);\n\n  const limiter = new RateLimiter(jwksRequestsPerMinute, 'minute', true);\n  logger(`Configured rate limiting to JWKS endpoint at ${jwksRequestsPerMinute}/minute`);\n\n  return async (kid) => await new Promise((resolve, reject) => {\n    limiter.removeTokens(1, async (err, remaining) => {\n      if (err) {\n        reject(err);\n      }\n\n      logger('Requests to the JWKS endpoint available for the next minute:', remaining);\n      if (remaining < 0) {\n        logger('Too many requests to the JWKS endpoint');\n        reject(new JwksRateLimitError('Too many requests to the JWKS endpoint'));\n      } else {\n        try {\n          const key = await getSigningKey(kid);\n          resolve(key);\n        } catch (error) {\n          reject(error);\n        }\n      }\n    });\n  });\n}\n\nmodule.exports.default = rateLimtWrapper;\n"]},"metadata":{},"sourceType":"script"}