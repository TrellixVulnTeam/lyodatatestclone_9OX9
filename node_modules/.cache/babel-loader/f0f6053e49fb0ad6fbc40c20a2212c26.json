{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2021 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _asyncIterator = require(\"/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar document_1 = require(\"./document\");\n\nvar util_1 = require(\"./util\");\n\nvar logger_1 = require(\"./logger\");\n/**\n * A wrapper around BatchGetDocumentsRequest that retries request upon stream\n * failure and returns ordered results.\n *\n * @private\n */\n\n\nvar DocumentReader = /*#__PURE__*/function () {\n  /**\n   * Creates a new DocumentReader that fetches the provided documents (via\n   * `get()`).\n   *\n   * @param firestore The Firestore instance to use.\n   * @param allDocuments The documents to get.\n   */\n  function DocumentReader(firestore, allDocuments) {\n    _classCallCheck(this, DocumentReader);\n\n    this.firestore = firestore;\n    this.allDocuments = allDocuments;\n    this.outstandingDocuments = new Set();\n    this.retrievedDocuments = new Map();\n\n    var _iterator2 = _createForOfIteratorHelper(this.allDocuments),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var docRef = _step2.value;\n        this.outstandingDocuments.add(docRef.formattedName);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  /**\n   * Invokes the BatchGetDocuments RPC and returns the results.\n   *\n   * @param requestTag A unique client-assigned identifier for this request.\n   */\n\n\n  _createClass(DocumentReader, [{\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(requestTag) {\n        var orderedDocuments, _iterator3, _step3, docRef, document, finalDoc;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.fetchDocuments(requestTag);\n\n              case 2:\n                // BatchGetDocuments doesn't preserve document order. We use the request\n                // order to sort the resulting documents.\n                orderedDocuments = [];\n                _iterator3 = _createForOfIteratorHelper(this.allDocuments);\n                _context.prev = 4;\n\n                _iterator3.s();\n\n              case 6:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context.next = 21;\n                  break;\n                }\n\n                docRef = _step3.value;\n                document = this.retrievedDocuments.get(docRef.formattedName);\n\n                if (!(document !== undefined)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                // Recreate the DocumentSnapshot with the DocumentReference\n                // containing the original converter.\n                finalDoc = new document_1.DocumentSnapshotBuilder(docRef);\n                finalDoc.fieldsProto = document._fieldsProto;\n                finalDoc.readTime = document.readTime;\n                finalDoc.createTime = document.createTime;\n                finalDoc.updateTime = document.updateTime;\n                orderedDocuments.push(finalDoc.build());\n                _context.next = 19;\n                break;\n\n              case 18:\n                throw new Error(\"Did not receive document for \\\"\".concat(docRef.path, \"\\\".\"));\n\n              case 19:\n                _context.next = 6;\n                break;\n\n              case 21:\n                _context.next = 26;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t0 = _context[\"catch\"](4);\n\n                _iterator3.e(_context.t0);\n\n              case 26:\n                _context.prev = 26;\n\n                _iterator3.f();\n\n                return _context.finish(26);\n\n              case 29:\n                return _context.abrupt(\"return\", orderedDocuments);\n\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 23, 26, 29]]);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"fetchDocuments\",\n    value: function () {\n      var _fetchDocuments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(requestTag) {\n        var request, fieldPaths, resultCount, stream, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, response, snapshot, path, shouldRetry;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.outstandingDocuments.size) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                request = {\n                  database: this.firestore.formattedName,\n                  transaction: this.transactionId,\n                  documents: Array.from(this.outstandingDocuments)\n                };\n\n                if (this.fieldMask) {\n                  fieldPaths = this.fieldMask.map(function (fieldPath) {\n                    return fieldPath.formattedName;\n                  });\n                  request.mask = {\n                    fieldPaths: fieldPaths\n                  };\n                }\n\n                resultCount = 0;\n                _context2.prev = 5;\n                _context2.next = 8;\n                return this.firestore.requestStream('batchGetDocuments', request, requestTag);\n\n              case 8:\n                stream = _context2.sent;\n                stream.resume();\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context2.prev = 12;\n                _iterator = _asyncIterator(stream);\n\n              case 14:\n                _context2.next = 16;\n                return _iterator.next();\n\n              case 16:\n                _step = _context2.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context2.next = 20;\n                return _step.value;\n\n              case 20:\n                _value = _context2.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context2.next = 32;\n                  break;\n                }\n\n                response = _value;\n                snapshot = void 0;\n\n                if (response.found) {\n                  logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'Received document: %s', response.found.name);\n                  snapshot = this.firestore.snapshot_(response.found, response.readTime);\n                } else {\n                  logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'Document missing: %s', response.missing);\n                  snapshot = this.firestore.snapshot_(response.missing, response.readTime);\n                }\n\n                path = snapshot.ref.formattedName;\n                this.outstandingDocuments.delete(path);\n                this.retrievedDocuments.set(path, snapshot);\n                ++resultCount;\n\n              case 29:\n                _iteratorNormalCompletion = true;\n                _context2.next = 14;\n                break;\n\n              case 32:\n                _context2.next = 38;\n                break;\n\n              case 34:\n                _context2.prev = 34;\n                _context2.t0 = _context2[\"catch\"](12);\n                _didIteratorError = true;\n                _iteratorError = _context2.t0;\n\n              case 38:\n                _context2.prev = 38;\n                _context2.prev = 39;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context2.next = 43;\n                  break;\n                }\n\n                _context2.next = 43;\n                return _iterator.return();\n\n              case 43:\n                _context2.prev = 43;\n\n                if (!_didIteratorError) {\n                  _context2.next = 46;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 46:\n                return _context2.finish(43);\n\n              case 47:\n                return _context2.finish(38);\n\n              case 48:\n                _context2.next = 59;\n                break;\n\n              case 50:\n                _context2.prev = 50;\n                _context2.t1 = _context2[\"catch\"](5);\n                shouldRetry = // Transactional reads are retried via the transaction runner.\n                !this.transactionId && // Only retry if we made progress.\n                resultCount > 0 && // Don't retry permanent errors.\n                _context2.t1.code !== undefined && !util_1.isPermanentRpcError(_context2.t1, 'batchGetDocuments');\n                logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'BatchGetDocuments failed with error: %s. Retrying: %s', _context2.t1, shouldRetry);\n\n                if (!shouldRetry) {\n                  _context2.next = 58;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.fetchDocuments(requestTag));\n\n              case 58:\n                throw _context2.t1;\n\n              case 59:\n                _context2.prev = 59;\n                logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'Received %d results', resultCount);\n                return _context2.finish(59);\n\n              case 62:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 50, 59, 62], [12, 34, 38, 48], [39,, 43, 47]]);\n      }));\n\n      function fetchDocuments(_x2) {\n        return _fetchDocuments.apply(this, arguments);\n      }\n\n      return fetchDocuments;\n    }()\n  }]);\n\n  return DocumentReader;\n}();\n\nexports.DocumentReader = DocumentReader;","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/@google-cloud/firestore/build/src/document-reader.js"],"names":["Object","defineProperty","exports","value","document_1","require","util_1","logger_1","DocumentReader","firestore","allDocuments","outstandingDocuments","Set","retrievedDocuments","Map","docRef","add","formattedName","requestTag","fetchDocuments","orderedDocuments","document","get","undefined","finalDoc","DocumentSnapshotBuilder","fieldsProto","_fieldsProto","readTime","createTime","updateTime","push","build","Error","path","size","request","database","transaction","transactionId","documents","Array","from","fieldMask","fieldPaths","map","fieldPath","mask","resultCount","requestStream","stream","resume","response","snapshot","found","logger","name","snapshot_","missing","ref","delete","set","shouldRetry","code","isPermanentRpcError"],"mappings":"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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2021 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst document_1 = require(\"./document\");\nconst util_1 = require(\"./util\");\nconst logger_1 = require(\"./logger\");\n/**\n * A wrapper around BatchGetDocumentsRequest that retries request upon stream\n * failure and returns ordered results.\n *\n * @private\n */\nclass DocumentReader {\n    /**\n     * Creates a new DocumentReader that fetches the provided documents (via\n     * `get()`).\n     *\n     * @param firestore The Firestore instance to use.\n     * @param allDocuments The documents to get.\n     */\n    constructor(firestore, allDocuments) {\n        this.firestore = firestore;\n        this.allDocuments = allDocuments;\n        this.outstandingDocuments = new Set();\n        this.retrievedDocuments = new Map();\n        for (const docRef of this.allDocuments) {\n            this.outstandingDocuments.add(docRef.formattedName);\n        }\n    }\n    /**\n     * Invokes the BatchGetDocuments RPC and returns the results.\n     *\n     * @param requestTag A unique client-assigned identifier for this request.\n     */\n    async get(requestTag) {\n        await this.fetchDocuments(requestTag);\n        // BatchGetDocuments doesn't preserve document order. We use the request\n        // order to sort the resulting documents.\n        const orderedDocuments = [];\n        for (const docRef of this.allDocuments) {\n            const document = this.retrievedDocuments.get(docRef.formattedName);\n            if (document !== undefined) {\n                // Recreate the DocumentSnapshot with the DocumentReference\n                // containing the original converter.\n                const finalDoc = new document_1.DocumentSnapshotBuilder(docRef);\n                finalDoc.fieldsProto = document._fieldsProto;\n                finalDoc.readTime = document.readTime;\n                finalDoc.createTime = document.createTime;\n                finalDoc.updateTime = document.updateTime;\n                orderedDocuments.push(finalDoc.build());\n            }\n            else {\n                throw new Error(`Did not receive document for \"${docRef.path}\".`);\n            }\n        }\n        return orderedDocuments;\n    }\n    async fetchDocuments(requestTag) {\n        if (!this.outstandingDocuments.size) {\n            return;\n        }\n        const request = {\n            database: this.firestore.formattedName,\n            transaction: this.transactionId,\n            documents: Array.from(this.outstandingDocuments),\n        };\n        if (this.fieldMask) {\n            const fieldPaths = this.fieldMask.map(fieldPath => fieldPath.formattedName);\n            request.mask = { fieldPaths };\n        }\n        let resultCount = 0;\n        try {\n            const stream = await this.firestore.requestStream('batchGetDocuments', request, requestTag);\n            stream.resume();\n            for await (const response of stream) {\n                let snapshot;\n                if (response.found) {\n                    logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'Received document: %s', response.found.name);\n                    snapshot = this.firestore.snapshot_(response.found, response.readTime);\n                }\n                else {\n                    logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'Document missing: %s', response.missing);\n                    snapshot = this.firestore.snapshot_(response.missing, response.readTime);\n                }\n                const path = snapshot.ref.formattedName;\n                this.outstandingDocuments.delete(path);\n                this.retrievedDocuments.set(path, snapshot);\n                ++resultCount;\n            }\n        }\n        catch (error) {\n            const shouldRetry = \n            // Transactional reads are retried via the transaction runner.\n            !this.transactionId &&\n                // Only retry if we made progress.\n                resultCount > 0 &&\n                // Don't retry permanent errors.\n                error.code !== undefined &&\n                !util_1.isPermanentRpcError(error, 'batchGetDocuments');\n            logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'BatchGetDocuments failed with error: %s. Retrying: %s', error, shouldRetry);\n            if (shouldRetry) {\n                return this.fetchDocuments(requestTag);\n            }\n            else {\n                throw error;\n            }\n        }\n        finally {\n            logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'Received %d results', resultCount);\n        }\n    }\n}\nexports.DocumentReader = DocumentReader;\n//# sourceMappingURL=document-reader.js.map"]},"metadata":{},"sourceType":"script"}