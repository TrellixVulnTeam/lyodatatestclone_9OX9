{"ast":null,"code":"var _require = require('../errors'),\n    JWTClaimInvalid = _require.JWTClaimInvalid;\n\nvar isNotString = function isNotString(val) {\n  return typeof val !== 'string' || val.length === 0;\n};\n\nvar isNotArrayOfStrings = function isNotArrayOfStrings(val) {\n  return !Array.isArray(val) || val.length === 0 || val.some(isNotString);\n};\n\nvar isRequired = function isRequired(Err, value, label, claim) {\n  if (value === undefined) {\n    throw new Err(\"\".concat(label, \" is missing\"), claim, 'missing');\n  }\n};\n\nvar isString = function isString(Err, value, label, claim) {\n  var required = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  if (required) {\n    isRequired(Err, value, label, claim);\n  }\n\n  if (value !== undefined && isNotString(value)) {\n    throw new Err(\"\".concat(label, \" must be a string\"), claim, 'invalid');\n  }\n};\n\nvar isTimestamp = function isTimestamp(value, label) {\n  var required = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(\"\\\"\".concat(label, \"\\\" claim is missing\"), label, 'missing');\n  }\n\n  if (value !== undefined && typeof value !== 'number') {\n    throw new JWTClaimInvalid(\"\\\"\".concat(label, \"\\\" claim must be a JSON numeric value\"), label, 'invalid');\n  }\n};\n\nvar isStringOrArrayOfStrings = function isStringOrArrayOfStrings(value, label) {\n  var required = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(\"\\\"\".concat(label, \"\\\" claim is missing\"), label, 'missing');\n  }\n\n  if (value !== undefined && isNotString(value) && isNotArrayOfStrings(value)) {\n    throw new JWTClaimInvalid(\"\\\"\".concat(label, \"\\\" claim must be a string or array of strings\"), label, 'invalid');\n  }\n};\n\nmodule.exports = {\n  isNotArrayOfStrings: isNotArrayOfStrings,\n  isRequired: isRequired,\n  isNotString: isNotString,\n  isString: isString,\n  isTimestamp: isTimestamp,\n  isStringOrArrayOfStrings: isStringOrArrayOfStrings\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jose/lib/jwt/shared_validations.js"],"names":["require","JWTClaimInvalid","isNotString","val","length","isNotArrayOfStrings","Array","isArray","some","isRequired","Err","value","label","claim","undefined","isString","required","isTimestamp","isStringOrArrayOfStrings","module","exports"],"mappings":"eAA4BA,OAAO,CAAC,WAAD,C;IAA3BC,e,YAAAA,e;;AAER,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,GAAG;AAAA,SAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACC,MAAJ,KAAe,CAA9C;AAAA,CAAvB;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAF,GAAG;AAAA,SAAI,CAACG,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAD,IAAuBA,GAAG,CAACC,MAAJ,KAAe,CAAtC,IAA2CD,GAAG,CAACK,IAAJ,CAASN,WAAT,CAA/C;AAAA,CAA/B;;AACA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,EAAoBC,KAApB,EAA8B;AAC/C,MAAIF,KAAK,KAAKG,SAAd,EAAyB;AACvB,UAAM,IAAIJ,GAAJ,WAAWE,KAAX,kBAA+BC,KAA/B,EAAsC,SAAtC,CAAN;AACD;AACF,CAJD;;AAKA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACL,GAAD,EAAMC,KAAN,EAAaC,KAAb,EAAoBC,KAApB,EAAgD;AAAA,MAArBG,QAAqB,uEAAV,KAAU;;AAC/D,MAAIA,QAAJ,EAAc;AACZP,IAAAA,UAAU,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,EAAoBC,KAApB,CAAV;AACD;;AAED,MAAIF,KAAK,KAAKG,SAAV,IAAuBZ,WAAW,CAACS,KAAD,CAAtC,EAA+C;AAC7C,UAAM,IAAID,GAAJ,WAAWE,KAAX,wBAAqCC,KAArC,EAA4C,SAA5C,CAAN;AACD;AACF,CARD;;AASA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACN,KAAD,EAAQC,KAAR,EAAoC;AAAA,MAArBI,QAAqB,uEAAV,KAAU;;AACtD,MAAIA,QAAQ,IAAIL,KAAK,KAAKG,SAA1B,EAAqC;AACnC,UAAM,IAAIb,eAAJ,aAAwBW,KAAxB,0BAAmDA,KAAnD,EAA0D,SAA1D,CAAN;AACD;;AAED,MAAID,KAAK,KAAKG,SAAV,IAAwB,OAAOH,KAAP,KAAiB,QAA7C,EAAwD;AACtD,UAAM,IAAIV,eAAJ,aAAwBW,KAAxB,4CAAqEA,KAArE,EAA4E,SAA5E,CAAN;AACD;AACF,CARD;;AASA,IAAMM,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACP,KAAD,EAAQC,KAAR,EAAoC;AAAA,MAArBI,QAAqB,uEAAV,KAAU;;AACnE,MAAIA,QAAQ,IAAIL,KAAK,KAAKG,SAA1B,EAAqC;AACnC,UAAM,IAAIb,eAAJ,aAAwBW,KAAxB,0BAAmDA,KAAnD,EAA0D,SAA1D,CAAN;AACD;;AAED,MAAID,KAAK,KAAKG,SAAV,IAAwBZ,WAAW,CAACS,KAAD,CAAX,IAAsBN,mBAAmB,CAACM,KAAD,CAArE,EAA+E;AAC7E,UAAM,IAAIV,eAAJ,aAAwBW,KAAxB,oDAA6EA,KAA7E,EAAoF,SAApF,CAAN;AACD;AACF,CARD;;AAUAO,MAAM,CAACC,OAAP,GAAiB;AACff,EAAAA,mBAAmB,EAAnBA,mBADe;AAEfI,EAAAA,UAAU,EAAVA,UAFe;AAGfP,EAAAA,WAAW,EAAXA,WAHe;AAIfa,EAAAA,QAAQ,EAARA,QAJe;AAKfE,EAAAA,WAAW,EAAXA,WALe;AAMfC,EAAAA,wBAAwB,EAAxBA;AANe,CAAjB","sourcesContent":["const { JWTClaimInvalid } = require('../errors')\n\nconst isNotString = val => typeof val !== 'string' || val.length === 0\nconst isNotArrayOfStrings = val => !Array.isArray(val) || val.length === 0 || val.some(isNotString)\nconst isRequired = (Err, value, label, claim) => {\n  if (value === undefined) {\n    throw new Err(`${label} is missing`, claim, 'missing')\n  }\n}\nconst isString = (Err, value, label, claim, required = false) => {\n  if (required) {\n    isRequired(Err, value, label, claim)\n  }\n\n  if (value !== undefined && isNotString(value)) {\n    throw new Err(`${label} must be a string`, claim, 'invalid')\n  }\n}\nconst isTimestamp = (value, label, required = false) => {\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(`\"${label}\" claim is missing`, label, 'missing')\n  }\n\n  if (value !== undefined && (typeof value !== 'number')) {\n    throw new JWTClaimInvalid(`\"${label}\" claim must be a JSON numeric value`, label, 'invalid')\n  }\n}\nconst isStringOrArrayOfStrings = (value, label, required = false) => {\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(`\"${label}\" claim is missing`, label, 'missing')\n  }\n\n  if (value !== undefined && (isNotString(value) && isNotArrayOfStrings(value))) {\n    throw new JWTClaimInvalid(`\"${label}\" claim must be a string or array of strings`, label, 'invalid')\n  }\n}\n\nmodule.exports = {\n  isNotArrayOfStrings,\n  isRequired,\n  isNotString,\n  isString,\n  isTimestamp,\n  isStringOrArrayOfStrings\n}\n"]},"metadata":{},"sourceType":"script"}