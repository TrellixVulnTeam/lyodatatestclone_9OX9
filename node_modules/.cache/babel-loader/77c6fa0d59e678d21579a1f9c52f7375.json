{"ast":null,"code":"var jose = require('jose');\n\nfunction retrieveSigningKeys(keys) {\n  var keystore = jose.JWKS.asKeyStore({\n    keys: keys\n  }, {\n    ignoreErrors: true\n  });\n  return keystore.all({\n    use: 'sig'\n  }).map(function (key) {\n    return {\n      kid: key.kid,\n      alg: key.alg,\n\n      get publicKey() {\n        return key.toPEM(false);\n      },\n\n      get rsaPublicKey() {\n        return key.toPEM(false);\n      },\n\n      getPublicKey: function getPublicKey() {\n        return key.toPEM(false);\n      }\n    };\n  });\n}\n\nmodule.exports = {\n  retrieveSigningKeys: retrieveSigningKeys\n};","map":{"version":3,"sources":["/Users/suryanandsunil/Desktop/proto1-arizon/lyo-test/node_modules/jwks-rsa/src/utils.js"],"names":["jose","require","retrieveSigningKeys","keys","keystore","JWKS","asKeyStore","ignoreErrors","all","use","map","key","kid","alg","publicKey","toPEM","rsaPublicKey","getPublicKey","module","exports"],"mappings":"AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;AACjC,MAAMC,QAAQ,GAAGJ,IAAI,CAACK,IAAL,CAAUC,UAAV,CAAqB;AAAEH,IAAAA,IAAI,EAAJA;AAAF,GAArB,EAA+B;AAAEI,IAAAA,YAAY,EAAE;AAAhB,GAA/B,CAAjB;AAEA,SAAOH,QAAQ,CAACI,GAAT,CAAa;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAAb,EAA6BC,GAA7B,CAAiC,UAACC,GAAD,EAAS;AAC/C,WAAO;AACLC,MAAAA,GAAG,EAAED,GAAG,CAACC,GADJ;AAELC,MAAAA,GAAG,EAAEF,GAAG,CAACE,GAFJ;;AAGL,UAAIC,SAAJ,GAAgB;AAAE,eAAOH,GAAG,CAACI,KAAJ,CAAU,KAAV,CAAP;AAA0B,OAHvC;;AAIL,UAAIC,YAAJ,GAAmB;AAAE,eAAOL,GAAG,CAACI,KAAJ,CAAU,KAAV,CAAP;AAA0B,OAJ1C;;AAKLE,MAAAA,YALK,0BAKU;AAAE,eAAON,GAAG,CAACI,KAAJ,CAAU,KAAV,CAAP;AAA0B;AALtC,KAAP;AAOD,GARM,CAAP;AASD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,mBAAmB,EAAnBA;AADe,CAAjB","sourcesContent":["const jose = require('jose');\n\nfunction retrieveSigningKeys(keys) {\n  const keystore = jose.JWKS.asKeyStore({ keys }, { ignoreErrors: true });\n\n  return keystore.all({ use: 'sig' }).map((key) => {\n    return {\n      kid: key.kid,\n      alg: key.alg,\n      get publicKey() { return key.toPEM(false); },\n      get rsaPublicKey() { return key.toPEM(false); },\n      getPublicKey() { return key.toPEM(false); }\n    };\n  });\n}\n\nmodule.exports = {\n  retrieveSigningKeys\n};\n"]},"metadata":{},"sourceType":"script"}